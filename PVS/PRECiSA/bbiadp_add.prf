(bbiadp_add
 (AEB_ADD_inclusion_j 0
  (AEB_ADD_inclusion_j-3 nil 3699285219
   ("" (expand "Inclusion4?")
    (("" (skeep :preds? t)
      (("" (match "real_pred(%%)" step (hide $1n))
        (("" (match "real_pred(%%)" step (hide $1n))
          (("" (match "real_pred(%%)" step (hide $1n))
            (("" (match "real_pred(%%)" step (hide $1n))
              (("" (assert)
                (("" (expand "aebounddp_add_safe" :assert? none)
                  (("" (expand "aebounddp_add_ia")
                    (("" (case "x2 >= 0 AND x4 >= 0")
                      (("1" (replace -1 :hide? t)
                        (("1" (expand "aerr_ulp_add" :assert? none)
                          (("1" (prove-interval-inclusion) nil nil))
                          nil))
                        nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((aebounddp_add_safe const-decl "real" bbiadp_add nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (aerr_ulp_add const-decl "nnreal" aerr_ulp_add axm_bnd)
    (Add_inclusion formula-decl nil interval interval_arith)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (ulp const-decl "posreal" ieee754_domain axm_bnd)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Ulp_dp const-decl "Interval" interval_ulp_dp nil)
    (Div const-decl "Interval" interval interval_arith)
    (Any3? const-decl "bool" interval interval_arith)
    (Precondition4? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith)
    (Precondition? const-decl "bool" interval interval_arith)
    (PRED type-eq-decl nil defined_types nil)
    (Add const-decl "Interval" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Div_inclusion formula-decl nil interval interval_arith)
    (Ulp_dp_inclusion formula-decl nil interval_ulp_dp nil)
    (Abs_inclusion formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (ub_r2i formula-decl nil interval interval_arith)
    (lb_r2i formula-decl nil interval interval_arith)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (Ge const-decl "bool" interval interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (aebounddp_add_ia const-decl "Interval" bbiadp_add nil)
    (pre1to4d const-decl "(Precondition4?)" interval interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (Any_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Any3_Precondition3 name-judgement "(Precondition3?)" interval
     interval_arith)
    (Inclusion4? const-decl "bool" interval interval_arith))
   nil
   (AEB_ADD_inclusion_j subtype "bbiadp_add.aebounddp_add_ia"
    "(interval.Inclusion4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?), bbiadp_add.aebounddp_add_safe))"))
  (AEB_ADD_inclusion_j-2 nil 3684844501
   ("" (expand "Inclusion4?")
    (("" (skeep)
      (("" (typepred "X2" "X4")
        (("" (assert)
          (("" (expand "aebounddp_add_safe")
            (("" (expand "aebounddp_add_ia")
              (("" (lift-if 1)
                (("" (split 1)
                  (("1" (flatten)
                    (("1" (hide 1)
                      (("1" (split -1)
                        (("1" (expand "NonNeg?")
                          (("1" (expand "Ge")
                            (("1" (flatten) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "aerr_ulp_add")
                      (("2" (with-tccs (use "Add_inclusion"))
                        (("2" (assert)
                          (("2" (hide 4)
                            (("2" (split 1)
                              (("1"
                                (expand "add_aerr_bound")
                                (("1"
                                  (with-tccs (use "Add_inclusion"))
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (with-tccs (use "Div_inclusion"))
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (with-tccs
                                         (use "Ulp_inclusion"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (lemma "Add_inclusion")
                                              (("1"
                                                (inst
                                                 -1
                                                 "Add(Abs(X1), Abs(X3))"
                                                 "Add(X2, X4)"
                                                 "abs(x1) + abs(x3)"
                                                 "x2 + x4")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (with-tccs
                                                         (use
                                                          "Add_inclusion"))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (use
                                                                 "Abs_inclusion")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (with-tccs
                                                                 (use
                                                                  "Abs_inclusion"))
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (with-tccs
                                                         (use
                                                          "Add_inclusion"))
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (eval-formula) nil nil)
                                       ("3" (eval-formula) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith)
    (Ge const-decl "bool" interval interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     interval_arith)
    (NonNeg_Add application-judgement "(NonNeg?)" interval
     interval_arith)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Abs_inclusion formula-decl nil interval interval_arith)
    (Ulp_inclusion formula-decl nil interval_ulp nil)
    (Div_inclusion formula-decl nil interval interval_arith)
    (Add_inclusion formula-decl nil interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Ulp const-decl "Interval" interval_ulp nil)
    (Div const-decl "Interval" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (Interval type-eq-decl nil interval interval_arith)
    (Precondition? const-decl "bool" interval interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (Precondition4? const-decl "bool" interval interval_arith)
    (pre1to4d const-decl "(Precondition4?)" interval interval_arith)
    (Any3? const-decl "bool" interval interval_arith)
    (Inclusion4? const-decl "bool" interval interval_arith))
   nil
   (AEB_ADD_inclusion_j subtype "bbiadp_add.aebounddp_add_ia"
    "(interval.Inclusion4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?), bbiadp_add.aebounddp_add_safe))"))
  (AEB_ADD_inclusion_j-1 nil 3684844388 ("" (judgement-tcc) nil nil)
   nil nil
   (AEB_ADD_inclusion_j subtype "bbiadp_add.aebounddp_add_ia"
    "(interval.Inclusion4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?), bbiadp_add.aebounddp_add_safe))")))
 (AEB_ADD_fundmental_j 0
  (AEB_ADD_fundmental_j-2 nil 3699285243
   ("" (prove-fundamental-judgement) nil nil)
   ((aebounddp_add_ia const-decl "Interval" bbiadp_add nil)
    (<< const-decl "bool" interval interval_arith)
    (Ge const-decl "bool" interval interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (Proper_Abs application-judgement "ProperInterval" interval
     interval_arith)
    (Ulp_dp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_dp nil)
    (Ulp_dp_Inclusion name-judgement
     "(Inclusion?(PreTrue, LAMBDA (r: real) -> nonneg_real: ulp(r)))"
     interval_ulp_dp nil)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (Add_fundamental formula-decl nil interval interval_arith)
    (Div_fundamental formula-decl nil interval interval_arith)
    (Ulp_dp_proper formula-decl nil interval_ulp_dp nil)
    (Ulp_dp_fundamental formula-decl nil interval_ulp_dp nil)
    (Abs_fundamental formula-decl nil interval interval_arith)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (Add const-decl "Interval" interval interval_arith)
    (Div const-decl "Interval" interval interval_arith)
    (Ulp_dp const-decl "Interval" interval_ulp_dp nil)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (Precondition4? const-decl "bool" interval interval_arith)
    (Any3? const-decl "bool" interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (pre1to4d const-decl "(Precondition4?)" interval interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (Any_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Any3_Precondition3 name-judgement "(Precondition3?)" interval
     interval_arith)
    (AEB_ADD_inclusion_j name-judgement
     "(Inclusion4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?), aebounddp_add_safe))"
     bbiadp_add nil)
    (Fundamental4? const-decl "bool" interval interval_arith))
   nil
   (AEB_ADD_fundmental_j subtype "bbiadp_add.aebounddp_add_ia"
    "(interval.Fundamental4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?)))"))
  (AEB_ADD_fundmental_j-1 nil 3684845035
   ("" (expand "Fundamental4?")
    (("" (skeep)
      (("" (typepred "Y2" "Y4")
        (("" (assert)
          (("" (expand "aebounddp_add_ia")
            (("" (lift-if 1)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (hide -3 -4)
                    (("1" (use "Add_fundamental")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (split)
                            (("1" (use "Add_fundamental")
                              (("1" (assert) nil nil)) nil)
                             ("2" (use "Div_fundamental")
                              (("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (split)
                                    (("1"
                                      (use "Ulp_proper")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (use "Ulp_fundamental")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (use "Add_fundamental")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (use
                                                     "Add_fundamental")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (use
                                                             "Abs_fundamental")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (use
                                                             "Abs_fundamental")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "Add_fundamental")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (assert)
                                      (("3" (eval-formula) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (hide 2)
                      (("1" (lemma "NonNeg_Incl")
                        (("1" (inst? -1 :where -5)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (lemma "NonNeg_Incl")
                      (("2" (inst? -1 :where -7)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Incl formula-decl nil interval interval_arith)
    (Add_fundamental formula-decl nil interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Ulp const-decl "Interval" interval_ulp nil)
    (Div const-decl "Interval" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (Div_fundamental formula-decl nil interval interval_arith)
    (Ulp_fundamental formula-decl nil interval_ulp nil)
    (Abs_fundamental formula-decl nil interval interval_arith)
    (Ulp_proper formula-decl nil interval_ulp nil)
    (Incl_reflx formula-decl nil interval interval_arith)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Abs application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (NonNeg_Add application-judgement "(NonNeg?)" interval
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Precondition? const-decl "bool" interval interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (Precondition4? const-decl "bool" interval interval_arith)
    (pre1to4d const-decl "(Precondition4?)" interval interval_arith)
    (Any3? const-decl "bool" interval interval_arith)
    (Fundamental4? const-decl "bool" interval interval_arith))
   nil
   (AEB_ADD_fundmental_j subtype "bbiadp_add.aebounddp_add_ia"
    "(interval.Fundamental4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?)))")))
 (AEB_ADD_j 0
  (AEB_ADD_j-1 nil 3684844388 ("" (judgement-tcc) nil nil)
   ((AEB_ADD_inclusion_j name-judgement
     "(Inclusion4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?), aebounddp_add_safe))"
     bbiadp_add nil)
    (AEB_ADD_fundmental_j name-judgement
     "(Fundamental4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?)))"
     bbiadp_add nil)
    (Any3_Precondition3 name-judgement "(Precondition3?)" interval
     interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Any_Precondition name-judgement "(Precondition?)" interval
     interval_arith))
   nil
   (AEB_ADD_j subtype "bbiadp_add.aebounddp_add_ia"
    "{F: [[interval.Interval, interval.Interval, interval.Interval, interval.Interval] -> interval.Interval] | booleans.AND(interval.Inclusion4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?), bbiadp_add.aebounddp_add_safe)(F), interval.Fundamental4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?))(F))}"))))

