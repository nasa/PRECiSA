(bbiadp_ln
 (aeb_lgn_pre2_is_enough_for_aebounddp_ln_ia_tccs 0
  (aeb_lgn_pre2_is_enough_for_aebounddp_ln_ia_tccs-1 nil 3712257552
   ("" (skeep)
    (("" (expand "Pos?" -1)
      (("" (lemma "gt_weak_cancelation_sub")
        (("" (inst -1 "R1" "E1")
          (("" (replace -1 :hide? t)
            (("" (case "Pos?(R1)")
              (("1" (assert)
                (("1" (case "NOT lt(E1,R1)")
                  (("1" (hide-all-but (-2 1))
                    (("1" (expand "gt")
                      (("1" (expand "lt") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -3)
                    (("2" (use "lt_weak_cancelation_div")
                      (("2" (replace -1 :hide? t :dir rl)
                        (("2" (expand "Pos?")
                          (("2" (use "both_sides_1minus_lt1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (typepred "R1")
                  (("2" (typepred "E1")
                    (("2" (expand "Proper?")
                      (("2" (expand "NonNeg?")
                        (("2" (expand "Pos?")
                          (("2" (expand "Ge")
                            (("2" (expand "Gt")
                              (("2"
                                (expand "gt")
                                (("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Pos? const-decl "bool" interval interval_arith)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lt const-decl "bool" interval interval_arith)
    (gt const-decl "bool" interval interval_arith)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_weak_cancelation_div formula-decl nil interval_props
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     interval_arith)
    (Div const-decl "Interval" interval interval_arith)
    (both_sides_1minus_lt1 formula-decl nil interval_props
     interval_arith)
    (Pos_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Gt const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Ge const-decl "bool" interval interval_arith)
    (gt_weak_cancelation_sub formula-decl nil interval_props
     interval_arith))
   shostak))
 (aeb_lgn_pre2_predondition_j 0
  (aeb_lgn_pre2_predondition_j-1 nil 3711301484
   ("" (expand "Precondition2?")
    (("" (skeep)
      (("" (expand "aeb_lgn_pre2")
        (("" (flatten)
          (("" (split 1)
            (("1" (lemma "NonNeg_Incl")
              (("1" (inst? -1 :where 1)
                (("1" (inst? -1 :where -) (("1" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (expand "Pos?")
              (("2" (lemma "Gt_fundamental")
                (("2" (inst? -1 :where 1)
                  (("2" (inst? -1 :where -)
                    (("2" (assert)
                      (("2" (use "Sub_fundamental")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Pos? const-decl "bool" interval interval_arith)
    (Sub const-decl "Interval" interval interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Sub_fundamental formula-decl nil interval interval_arith)
    (Gt_fundamental formula-decl nil interval interval_arith)
    (NonNeg_Incl formula-decl nil interval interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Pos_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Interval type-eq-decl nil interval interval_arith)
    (real nonempty-type-from-decl nil reals nil)
    (aeb_lgn_pre2 const-decl "bool" bbiadp_ln nil)
    (Proper_Sub application-judgement "ProperInterval" interval
     interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith))
   nil
   (aeb_lgn_pre2_predondition_j subtype "bbiadp_ln.aeb_lgn_pre2"
    "(interval.Precondition2?)")))
 (AEB_LN_inclusion_j 0
  (AEB_LN_inclusion_j-9 "" 3712257637
   (""
    (with-labels
     (lemma "aeb_lgn_pre2_is_enough_for_aebounddp_ln_ia_tccs")
     "helper lemma 1")
    (("" (hide "helper lemma 1")
      (("" (expand "Inclusion2?")
        (("" (skeep*)
          (("" (case "x1>0")
            (("1" (case "x2>=0")
              (("1" (assert)
                (("1" (hide -1 -2)
                  (("1" (expand "aebounddp_ln_ia")
                    (("1" (expand "aebounddp_ln_safe")
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (expand "aebounddp_ln")
                              (("1"
                                (use "Add_inclusion")
                                (("1"
                                  (split -1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "ln_aerr_bound")
                                      (("2"
                                        (lemma "Neg_inclusion")
                                        (("2"
                                          (inst? -1 :where 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (use "Ln_inclusion")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (reveal
                                                         "helper lemma 1")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (typepred
                                                             "X2")
                                                            (("1"
                                                              (expand
                                                               "aeb_lgn_pre2")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "X2")
                                                            (("2"
                                                              (expand
                                                               "aeb_lgn_pre2")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred
                                                             "X2")
                                                            (("3"
                                                              (expand
                                                               "aeb_lgn_pre2")
                                                              (("3"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "Sub_inclusion")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (eval-formula
                                                                 1)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "Div_inclusion")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "X2")
                                                                    (("2"
                                                                      (expand
                                                                       "aeb_lgn_pre2")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "NonNeg?")
                                                                          (("2"
                                                                            (expand
                                                                             "Proper?")
                                                                            (("2"
                                                                              (expand
                                                                               "Zeroless?")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (div-by -1 "x1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (use "Div_inclusion")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide 2)
                                          (("3"
                                            (split 1)
                                            (("1"
                                              (lemma
                                               "Ulp_dp_inclusion")
                                              (("1"
                                                (inst? -1 :where 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (expand
                                                       "ln_ulp_bound")
                                                      (("1"
                                                        (use
                                                         "Max_inclusion")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (lemma
                                                                 "Abs_inclusion")
                                                                (("1"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (use
                                                                         "Ln_inclusion")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (typepred
                                                                             "X2")
                                                                            (("1"
                                                                              (expand
                                                                               "aeb_lgn_pre2")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (use
                                                                                     "Sub_inclusion")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "Abs_inclusion")
                                                                (("2"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (use
                                                                         "Ln_inclusion")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "X2")
                                                                            (("2"
                                                                              (expand
                                                                               "aeb_lgn_pre2")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (use
                                                                                       "Add_inclusion")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (eval-formula 1)
                                              nil
                                              nil)
                                             ("3"
                                              (eval-formula 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide 2)
                              (("2"
                                (typepred "X2")
                                (("2"
                                  (expand "aeb_lgn_pre2")
                                  (("2"
                                    (flatten)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (typepred "X2")
                  (("2" (expand "aeb_lgn_pre2") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "X2")
                (("2" (expand "aeb_lgn_pre2") (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (aebounddp_ln_safe const-decl "real" bbiadp_ln nil)
    (aebounddp_ln const-decl "nonneg_real" aerr754dp_ln float)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    nil nil (ln const-decl "real" ln_exp lnexp)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Pos_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Proper? const-decl "bool" interval interval_arith) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (ProperInterval type-eq-decl nil interval interval_arith)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Zeroless? const-decl "bool" interval interval_arith)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (Ge const-decl "bool" interval interval_arith) nil
    (Gt const-decl "bool" interval interval_arith)
    (Pos? const-decl "bool" interval interval_arith)
    (pXp const-decl "Interval" interval interval_arith)
    (Le const-decl "bool" interval interval_arith)
    (nXp const-decl "Interval" interval interval_arith)
    (pXn const-decl "Interval" interval interval_arith)
    (pXm const-decl "Interval" interval interval_arith)
    (nXn const-decl "Interval" interval interval_arith)
    (nXm const-decl "Interval" interval interval_arith)
    (mXp const-decl "Interval" interval interval_arith)
    (mXn const-decl "Interval" interval interval_arith)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (mXm const-decl "Interval" interval interval_arith)
    (Mult const-decl "Interval" interval interval_arith)
    (EmptyInterval const-decl "Interval" interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (Div_inclusion formula-decl nil interval interval_arith)
    (Sub_inclusion formula-decl nil interval interval_arith)
    (Ln_inclusion formula-decl nil interval_lnexp interval_arith)
    (minus_real_is_real application-judgement "real" reals nil)
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (Neg_inclusion formula-decl nil interval interval_arith)
    (Ulp_dp_inclusion formula-decl nil interval_ulp_dp nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (Abs_inclusion formula-decl nil interval interval_arith)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Max_inclusion formula-decl nil interval interval_arith)
    (Ulp_dp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp_dp))"
     interval_ulp_dp nil)
    (Ulp_dp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_dp nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    nil
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) |
   rounded_mode?(double_precision_format)(round)}" ieee754dp float)
    (dp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](double_precision_format)" ieee754dp float)
    (Interval type-eq-decl nil interval interval_arith)
    (Neg const-decl "Interval" interval interval_arith)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Ln const-decl "Interval" interval_lnexp interval_arith)
    (Sub const-decl "Interval" interval interval_arith) nil
    (Div const-decl "Interval" interval interval_arith)
    (aeb_lgn_pre2 const-decl "bool" bbiadp_ln nil)
    (Any? const-decl "bool" interval interval_arith)
    (Ulp_dp const-decl "Interval" interval_ulp_dp nil)
    (Max const-decl "Interval" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float float)
    (double_precision_format const-decl "Format" ieee754dp float)
    (float type-eq-decl nil float float)
    (Fbounded? const-decl "bool" float float)
    (dp_closest? const-decl "bool" ieee754dp float)
    (Fcanonic? const-decl "bool" float float)
    (unb_double type-eq-decl nil ieee754dp float)
    (closest_double? const-decl "bool" ieee754dp float)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp float)
    (ln_aerr_bound const-decl "nonneg_real" accum_err_ln float)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (ulp_dp const-decl "nonneg_real" ieee754dp float)
    (ln_ulp_bound const-decl "real" accum_err_ln float)
    (Add_inclusion formula-decl nil interval interval_arith)
    (aebounddp_ln_ia const-decl "Interval" bbiadp_ln nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (Inclusion2? const-decl "bool" interval interval_arith)
    (aeb_lgn_pre2_is_enough_for_aebounddp_ln_ia_tccs formula-decl nil
     bbiadp_ln nil))
   nil
   (AEB_LN_inclusion_j subtype "bbiadp_ln.aebounddp_ln_ia(bbiadp_ln.n)"
    "(interval.Inclusion2?(interval.Any?, bbiadp_ln.aeb_lgn_pre2, bbiadp_ln.aebounddp_ln_safe))"))
  (AEB_LN_inclusion_j-8 "" 3712237310
   (""
    (with-labels
     (case "FORALL(R1:ProperInterval,E1:ProperInterval | NonNeg?(E1)):
                                              Pos?(Sub(R1,E1)) IMPLIES (Pos?(R1)
					      AND Pos?(Sub([|1|],Div(E1,R1))))")
     "helper lemma 1")
    (("1" (hide "helper lemma 1")
      (("1" (expand "Inclusion2?")
        (("1" (skeep*)
          (("1" (case "x1>0")
            (("1" (case "x2>=0")
              (("1" (assert)
                (("1" (hide -1 -2)
                  (("1" (expand "aebounddp_ln_ia")
                    (("1" (expand "aebounddp_ln_safe")
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (expand "aebounddp_ln")
                              (("1"
                                (use "Add_inclusion")
                                (("1"
                                  (split -1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "ln_aerr_bound")
                                      (("2"
                                        (lemma "Neg_inclusion")
                                        (("2"
                                          (inst? -1 :where 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (use "Ln_inclusion")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (reveal
                                                         "helper lemma 1")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (typepred
                                                             "X2")
                                                            (("1"
                                                              (expand
                                                               "aeb_lgn_pre2")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "X2")
                                                            (("2"
                                                              (expand
                                                               "aeb_lgn_pre2")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred
                                                             "X2")
                                                            (("3"
                                                              (expand
                                                               "aeb_lgn_pre2")
                                                              (("3"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "Sub_inclusion")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (eval-formula
                                                                 1)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "Div_inclusion")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "X2")
                                                                    (("2"
                                                                      (expand
                                                                       "aeb_lgn_pre2")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "NonNeg?")
                                                                          (("2"
                                                                            (expand
                                                                             "Proper?")
                                                                            (("2"
                                                                              (expand
                                                                               "Zeroless?")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (div-by -1 "x1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (use "Div_inclusion")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (lemma
                                               "Ulp_dp_inclusion")
                                              (("1"
                                                (inst? -1 :where 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (expand
                                                       "ln_ulp_bound")
                                                      (("1"
                                                        (use
                                                         "Max_inclusion")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (lemma
                                                                 "Abs_inclusion")
                                                                (("1"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (use
                                                                         "Ln_inclusion")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (typepred
                                                                             "X2")
                                                                            (("1"
                                                                              (expand
                                                                               "aeb_lgn_pre2")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (use
                                                                                     "Sub_inclusion")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "Abs_inclusion")
                                                                (("2"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (use
                                                                         "Ln_inclusion")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "X2")
                                                                            (("2"
                                                                              (expand
                                                                               "aeb_lgn_pre2")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (use
                                                                                       "Add_inclusion")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assuming-tcc)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (eval-formula 1)
                                              nil
                                              nil)
                                             ("3"
                                              (eval-formula 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assuming-tcc) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assuming-tcc) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide 2)
                              (("2"
                                (typepred "X2")
                                (("2"
                                  (expand "aeb_lgn_pre2")
                                  (("2"
                                    (flatten)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (typepred "X2")
                  (("2" (expand "aeb_lgn_pre2") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "X2")
                (("2" (expand "aeb_lgn_pre2") (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (expand "Pos?" -1)
          (("2" (lemma "gt_weak_cancelation_sub")
            (("2" (inst -1 "R1" "E1")
              (("2" (replace -1 :hide? t)
                (("2" (case "Pos?(R1)")
                  (("1" (assert)
                    (("1" (case "NOT lt(E1,R1)")
                      (("1" (hide-all-but (-2 1))
                        (("1" (expand "gt")
                          (("1" (expand "lt") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -3)
                        (("2" (use "lt_weak_cancelation_div")
                          (("2" (replace -1 :hide? t :dir rl)
                            (("2" (expand "Pos?")
                              (("2"
                                (use "both_sides_1minus_lt1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (typepred "R1")
                      (("2" (typepred "E1")
                        (("2" (expand "Proper?")
                          (("2" (expand "NonNeg?")
                            (("2" (expand "Pos?")
                              (("2"
                                (expand "Ge")
                                (("2"
                                  (expand "Gt")
                                  (("2"
                                    (expand "gt")
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Div const-decl "Interval" interval interval_arith)
    (Sub const-decl "Interval" interval interval_arith)
    (Pos? const-decl "bool" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Inclusion2? const-decl "bool" interval interval_arith)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (Add_inclusion formula-decl nil interval interval_arith)
    (ln_ulp_bound const-decl "real" accum_err_ln float)
    (ulp_dp const-decl "nonneg_real" ieee754dp float)
    (ln_aerr_bound const-decl "nonneg_real" accum_err_ln float)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp float)
    (closest_double? const-decl "bool" ieee754dp float)
    (unb_double type-eq-decl nil ieee754dp float)
    (Fcanonic? const-decl "bool" float float)
    (Add const-decl "Interval" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Max const-decl "Interval" interval interval_arith)
    (Ulp_dp const-decl "Interval" interval_ulp_dp nil)
    (Any? const-decl "bool" interval interval_arith)
    (Ln const-decl "Interval" interval_lnexp interval_arith)
    (Neg const-decl "Interval" interval interval_arith)
    (EvenClosest? const-decl "bool" float float)
    (dp_closest? const-decl "bool" ieee754dp float)
    (double_precision_format const-decl "Format" ieee754dp float)
    (Fbounded? const-decl "bool" float float)
    (Format type-eq-decl nil float float)
    (float type-eq-decl nil float float)
    (dp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](double_precision_format)" ieee754dp float)
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) |
   rounded_mode?(double_precision_format)(round)}" ieee754dp float)
    nil
    (Ulp_dp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_dp nil)
    (Ulp_dp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp_dp))"
     interval_ulp_dp nil)
    (Max_inclusion formula-decl nil interval interval_arith)
    (Abs_inclusion formula-decl nil interval interval_arith)
    (vNum const-decl "posnat" float float)
    (RND_Min const-decl "(Fcanonic?(b))" float float)
    (Closest? const-decl "bool" float float)
    (Zeroin? const-decl "bool" interval interval_arith)
    (ulp const-decl "posreal" float float)
    (Fulp const-decl "real" float float)
    (RND_Max const-decl "(Fcanonic?(b))" float float)
    (Fopp const-decl "float" float float)
    (FtoR const-decl "real" float float) nil nil nil nil
    (Ulp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp))"
     interval_ulp nil)
    (Ulp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp nil)
    (Ulp_dp_inclusion formula-decl nil interval_ulp_dp nil)
    (Neg_inclusion formula-decl nil interval interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     interval_arith)
    (Ln_inclusion formula-decl nil interval_lnexp interval_arith)
    (Sub_inclusion formula-decl nil interval interval_arith)
    (Div_inclusion formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (EmptyInterval const-decl "Interval" interval interval_arith)
    (Mult const-decl "Interval" interval interval_arith)
    (mXm const-decl "Interval" interval interval_arith)
    (mXn const-decl "Interval" interval interval_arith)
    (mXp const-decl "Interval" interval interval_arith)
    (nXm const-decl "Interval" interval interval_arith)
    (nXn const-decl "Interval" interval interval_arith)
    (pXm const-decl "Interval" interval interval_arith)
    (pXn const-decl "Interval" interval interval_arith)
    (nXp const-decl "Interval" interval interval_arith)
    (Le const-decl "bool" interval interval_arith)
    (pXp const-decl "Interval" interval interval_arith)
    (Gt const-decl "bool" interval interval_arith)
    (Ge const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (Zeroless? const-decl "bool" interval interval_arith)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Pos_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (ln const-decl "real" ln_exp lnexp)
    (aebounddp_ln const-decl "nonneg_real" aerr754dp_ln float)
    (gt_weak_cancelation_sub formula-decl nil interval_props
     interval_arith)
    (both_sides_1minus_lt1 formula-decl nil interval_props
     interval_arith)
    (lt_weak_cancelation_div formula-decl nil interval_props
     interval_arith)
    (gt const-decl "bool" interval interval_arith)
    (lt const-decl "bool" interval interval_arith))
   nil
   (AEB_LN_inclusion_j subtype "bbiadp_ln.aebounddp_ln_ia(bbiadp_ln.n)"
    "(interval.Inclusion2?(interval.Any?, bbiadp_ln.aeb_lgn_pre2, bbiadp_ln.aebounddp_ln_safe))"))
  (AEB_LN_inclusion_j-7 "" 3712237216
   (""
    (with-labels
     (case "FORALL(R1,E1:ProperInterval | NonNeg?(E1)):
                                              Pos?(Sub(R1,E1)) IMPLIES (Pos?(R1)
					      AND Pos?(Sub([|1|],Div(E1,R1))))")
     "helper lemma 1")
    (("1" (hide "helper lemma 1")
      (("1" (expand "Inclusion2?")
        (("1" (skeep*)
          (("1" (case "x1>0")
            (("1" (case "x2>=0")
              (("1" (assert)
                (("1" (hide -1 -2)
                  (("1" (expand "aebounddp_ln_ia")
                    (("1" (expand "aebounddp_ln_safe")
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (expand "aebounddp_ln")
                              (("1"
                                (use "Add_inclusion")
                                (("1"
                                  (split -1)
                                  (("1" (propax) nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "ln_aerr_bound")
                                      (("2"
                                        (lemma "Neg_inclusion")
                                        (("2"
                                          (inst? -1 :where 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (use "Ln_inclusion")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (reveal
                                                         "helper lemma 1")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (typepred
                                                             "X2")
                                                            (("1"
                                                              (expand
                                                               "aeb_lgn_pre2")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))
                                                           ("2"
                                                            (typepred
                                                             "X2")
                                                            (("2"
                                                              (expand
                                                               "aeb_lgn_pre2")
                                                              (("2"
                                                                (flatten)
                                                                nil)))))
                                                           ("3"
                                                            (typepred
                                                             "X2")
                                                            (("3"
                                                              (expand
                                                               "aeb_lgn_pre2")
                                                              (("3"
                                                                (flatten)
                                                                nil)))))))))
                                                       ("2"
                                                        (use
                                                         "Sub_inclusion")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (eval-formula
                                                                 1)
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "Div_inclusion")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "X2")
                                                                    (("2"
                                                                      (expand
                                                                       "aeb_lgn_pre2")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "NonNeg?")
                                                                          (("2"
                                                                            (expand
                                                                             "Proper?")
                                                                            (("2"
                                                                              (expand
                                                                               "Zeroless?")
                                                                              (("2"
                                                                                (grind)
                                                                                nil)))))))))))))))))))))))))))))))))))))
                                           ("2"
                                            (div-by -1 "x1")
                                            (("2"
                                              (assert)
                                              nil)))))))))))
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (use "Div_inclusion")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide 2)
                                          (("3"
                                            (split 1)
                                            (("1"
                                              (lemma
                                               "Ulp_dp_inclusion")
                                              (("1"
                                                (inst? -1 :where 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (expand
                                                       "ln_ulp_bound")
                                                      (("1"
                                                        (use
                                                         "Max_inclusion")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (lemma
                                                                 "Abs_inclusion")
                                                                (("1"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (use
                                                                         "Ln_inclusion")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (typepred
                                                                             "X2")
                                                                            (("1"
                                                                              (expand
                                                                               "aeb_lgn_pre2")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (use
                                                                                     "Sub_inclusion")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil)))))))))))))))))))))))
                                                               ("2"
                                                                (lemma
                                                                 "Abs_inclusion")
                                                                (("2"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (use
                                                                         "Ln_inclusion")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "X2")
                                                                            (("2"
                                                                              (expand
                                                                               "aeb_lgn_pre2")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil)))
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (use
                                                                                       "Add_inclusion")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))
                                             ("2" (eval-formula 1) nil)
                                             ("3"
                                              (eval-formula 1)
                                              nil)))))))))))))))))))
                           ("2" (flatten)
                            (("2" (hide 2)
                              (("2"
                                (typepred "X2")
                                (("2"
                                  (expand "aeb_lgn_pre2")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (grind)
                                      nil)))))))))))))))))))))))
               ("2" (hide 2)
                (("2" (typepred "X2")
                  (("2" (expand "aeb_lgn_pre2")
                    (("2" (grind) nil)))))))))
             ("2" (hide 2)
              (("2" (typepred "X2")
                (("2" (expand "aeb_lgn_pre2")
                  (("2" (grind) nil)))))))))))))))
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (expand "Pos?" -1)
          (("2" (lemma "gt_weak_cancelation_sub")
            (("2" (inst -1 "R1" "E1")
              (("2" (replace -1 :hide? t)
                (("2" (use "gt_weak_cancelation_div")
                  (("1" (postpone) nil) ("2" (postpone) nil)
                   ("3" (postpone) nil))))))))))))))))
    nil)
   nil nil
   (AEB_LN_inclusion_j subtype "bbiadp_ln.aebounddp_ln_ia(bbiadp_ln.n)"
    "(interval.Inclusion2?(interval.Any?, bbiadp_ln.aeb_lgn_pre2, bbiadp_ln.aebounddp_ln_safe))"))
  (AEB_LN_inclusion_j-6 "" 3712234757
   (""
    (with-labels
     (case "FORALL(R1,E1:{X:ProperInterval | Pos?(X)}):
                                      Pos?(Sub(R1,E1)) IMPLIES (Pos?(R1) AND Pos?(Sub([|1|],Div(E1,R1))))")
     "helper lemma 1")
    (("1" (hide "helper lemma 1")
      (("1" (expand "Inclusion2?")
        (("1" (skeep*)
          (("1" (case "x1>0")
            (("1" (case "x2>=0")
              (("1" (assert)
                (("1" (hide -1 -2)
                  (("1" (expand "aebounddp_ln_ia")
                    (("1" (expand "aebounddp_ln_safe")
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (expand "aebounddp_ln")
                              (("1"
                                (use "Add_inclusion")
                                (("1"
                                  (split -1)
                                  (("1" (propax) nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "ln_aerr_bound")
                                      (("2"
                                        (lemma "Neg_inclusion")
                                        (("2"
                                          (inst? -1 :where 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (use "Ln_inclusion")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (reveal
                                                         "helper lemma 1")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (typepred
                                                             "X2")
                                                            (("1"
                                                              (expand
                                                               "aeb_lgn_pre2")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))))
                                                           ("2"
                                                            (typepred
                                                             "X2")
                                                            (("2"
                                                              (expand
                                                               "aeb_lgn_pre2")
                                                              (("2"
                                                                (flatten)
                                                                nil)))))
                                                           ("3"
                                                            (typepred
                                                             "X2")
                                                            (("3"
                                                              (expand
                                                               "aeb_lgn_pre2")
                                                              (("3"
                                                                (flatten)
                                                                nil)))))))))
                                                       ("2"
                                                        (use
                                                         "Sub_inclusion")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (eval-formula
                                                                 1)
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "Div_inclusion")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "X2")
                                                                    (("2"
                                                                      (expand
                                                                       "aeb_lgn_pre2")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "NonNeg?")
                                                                          (("2"
                                                                            (expand
                                                                             "Proper?")
                                                                            (("2"
                                                                              (expand
                                                                               "Zeroless?")
                                                                              (("2"
                                                                                (grind)
                                                                                nil)))))))))))))))))))))))))))))))))))))
                                           ("2"
                                            (div-by -1 "x1")
                                            (("2"
                                              (assert)
                                              nil)))))))))))
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (use "Div_inclusion")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide 2)
                                          (("3"
                                            (split 1)
                                            (("1"
                                              (lemma
                                               "Ulp_dp_inclusion")
                                              (("1"
                                                (inst? -1 :where 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (expand
                                                       "ln_ulp_bound")
                                                      (("1"
                                                        (use
                                                         "Max_inclusion")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (lemma
                                                                 "Abs_inclusion")
                                                                (("1"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (use
                                                                         "Ln_inclusion")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (typepred
                                                                             "X2")
                                                                            (("1"
                                                                              (expand
                                                                               "aeb_lgn_pre2")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (use
                                                                                     "Sub_inclusion")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil)))))))))))))))))))))))
                                                               ("2"
                                                                (lemma
                                                                 "Abs_inclusion")
                                                                (("2"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (use
                                                                         "Ln_inclusion")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "X2")
                                                                            (("2"
                                                                              (expand
                                                                               "aeb_lgn_pre2")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil)))
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (use
                                                                                       "Add_inclusion")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))
                                             ("2" (eval-formula 1) nil)
                                             ("3"
                                              (eval-formula 1)
                                              nil)))))))))))))))))))
                           ("2" (flatten)
                            (("2" (hide 2)
                              (("2"
                                (typepred "X2")
                                (("2"
                                  (expand "aeb_lgn_pre2")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (grind)
                                      nil)))))))))))))))))))))))
               ("2" (hide 2)
                (("2" (typepred "X2")
                  (("2" (expand "aeb_lgn_pre2")
                    (("2" (grind) nil)))))))))
             ("2" (hide 2)
              (("2" (typepred "X2")
                (("2" (expand "aeb_lgn_pre2")
                  (("2" (grind) nil)))))))))))))))
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (expand "Pos?" -1)
          (("2" (lemma "gt_weak_cancelation_sub")
            (("2" (inst -1 "R1" "E1")
              (("2" (replace -1 :hide? t)
                (("2" (use "gt_weak_cancelation_div")
                  (("1" (postpone) nil) ("2" (postpone) nil)
                   ("3" (postpone) nil))))))))))))))))
    nil)
   nil nil
   (AEB_LN_inclusion_j subtype "bbiadp_ln.aebounddp_ln_ia(bbiadp_ln.n)"
    "(interval.Inclusion2?(interval.Any?, bbiadp_ln.aeb_lgn_pre2, bbiadp_ln.aebounddp_ln_safe))"))
  (AEB_LN_inclusion_j-5 "" 3712234317
   (""
    (with-labels
     (case "FORALL(R1,E1:ProperInterval):
                              Pos?(Sub(R1,E1)) IMPLIES (Pos?(R1) AND Pos?(Sub([|1|],Div(E1,R1))))")
     "helper lemma 1")
    (("1" (hide "helper lemma 1")
      (("1" (expand "Inclusion2?")
        (("1" (skeep*)
          (("1" (case "x1>0")
            (("1" (case "x2>=0")
              (("1" (assert)
                (("1" (hide -1 -2)
                  (("1" (expand "aebounddp_ln_ia")
                    (("1" (expand "aebounddp_ln_safe")
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (expand "aebounddp_ln")
                              (("1"
                                (use "Add_inclusion")
                                (("1"
                                  (split -1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "ln_aerr_bound")
                                      (("2"
                                        (lemma "Neg_inclusion")
                                        (("2"
                                          (inst? -1 :where 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (use "Ln_inclusion")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (reveal
                                                         "helper lemma 1")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (typepred
                                                             "X2")
                                                            (("1"
                                                              (expand
                                                               "aeb_lgn_pre2")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "X2")
                                                            (("2"
                                                              (expand
                                                               "aeb_lgn_pre2")
                                                              (("2"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred
                                                             "X2")
                                                            (("3"
                                                              (expand
                                                               "aeb_lgn_pre2")
                                                              (("3"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "Sub_inclusion")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (eval-formula
                                                                 1)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "Div_inclusion")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "X2")
                                                                    (("2"
                                                                      (expand
                                                                       "aeb_lgn_pre2")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "NonNeg?")
                                                                          (("2"
                                                                            (expand
                                                                             "Proper?")
                                                                            (("2"
                                                                              (expand
                                                                               "Zeroless?")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (div-by -1 "x1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (use "Div_inclusion")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide 2)
                                          (("3"
                                            (split 1)
                                            (("1"
                                              (lemma
                                               "Ulp_dp_inclusion")
                                              (("1"
                                                (inst? -1 :where 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (expand
                                                       "ln_ulp_bound")
                                                      (("1"
                                                        (use
                                                         "Max_inclusion")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (lemma
                                                                 "Abs_inclusion")
                                                                (("1"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (use
                                                                         "Ln_inclusion")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (typepred
                                                                             "X2")
                                                                            (("1"
                                                                              (expand
                                                                               "aeb_lgn_pre2")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (use
                                                                                     "Sub_inclusion")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "Abs_inclusion")
                                                                (("2"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (use
                                                                         "Ln_inclusion")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "X2")
                                                                            (("2"
                                                                              (expand
                                                                               "aeb_lgn_pre2")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (use
                                                                                       "Add_inclusion")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (eval-formula 1)
                                              nil
                                              nil)
                                             ("3"
                                              (eval-formula 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide 2)
                              (("2"
                                (typepred "X2")
                                (("2"
                                  (expand "aeb_lgn_pre2")
                                  (("2"
                                    (flatten)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (typepred "X2")
                  (("2" (expand "aeb_lgn_pre2") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "X2")
                (("2" (expand "aeb_lgn_pre2") (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (expand "Pos?" -1)
          (("2" (lemma "gt_weak_cancelation_sub")
            (("2" (inst -1 "R1" "E1")
              (("2" (replace -1 :hide? t)
                (("2" (use "gt_weak_cancelation_div")
                  (("1" (postpone) nil nil) ("2" (postpone) nil nil)
                   ("3" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (AEB_LN_inclusion_j subtype "bbiadp_ln.aebounddp_ln_ia(bbiadp_ln.n)"
    "(interval.Inclusion2?(interval.Any?, bbiadp_ln.aeb_lgn_pre2, bbiadp_ln.aebounddp_ln_safe))"))
  (AEB_LN_inclusion_j-4 "" 3712150244
   (""
    (with-labels
     (case "FORALL(R1,E1:Interval):
                      Pos?(Sub(R1,E1)) IMPLIES (Pos?(R1) AND Pos?(Sub([|1|],Div(E1,R1))))")
     "helper lemma 1")
    (("1" (hide "helper lemma 1")
      (("1" (expand "Inclusion2?")
        (("1" (skeep*)
          (("1" (case "x1>0")
            (("1" (case "x2>=0")
              (("1" (assert)
                (("1" (hide -1 -2)
                  (("1" (expand "aebounddp_ln_ia")
                    (("1" (expand "aebounddp_ln_safe")
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (expand "aebounddp_ln")
                              (("1"
                                (use "Add_inclusion")
                                (("1"
                                  (split -1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "ln_aerr_bound")
                                      (("2"
                                        (lemma "Neg_inclusion")
                                        (("2"
                                          (inst? -1 :where 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (use "Ln_inclusion")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (reveal
                                                         "helper lemma 1")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (typepred
                                                             "X2")
                                                            (("1"
                                                              (expand
                                                               "aeb_lgn_pre2")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "Sub_inclusion")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (eval-formula
                                                                 1)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "Div_inclusion")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "X2")
                                                                    (("2"
                                                                      (expand
                                                                       "aeb_lgn_pre2")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "NonNeg?")
                                                                          (("2"
                                                                            (expand
                                                                             "Proper?")
                                                                            (("2"
                                                                              (expand
                                                                               "Zeroless?")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (div-by -1 "x1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (use "Div_inclusion")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide 2)
                                          (("3"
                                            (split 1)
                                            (("1"
                                              (lemma
                                               "Ulp_dp_inclusion")
                                              (("1"
                                                (inst? -1 :where 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (expand
                                                       "ln_ulp_bound")
                                                      (("1"
                                                        (use
                                                         "Max_inclusion")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (lemma
                                                                 "Abs_inclusion")
                                                                (("1"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (use
                                                                         "Ln_inclusion")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (typepred
                                                                             "X2")
                                                                            (("1"
                                                                              (expand
                                                                               "aeb_lgn_pre2")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (use
                                                                                     "Sub_inclusion")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "Abs_inclusion")
                                                                (("2"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (use
                                                                         "Ln_inclusion")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "X2")
                                                                            (("2"
                                                                              (expand
                                                                               "aeb_lgn_pre2")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      -3
                                                                                      -1))
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (use
                                                                                       "Add_inclusion")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (eval-formula 1)
                                              nil
                                              nil)
                                             ("3"
                                              (eval-formula 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide 2)
                              (("2"
                                (typepred "X2")
                                (("2"
                                  (expand "aeb_lgn_pre2")
                                  (("2"
                                    (flatten)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (typepred "X2")
                  (("2" (expand "aeb_lgn_pre2") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "X2")
                (("2" (expand "aeb_lgn_pre2") (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (expand "Pos?" -1)
          (("2" (lemma "gt_weak_cancelation_sub")
            (("2" (inst -1 "R1" "E1")
              (("1" (postpone) nil nil) ("2" (postpone) nil nil)
               ("3" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (AEB_LN_inclusion_j subtype "bbiadp_ln.aebounddp_ln_ia(bbiadp_ln.n)"
    "(interval.Inclusion2?(interval.Any?, bbiadp_ln.aeb_lgn_pre2, bbiadp_ln.aebounddp_ln_safe))"))
  (AEB_LN_inclusion_j-3 "" 3711302161
   (""
    (with-labels
     (case "FORALL(R1,E1:Interval):
              Pos?(Sub(R1,E1)) IMPLIES (Pos?(R1) AND Pos?(Sub([|1|],Div(E1,R1))))")
     "helper lemma 1")
    (("1" (hide "helper lemma 1")
      (("1" (expand "Inclusion2?")
        (("1" (skeep*)
          (("1" (case "x1>0")
            (("1" (case "x2>0")
              (("1" (assert)
                (("1" (hide -1 -2)
                  (("1" (expand "aebounddp_ln_ia")
                    (("1" (expand "aebounddp_ln_safe")
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (expand "aebounddp_ln")
                              (("1"
                                (use "Add_inclusion")
                                (("1"
                                  (split -1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "ln_aerr_bound")
                                      (("2"
                                        (lemma "Neg_inclusion")
                                        (("2"
                                          (inst? -1 :where 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (use "Ln_inclusion")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (reveal
                                                         "helper lemma 1")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (typepred
                                                             "X2")
                                                            (("1"
                                                              (expand
                                                               "aeb_lgn_pre2")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (use
                                                         "Sub_inclusion")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (eval-formula
                                                                 1)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "Div_inclusion")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "X2")
                                                                    (("2"
                                                                      (expand
                                                                       "aeb_lgn_pre2")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "NonNeg?")
                                                                          (("2"
                                                                            (expand
                                                                             "Proper?")
                                                                            (("2"
                                                                              (expand
                                                                               "Zeroless?")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (div-by -1 "x1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (use "Div_inclusion")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide 2)
                                          (("3"
                                            (split 1)
                                            (("1"
                                              (lemma
                                               "Ulp_dp_inclusion")
                                              (("1"
                                                (inst? -1 :where 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (expand
                                                       "ln_ulp_bound")
                                                      (("1"
                                                        (use
                                                         "Max_inclusion")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (lemma
                                                                 "Abs_inclusion")
                                                                (("1"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (use
                                                                         "Ln_inclusion")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (typepred
                                                                             "X2")
                                                                            (("1"
                                                                              (expand
                                                                               "aeb_lgn_pre2")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (use
                                                                                     "Sub_inclusion")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "Abs_inclusion")
                                                                (("2"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (use
                                                                         "Ln_inclusion")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "X2")
                                                                            (("2"
                                                                              (expand
                                                                               "aeb_lgn_pre2")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      -3
                                                                                      -1))
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (use
                                                                                       "Add_inclusion")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (eval-formula 1)
                                              nil
                                              nil)
                                             ("3"
                                              (eval-formula 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide 2)
                              (("2"
                                (typepred "X2")
                                (("2"
                                  (expand "aeb_lgn_pre2")
                                  (("2"
                                    (flatten)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (typepred "X2")
                  (("2" (expand "aeb_lgn_pre2")
                    (("2" (grind) (("2" (postpone) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "X2")
                (("2" (expand "aeb_lgn_pre2") (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (postpone) nil nil)) nil))
    nil)
   nil shostak
   (AEB_LN_inclusion_j subtype "bbiadp_ln.aebounddp_ln_ia(bbiadp_ln.n)"
    "(interval.Inclusion2?(interval.Any?, bbiadp_ln.aeb_lgn_pre2, bbiadp_ln.aebounddp_ln_safe))"))
  (AEB_LN_inclusion_j-2 nil 3699953981
   ("" (expand "Inclusion2?")
    (("" (skeep*)
      (("" (expand "aebounddp_ln_ia")
        (("" (expand "aebounddp_ln_safe")
          (("" (lift-if)
            (("" (split)
              (("1" (flatten)
                (("1" (lift-if 1)
                  (("1" (split 1)
                    (("1" (flatten)
                      (("1" (expand "aebounddp_ln")
                        (("1" (use "Add_inclusion")
                          (("1" (split -1)
                            (("1" (propax) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (expand "ln_aerr_bound")
                                (("2"
                                  (lemma "Min_inclusion")
                                  (("2"
                                    (case "min(2,x2)=min(x2,2)")
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (eval-formula)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2)
                              (("3"
                                (use "Div_inclusion")
                                (("3"
                                  (assert)
                                  (("3"
                                    (hide 2 3)
                                    (("3"
                                      (split)
                                      (("1"
                                        (lemma "Ulp_dp_inclusion")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (expand "ln_ulp_bound")
                                                (("1"
                                                  (use "Add_inclusion")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (use
                                                           "Abs_inclusion")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (use
                                                                 "Ln_inclusion")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "min(2,x2)=min(x2,2)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (use
                                                               "Min_inclusion")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (eval-formula
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "min")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (eval-formula 1) nil nil)
                                       ("3" (eval-formula 1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (typepred "X2")
                        (("2" (expand "pre1to2b")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (typepred "X2")
                  (("2" (expand "pre1to2b")
                    (("2" (expand "NonNeg?")
                      (("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Add_inclusion formula-decl nil interval interval_arith)
    (ln_ulp_bound const-decl "real" accum_err_ln float)
    (ulp_dp const-decl "nonneg_real" ieee754dp float)
    (ln_aerr_bound const-decl "nonneg_real" accum_err_ln float)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp float)
    (closest_double? const-decl "bool" ieee754dp float)
    (unb_double type-eq-decl nil ieee754dp float)
    (Fcanonic? const-decl "bool" float float)
    (dp_closest? const-decl "bool" ieee754dp float)
    (Fbounded? const-decl "bool" float float)
    (float type-eq-decl nil float float)
    (double_precision_format const-decl "Format" ieee754dp float)
    (Format type-eq-decl nil float float)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (Ulp_dp const-decl "Interval" interval_ulp_dp nil)
    (Div const-decl "Interval" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith)
    (Precondition? const-decl "bool" interval interval_arith)
    (Min const-decl "Interval" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (dp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](double_precision_format)" ieee754dp float)
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) |
   rounded_mode?(double_precision_format)(round)}" ieee754dp float)
    nil (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Ulp_dp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_dp nil)
    (Ulp_dp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp_dp))"
     interval_ulp_dp nil)
    (Abs_inclusion formula-decl nil interval interval_arith)
    (Ulp_dp_inclusion formula-decl nil interval_ulp_dp nil)
    (Div_inclusion formula-decl nil interval interval_arith)
    (Min_inclusion formula-decl nil interval interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     interval_arith)
    (aebounddp_ln const-decl "nonneg_real" aerr754dp_ln float)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (Ge const-decl "bool" interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (Inclusion2? const-decl "bool" interval interval_arith))
   nil
   (AEB_LN_inclusion_j subtype "bbiadp_ln.aebounddp_ln_ia(bbiadp_ln.n)"
    "(interval.Inclusion2?(interval.Any?, bbiadp_ln.aeb_lgn_pre2, bbiadp_ln.aebounddp_ln_safe))"))
  (AEB_LN_inclusion_j-1 nil 3699953937 ("" (judgement-tcc) nil nil) nil
   nil
   (AEB_LN_inclusion_j subtype "bbiadp_ln.aebounddp_ln_ia(bbiadp_ln.n)"
    "(interval.Inclusion2?(interval.Any?, bbiadp_ln.aeb_lgn_pre2, bbiadp_ln.aebounddp_ln_safe))")))
 (AEB_LN_fundmental_j 0
  (AEB_LN_fundmental_j-2 nil 3699954036
   ("" (skeep)
    (("" (expand "Fundamental2?")
      (("" (skeep :preds? t)
        (("" (expand "aeb_lgn_pre2")
          (("" (flatten)
            (("" (assert)
              ((""
                (use "aeb_lgn_pre2_is_enough_for_aebounddp_ln_ia_tccs")
                (("" (assert)
                  (("" (flatten)
                    (("" (assert)
                      (("" (expand "aebounddp_ln_ia")
                        (("" (lift-if 1)
                          (("" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "aeb_lgn_pre2")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (use
                                     "aeb_lgn_pre2_is_enough_for_aebounddp_ln_ia_tccs")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (use "Add_fundamental")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (use "Neg_fundamental")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (use
                                                       "Ln_fundamental")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (case
                                                             "Sub([|1|], Div(Y1, X1)) << Sub([|1|], Div(Y, X))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "Proper_Sub")
                                                                (("1"
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   1)
                                                                  (("1"
                                                                    (hide
                                                                     2)
                                                                    (("1"
                                                                      (use
                                                                       "Proper_Div")
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "Pos_Zeroless")
                                                                          (("1"
                                                                            (inst?
                                                                             -1
                                                                             :where
                                                                             1)
                                                                            (("1"
                                                                              (use
                                                                               "Incl_Pos")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (use
                                                                 "Sub_fundamental")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (use
                                                                       "Div_fundamental")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "Pos_Zeroless")
                                                                          (("2"
                                                                            (inst?
                                                                             -1
                                                                             :where
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (use "Div_fundamental")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (case
                                                       "Ulp_dp(Max(Abs(Ln(n)(Sub(X1, Y1))), Abs(Ln(n)(Add(X1, Y1))))) <<
                   Ulp_dp(Max(Abs(Ln(n)(Sub(X, Y))), Abs(Ln(n)(Add(X, Y)))))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (use
                                                             "Ulp_dp_proper")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (use
                                                                   "Proper_Max")
                                                                  (("1"
                                                                    (hide
                                                                     2)
                                                                    (("1"
                                                                      (lemma
                                                                       "Proper_Abs")
                                                                      (("1"
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         1)
                                                                        (("1"
                                                                          (hide
                                                                           2)
                                                                          (("1"
                                                                            (use
                                                                             "Proper_Ln")
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (use
                                                                                 "Pos_Add_NonNeg")
                                                                                (("1"
                                                                                  (use
                                                                                   "Incl_Pos")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (lemma
                                                                       "Proper_Abs")
                                                                      (("2"
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         1)
                                                                        (("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (use
                                                                             "Proper_Ln")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (eval-formula)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (use
                                                           "Ulp_dp_fundamental")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (case
                                                                 "Max(Abs(Ln(n)(Sub(X1, Y1))), Abs(Ln(n)(Add(X1, Y1)))) <<
                     Max(Abs(Ln(n)(Sub(X, Y))), Abs(Ln(n)(Add(X, Y))))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     "Proper_Max")
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (lemma
                                                                         "Proper_Abs")
                                                                        (("1"
                                                                          (inst?
                                                                           -1
                                                                           :where
                                                                           1)
                                                                          (("1"
                                                                            (hide
                                                                             2)
                                                                            (("1"
                                                                              (use
                                                                               "Proper_Ln")
                                                                              (("1"
                                                                                (hide
                                                                                 2)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (use
                                                                                     "Pos_Add_NonNeg")
                                                                                    (("1"
                                                                                      (use
                                                                                       "Incl_Pos")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (lemma
                                                                         "Proper_Abs")
                                                                        (("2"
                                                                          (inst?
                                                                           -1
                                                                           :where
                                                                           1)
                                                                          (("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (use
                                                                               "Proper_Ln")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (use
                                                                     "Max_fundamental")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (use
                                                                             "Abs_fundamental")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 2)
                                                                                (("1"
                                                                                  (case
                                                                                   " Ln(n)(Sub(X1, Y1)) << Ln(n)(Sub(X, Y))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (use
                                                                                       "Proper_Ln")
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (use
                                                                                       "Ln_fundamental")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (use
                                                                                             "Sub_fundamental")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (use
                                                                             "Abs_fundamental")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (case
                                                                                   "Ln(n)(Add(X1, Y1)) << Ln(n)(Add(X, Y))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (use
                                                                                       "Proper_Ln")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (use
                                                                                               "Pos_Add_NonNeg")
                                                                                              (("1"
                                                                                                (use
                                                                                                 "Incl_Pos")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (use
                                                                                       "Ln_fundamental")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (use
                                                                                               "Pos_Add_NonNeg")
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (use
                                                                                               "Add_fundamental")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (hide 2)
                                (("2"
                                  (expand "aeb_lgn_pre2")
                                  (("2"
                                    (expand "NonNeg?")
                                    (("2"
                                      (expand "Pos?")
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (lemma "Ge_fundamental")
                                          (("1"
                                            (inst? -1 :where 1)
                                            (("1"
                                              (inst -1 "Y")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "Gt_fundamental")
                                          (("2"
                                            (inst? -1 :where 1)
                                            (("2"
                                              (inst -1 "Sub(X, Y)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "Sub_fundamental")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((aeb_lgn_pre2_is_enough_for_aebounddp_ln_ia_tccs formula-decl nil
     bbiadp_ln nil)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Interval type-eq-decl nil interval interval_arith)
    (real nonempty-type-from-decl nil reals nil)
    (aebounddp_ln_ia const-decl "Interval" bbiadp_ln nil)
    (Proper_Sub application-judgement "ProperInterval" interval
     interval_arith)
    (Add_fundamental formula-decl nil interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Max const-decl "Interval" interval interval_arith)
    (Ulp_dp const-decl "Interval" interval_ulp_dp nil)
    (Div const-decl "Interval" interval interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (Sub const-decl "Interval" interval interval_arith)
    (Ln const-decl "Interval" interval_lnexp interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Neg const-decl "Interval" interval interval_arith)
    (Max_fundamental formula-decl nil interval interval_arith)
    (Abs_fundamental formula-decl nil interval interval_arith)
    (Ulp_dp_fundamental formula-decl nil interval_ulp_dp nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (Ulp_dp_proper formula-decl nil interval_ulp_dp nil)
    (Proper_Ln judgement-tcc nil interval_lnexp interval_arith)
    (PosInterval type-eq-decl nil proper_arith interval_arith)
    (Pos_Add_NonNeg judgement-tcc nil interval interval_arith)
    (Proper_Abs judgement-tcc nil interval interval_arith)
    (n skolem-const-decl "nat" bbiadp_ln nil)
    (Proper_Max judgement-tcc nil interval interval_arith)
    (Neg_fundamental formula-decl nil interval interval_arith)
    (<< const-decl "bool" interval interval_arith)
    (Proper_Sub judgement-tcc nil interval interval_arith)
    (Pos? const-decl "bool" interval interval_arith)
    (Incl_Pos formula-decl nil interval interval_arith)
    (Pos_Zeroless judgement-tcc nil interval interval_arith)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Zeroless? const-decl "bool" interval interval_arith)
    (Proper_Div judgement-tcc nil interval interval_arith)
    (X1 skolem-const-decl "ProperInterval" bbiadp_ln nil)
    (Y1 skolem-const-decl "ProperInterval" bbiadp_ln nil)
    (Sub_fundamental formula-decl nil interval interval_arith)
    (Div_fundamental formula-decl nil interval interval_arith)
    (Incl_reflx formula-decl nil interval interval_arith)
    (Ln_fundamental formula-decl nil interval_lnexp interval_arith)
    (Ulp_dp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp_dp))"
     interval_ulp_dp nil)
    (Ulp_dp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_dp nil)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (Ge_fundamental formula-decl nil interval interval_arith)
    (Gt_fundamental formula-decl nil interval interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (Any_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Pos_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (AEB_LN_inclusion_j application-judgement
     "(Inclusion2?(Any?, aeb_lgn_pre2, aebounddp_ln_safe))" bbiadp_ln
     nil)
    (aeb_lgn_pre2 const-decl "bool" bbiadp_ln nil)
    (Fundamental2? const-decl "bool" interval interval_arith))
   nil
   (AEB_LN_fundmental_j subtype
    "bbiadp_ln.aebounddp_ln_ia(bbiadp_ln.n)"
    "(interval.Fundamental2?(interval.Any?, bbiadp_ln.aeb_lgn_pre2))"))
  (AEB_LN_fundmental_j-1 nil 3699953937 ("" (judgement-tcc) nil nil)
   nil nil
   (AEB_LN_fundmental_j subtype
    "bbiadp_ln.aebounddp_ln_ia(bbiadp_ln.n)"
    "(interval.Fundamental2?(interval.Any?, bbiadp_ln.aeb_lgn_pre2))")))
 (AEB_LN_TCC1 0
  (AEB_LN_TCC1-1 nil 3699953937 ("" (subtype-tcc) nil nil)
   ((AEB_LN_fundmental_j application-judgement
     "(Fundamental2?(Any?, aeb_lgn_pre2))" bbiadp_ln nil)
    (AEB_LN_inclusion_j application-judgement
     "(Inclusion2?(Any?, aeb_lgn_pre2, aebounddp_ln_safe))" bbiadp_ln
     nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (AEB_LN subtype "bbiadp_ln.aebounddp_ln_ia(bbiadp_ln.n)"
    "{F: [[interval.Interval, interval.Interval] -> interval.Interval] | booleans.AND(interval.Inclusion2?(interval.Any?, bbiadp_ln.aeb_lgn_pre2, bbiadp_ln.aebounddp_ln_safe)(F), interval.Fundamental2?(interval.Any?, bbiadp_ln.aeb_lgn_pre2)(F))}"))))

