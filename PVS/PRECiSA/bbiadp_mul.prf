(bbiadp_mul
 (AEB_MUL_inclusion_j 0
  (AEB_MUL_inclusion_j-2 nil 3699285288
   ("" (prove-inclusion-judgement)
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((Ge const-decl "bool" interval interval_arith)
    (aerr_ulp_mul const-decl "nnreal" aerr_ulp_mul axm_bnd)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (lb_r2i formula-decl nil interval interval_arith)
    (ub_r2i formula-decl nil interval interval_arith)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (Ulp_dp_inclusion formula-decl nil interval_ulp_dp nil)
    (Div_inclusion formula-decl nil interval interval_arith)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Abs_inclusion formula-decl nil interval interval_arith)
    (Mult_inclusion formula-decl nil interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (Mult const-decl "Interval" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval interval_arith)
    (Precondition4? const-decl "bool" interval interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith)
    (Any3? const-decl "bool" interval interval_arith)
    (Div const-decl "Interval" interval interval_arith)
    (Ulp_dp const-decl "Interval" interval_ulp_dp nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ulp const-decl "posreal" ieee754_domain axm_bnd)
    (Add_inclusion formula-decl nil interval interval_arith)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (aebounddp_mul_ia const-decl "Interval" bbiadp_mul nil)
    (aebounddp_mul_safe const-decl "real" bbiadp_mul nil)
    (Any3_Precondition3 name-judgement "(Precondition3?)" interval
     interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Any_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (pre1to4d const-decl "(Precondition4?)" interval interval_arith)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Inclusion4? const-decl "bool" interval interval_arith))
   nil
   (AEB_MUL_inclusion_j subtype "bbiadp_mul.aebounddp_mul_ia"
    "(interval.Inclusion4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?), bbiadp_mul.aebounddp_mul_safe))"))
  (AEB_MUL_inclusion_j-1 nil 3684758058
   ("" (expand "Inclusion4?")
    (("" (skeep)
      (("" (expand "aebounddp_mul_safe")
        (("" (expand "aebounddp_mul_ia")
          (("" (lift-if)
            (("" (split)
              (("1" (flatten)
                (("1" (hide 1)
                  (("1" (split -1)
                    (("1" (typepred "X2") (("1" (grind) nil nil)) nil)
                     ("2" (typepred "X4") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (lift-if 3)
                  (("2" (split 3)
                    (("1" (flatten)
                      (("1" (expand "aerr_ulp_mul")
                        (("1" (use "Add_inclusion")
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (split)
                                (("1"
                                  (expand "mul_aerr_bound")
                                  (("1"
                                    (use "Add_inclusion")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (split)
                                          (("1"
                                            (use "Add_inclusion")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (use
                                                     "Mult_inclusion")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (use
                                                           "Abs_inclusion")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "Mult_inclusion")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (use
                                                           "Abs_inclusion")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use "Mult_inclusion")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "Div_inclusion")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (split)
                                        (("1"
                                          (lemma "Ulp_inclusion")
                                          (("1"
                                            (inst? -1 :where 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (expand
                                                   "mul_ulp_bound")
                                                  (("1"
                                                    (lemma
                                                     "Add_inclusion")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "Mult(Abs(X1), Abs(X3))"
                                                       "Add(Add(Mult(Abs(X1), X4), Mult(Abs(X3), X2)), Mult(X2, X4))"
                                                       "abs(x1) * abs(x3)"
                                                       "abs(x1) * x4 + x2 * abs(x3) + x2 * x4")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (use
                                                               "Mult_inclusion")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (use
                                                                       "Abs_inclusion")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (use
                                                                       "Abs_inclusion")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "Add_inclusion")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "Add(Mult(Abs(X1), X4), Mult(Abs(X3), X2))"
                                                                 " Mult(X2, X4)"
                                                                 "abs(x1) * x4 + x2 * abs(x3)"
                                                                 "x2 * x4")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (use
                                                                         "Add_inclusion")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             2)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (use
                                                                                 "Mult_inclusion")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (use
                                                                                       "Abs_inclusion")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (use
                                                                                 "Mult_inclusion")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "Mult_inclusion")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "Abs(X3)"
                                                                                     "X2"
                                                                                     "abs(x3)"
                                                                                     "x2")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (hide
                                                                                           3)
                                                                                          (("2"
                                                                                            (use
                                                                                             "Abs_inclusion")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "Mult_inclusion")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (eval-formula) nil nil)
                                         ("3" (eval-formula) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (typepred "X2")
                        (("2" (expand "pre1to2b")
                          (("2" (typepred "X4")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Any3? const-decl "bool" interval interval_arith)
    (pre1to4d const-decl "(Precondition4?)" interval interval_arith)
    (Precondition4? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith)
    (Precondition? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (Ge const-decl "bool" interval interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (Add_inclusion formula-decl nil interval interval_arith)
    (Ulp const-decl "Interval" interval_ulp nil)
    (Div const-decl "Interval" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Mult const-decl "Interval" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (Div_inclusion formula-decl nil interval interval_arith)
    (Ulp_inclusion formula-decl nil interval_ulp nil)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Abs_inclusion formula-decl nil interval interval_arith)
    (Mult_inclusion formula-decl nil interval interval_arith)
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     interval_arith)
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (Inclusion4? const-decl "bool" interval interval_arith))
   nil
   (AEB_MUL_inclusion_j subtype "bbiadp_mul.aebounddp_mul_ia"
    "(interval.Inclusion4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?), bbiadp_mul.aebounddp_mul_safe))")))
 (AEB_MUL_fundmental_j 0
  (AEB_MUL_fundmental_j-4 nil 3699285385
   ("" (prove-fundamental-judgement) nil nil)
   ((aebounddp_mul_ia const-decl "Interval" bbiadp_mul nil)
    (<< const-decl "bool" interval interval_arith)
    (Ge const-decl "bool" interval interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     interval_arith)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (Ulp_dp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_dp nil)
    (Ulp_dp_Inclusion name-judgement
     "(Inclusion?(PreTrue, LAMBDA (r: real) -> nonneg_real: ulp(r)))"
     interval_ulp_dp nil)
    (Proper_Abs application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Mult application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (Add_fundamental formula-decl nil interval interval_arith)
    (Mult_fundamental formula-decl nil interval interval_arith)
    (Abs_fundamental formula-decl nil interval interval_arith)
    (Div_fundamental formula-decl nil interval interval_arith)
    (Ulp_dp_proper formula-decl nil interval_ulp_dp nil)
    (Ulp_dp_fundamental formula-decl nil interval_ulp_dp nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (Add const-decl "Interval" interval interval_arith)
    (Mult const-decl "Interval" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Div const-decl "Interval" interval interval_arith)
    (Ulp_dp const-decl "Interval" interval_ulp_dp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (Precondition4? const-decl "bool" interval interval_arith)
    (Any3? const-decl "bool" interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (pre1to4d const-decl "(Precondition4?)" interval interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (Any_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Any3_Precondition3 name-judgement "(Precondition3?)" interval
     interval_arith)
    (AEB_MUL_inclusion_j name-judgement
     "(Inclusion4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?), aebounddp_mul_safe))"
     bbiadp_mul nil)
    (Fundamental4? const-decl "bool" interval interval_arith))
   nil
   (AEB_MUL_fundmental_j subtype "bbiadp_mul.aebounddp_mul_ia"
    "(interval.Fundamental4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?)))"))
  (AEB_MUL_fundmental_j-3 nil 3684758527
   ("" (expand "Fundamental4?")
    (("" (skeep)
      (("" (typepred "Y2" "Y4")
        (("" (assert)
          (("" (expand "aebounddp_mul_ia")
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (use "Add_fundamental")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (split)
                            (("1" (use "Add_fundamental")
                              (("1"
                                (assert)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (split)
                                    (("1"
                                      (use "Add_fundamental")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (use "Mult_fundamental")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "Mult_fundamental")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (use
                                                           "Abs_fundamental")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (use
                                                     "Abs_fundamental")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "Mult_fundamental")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "Div_fundamental")
                              (("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (split)
                                    (("1"
                                      (use "Ulp_proper")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (use "Ulp_fundamental")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (use "Add_fundamental")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (use
                                                     "Mult_fundamental")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (use
                                                             "Abs_fundamental")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "Abs_fundamental")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "Add_fundamental")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (use
                                                             "Add_fundamental")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (use
                                                                   "Mult_fundamental")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (use
                                                                           "Mult_fundamental")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (use
                                                                                 "Abs_fundamental")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (use
                                                                           "Abs_fundamental")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "Mult_fundamental")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (eval-formula) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (hide 2)
                      (("2" (split)
                        (("1" (hide-all-but (-1 -4 1))
                          (("1" (use "NonNeg_Incl")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (hide-all-but (-2 -6 1))
                          (("2" (use "NonNeg_Incl")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Incl formula-decl nil interval interval_arith)
    (Add_fundamental formula-decl nil interval interval_arith)
    (Ulp const-decl "Interval" interval_ulp nil)
    (Div const-decl "Interval" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Mult const-decl "Interval" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (Div_fundamental formula-decl nil interval interval_arith)
    (Ulp_fundamental formula-decl nil interval_ulp nil)
    (Ulp_proper formula-decl nil interval_ulp nil)
    (Incl_reflx formula-decl nil interval interval_arith)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Abs_fundamental formula-decl nil interval interval_arith)
    (Mult_fundamental formula-decl nil interval interval_arith)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Mult application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Abs application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Precondition? const-decl "bool" interval interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (Precondition4? const-decl "bool" interval interval_arith)
    (pre1to4d const-decl "(Precondition4?)" interval interval_arith)
    (Any3? const-decl "bool" interval interval_arith)
    (Fundamental4? const-decl "bool" interval interval_arith))
   nil
   (AEB_MUL_fundmental_j subtype "bbiadp_mul.aebounddp_mul_ia"
    "(interval.Fundamental4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?)))"))
  (AEB_MUL_fundmental_j-2 nil 3684758500
   ("" (expand "Fundamental")
    (("" (skeep)
      (("" (expand "aebounddp_mul_ia")
        (("" (lift-if)
          (("" (split)
            (("1" (flatten)
              (("1" (use "Add_fundamental")
                (("1" (assert)
                  (("1" (hide 2)
                    (("1" (split)
                      (("1" (use "Add_fundamental")
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (split)
                              (("1"
                                (use "Add_fundamental")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (use "Mult_fundamental")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split)
                                          (("1"
                                            (split)
                                            (("1" (propax) nil)
                                             ("2"
                                              (use "Mult_fundamental")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (use
                                                     "Abs_fundamental")
                                                    (("2"
                                                      (assert)
                                                      nil)))))))))))
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (use "Abs_fundamental")
                                              (("2"
                                                (assert)
                                                nil)))))))))))))))))
                               ("2"
                                (use "Mult_fundamental")
                                (("2" (assert) nil)))))))))))
                       ("2" (use "Div_fundamental")
                        (("2" (assert)
                          (("2" (hide 2)
                            (("2" (split)
                              (("1"
                                (use "Ulp_proper")
                                (("1" (assert) nil)))
                               ("2"
                                (use "Ulp_fundamental")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (use "Add_fundamental")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (split)
                                            (("1"
                                              (use "Mult_fundamental")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (use
                                                       "Abs_fundamental")
                                                      (("1"
                                                        (assert)
                                                        nil)))
                                                     ("2"
                                                      (use
                                                       "Abs_fundamental")
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))
                                             ("2"
                                              (use "Add_fundamental")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (use
                                                       "Add_fundamental")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (use
                                                             "Mult_fundamental")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "Mult_fundamental")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (use
                                                                           "Abs_fundamental")
                                                                          (("2"
                                                                            (assert)
                                                                            nil)))))))))))
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (use
                                                                     "Abs_fundamental")
                                                                    (("2"
                                                                      (assert)
                                                                      nil)))))))))))))))))
                                                     ("2"
                                                      (use
                                                       "Mult_fundamental")
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))))))))))))))))
                               ("3"
                                (eval-formula)
                                nil)))))))))))))))))))
             ("2" (flatten)
              (("2" (hide 2)
                (("2" (split)
                  (("1" (typepred "Y2")
                    (("1" (assert)
                      (("1" (hide-all-but (-1 -3 1))
                        (("1" (use "NonNeg_Incl")
                          (("1" (assert) nil)))))))))
                   ("2" (typepred "Y4")
                    (("2" (assert)
                      (("2" (hide-all-but (-1 -5 1))
                        (("2" (use "NonNeg_Incl")
                          (("2" (assert) nil))))))))))))))))))))))))
    nil)
   nil nil
   (AEB_MUL_fundmental_j subtype "bbiadp_mul.aebounddp_mul_ia"
    "(interval.Fundamental4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?)))"))
  (AEB_MUL_fundmental_j-1 nil 3684758058 ("" (judgement-tcc) nil nil)
   nil nil
   (AEB_MUL_fundmental_j subtype "bbiadp_mul.aebounddp_mul_ia"
    "(interval.Fundamental4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?)))")))
 (AEB_MUL_j 0
  (AEB_MUL_j-1 nil 3684758436 ("" (assert) nil nil)
   ((Any_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Any3_Precondition3 name-judgement "(Precondition3?)" interval
     interval_arith)
    (AEB_MUL_fundmental_j name-judgement
     "(Fundamental4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?)))"
     bbiadp_mul nil)
    (AEB_MUL_inclusion_j name-judgement
     "(Inclusion4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?), aebounddp_mul_safe))"
     bbiadp_mul nil))
   nil
   (AEB_MUL_j subtype "bbiadp_mul.aebounddp_mul_ia"
    "{F: [[interval.Interval, interval.Interval, interval.Interval, interval.Interval] -> interval.Interval] | booleans.AND(interval.Inclusion4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?), bbiadp_mul.aebounddp_mul_safe)(F), interval.Fundamental4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?))(F))}")))
 (AEB_MUL_P2L_inclusion_j 0
  (AEB_MUL_P2L_inclusion_j-1 nil 3718988954
   ("" (expand "Inclusion?")
    (("" (skeep* :preds? t)
      (("" (match "real_pred(%%)" step (hide $1n))
        (("" (assert)
          (("" (expand "aebounddp_mul_p2l_safe" :assert? none)
            (("" (expand "aebounddp_mul_p2l_ia")
              (("" (case "x >= 0")
                (("1" (replace -1)
                  (("1" (expand "aerr_ulp_mul_p2l" :assert? none)
                    (("1" (label "bla" 1)
                      (("1" (lemma "Mult_inclusion")
                        (("1"
                          (instantiate -1
                           ("[|2 ^ n|]" "X" "2 ^ n" "x"))
                          (("1" (split -1)
                            (("1" (propax) nil nil)
                             ("2" (hide "bla")
                              (("2"
                                (label "bla" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (unlabel "bla")
                                    (("2"
                                      (expand "##")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (aebounddp_mul_p2l_ia const-decl "Interval" bbiadp_mul nil)
    (Ge const-decl "bool" interval interval_arith)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (posint_exp application-judgement "posint" exponentiation nil)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ub_r2i formula-decl nil interval interval_arith)
    (lb_r2i formula-decl nil interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Mult_inclusion formula-decl nil interval interval_arith)
    (aerr_ulp_mul_p2l const-decl "nonneg_real" aerr_ulp_mul axm_bnd)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (aebounddp_mul_p2l_safe const-decl "real" bbiadp_mul nil)
    (Inclusion? const-decl "bool" interval interval_arith))
   nil
   (AEB_MUL_P2L_inclusion_j subtype
    "bbiadp_mul.aebounddp_mul_p2l_ia(bbiadp_mul.n)"
    "(interval.Inclusion?(interval.NonNeg?, bbiadp_mul.aebounddp_mul_p2l_safe(bbiadp_mul.n)))")))
 (AEB_MUL_P2L_j 0
  (AEB_MUL_P2L_j-1 nil 3718989436
   ("" (skeep)
    (("" (split 1)
      (("1" (assert) nil nil)
       ("2" (expand "Fundamental?")
        (("2" (skeep)
          (("2" (expand "aebounddp_mul_p2l_ia")
            (("2" (lift-if 1)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (use "Mult_fundamental")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (typepred "X")
                    (("2" (hide 2)
                      (("2" (use "NonNeg_Incl")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (AEB_MUL_P2L_inclusion_j application-judgement
     "(Inclusion?(NonNeg?, aebounddp_mul_p2l_safe(n)))" bbiadp_mul nil)
    (NonNeg_Incl formula-decl nil interval interval_arith)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Incl_reflx formula-decl nil interval interval_arith)
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     interval_arith)
    (posint_exp application-judgement "posint" exponentiation nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (Proper_Mult application-judgement "ProperInterval" interval
     interval_arith)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Mult_fundamental formula-decl nil interval interval_arith)
    (aebounddp_mul_p2l_ia const-decl "Interval" bbiadp_mul nil)
    (Fundamental? const-decl "bool" interval interval_arith))
   nil
   (AEB_MUL_P2L_j subtype
    "bbiadp_mul.aebounddp_mul_p2l_ia(bbiadp_mul.n)"
    "{F: [interval.Interval -> interval.Interval] | booleans.AND(interval.Inclusion?(interval.NonNeg?, bbiadp_mul.aebounddp_mul_p2l_safe(bbiadp_mul.n))(F), interval.Fundamental?(interval.NonNeg?)(F))}")))
 (AEB_MUL_P2R_inclusion_j 0
  (AEB_MUL_P2R_inclusion_j-1 nil 3718989876
   ("" (prove-inclusion-judgement) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (aebounddp_mul_p2r_ia const-decl "Interval" bbiadp_mul nil)
    (Ge const-decl "bool" interval interval_arith)
    (Mult_inclusion formula-decl nil interval interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ub_r2i formula-decl nil interval interval_arith)
    (lb_r2i formula-decl nil interval interval_arith)
    (aerr_ulp_mul_p2r const-decl "nonneg_real" aerr_ulp_mul axm_bnd)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (aebounddp_mul_p2r_safe const-decl "real" bbiadp_mul nil)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Inclusion? const-decl "bool" interval interval_arith))
   nil
   (AEB_MUL_P2R_inclusion_j subtype
    "bbiadp_mul.aebounddp_mul_p2r_ia(bbiadp_mul.n)"
    "(interval.Inclusion?(interval.NonNeg?, bbiadp_mul.aebounddp_mul_p2r_safe(bbiadp_mul.n)))")))
 (AEB_MUL_P2R_j 0
  (AEB_MUL_P2R_j-1 nil 3718989876
   ("" (skeep)
    (("" (split 1)
      (("1" (assert) nil nil)
       ("2" (expand "Fundamental?")
        (("2" (skeep)
          (("2" (expand "aebounddp_mul_p2r_ia")
            (("2" (lift-if 1)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (use "Mult_fundamental")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (typepred "X")
                    (("2" (hide 2)
                      (("2" (use "NonNeg_Incl")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (AEB_MUL_P2R_inclusion_j application-judgement
     "(Inclusion?(NonNeg?, aebounddp_mul_p2r_safe(n)))" bbiadp_mul nil)
    (NonNeg_Incl formula-decl nil interval interval_arith)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Incl_reflx formula-decl nil interval interval_arith)
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     interval_arith)
    (posint_exp application-judgement "posint" exponentiation nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (Proper_Mult application-judgement "ProperInterval" interval
     interval_arith)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Mult_fundamental formula-decl nil interval interval_arith)
    (aebounddp_mul_p2r_ia const-decl "Interval" bbiadp_mul nil)
    (Fundamental? const-decl "bool" interval interval_arith))
   nil
   (AEB_MUL_P2R_j subtype
    "bbiadp_mul.aebounddp_mul_p2r_ia(bbiadp_mul.n)"
    "{F: [interval.Interval -> interval.Interval] | booleans.AND(interval.Inclusion?(interval.NonNeg?, bbiadp_mul.aebounddp_mul_p2r_safe(bbiadp_mul.n))(F), interval.Fundamental?(interval.NonNeg?)(F))}"))))

