(bbiasp_cos
 (AEB_COS_inclusion_j 0
  (AEB_COS_inclusion_j-1 nil 3699866912
   ("" (expand "Inclusion2?")
    (("" (skeep*)
      (("" (expand "aeboundsp_cos_ia")
        (("" (expand "aeboundsp_cos_safe")
          (("" (lift-if)
            (("" (split)
              (("1" (flatten)
                (("1" (lift-if 1)
                  (("1" (split 1)
                    (("1" (flatten)
                      (("1" (expand "aerr_ulp_cos")
                        (("1" (use "Add_inclusion")
                          (("1" (split -1)
                            (("1" (propax) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (expand "cos_aerr_bound")
                                (("2"
                                  (lemma "Min_inclusion")
                                  (("2"
                                    (case "min(2,x2)=min(x2,2)")
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (eval-formula)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2)
                              (("3"
                                (use "Div_inclusion")
                                (("3"
                                  (assert)
                                  (("3"
                                    (hide 2 3)
                                    (("3"
                                      (split)
                                      (("1"
                                        (lemma "Ulp_sp_inclusion")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (expand
                                                 "cos_ulp_bound")
                                                (("1"
                                                  (use "Add_inclusion")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (use
                                                           "Abs_inclusion")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (use
                                                                 "Cos_inclusion")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "min(2,x2)=min(x2,2)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (use
                                                               "Min_inclusion")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (eval-formula
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "min")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (eval-formula 1) nil nil)
                                       ("3" (eval-formula 1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (typepred "X2")
                        (("2" (expand "pre1to2b")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (typepred "X2")
                  (("2" (hide 2)
                    (("2" (expand "pre1to2b")
                      (("2" (expand "NonNeg?")
                        (("2" (expand "Ge")
                          (("2" (expand "##")
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (aeboundsp_cos_safe const-decl "real" bbiasp_cos nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Add_inclusion formula-decl nil interval "interval_arith/")
    (cos_ulp_bound const-decl "real" accum_err_cos "float/")
    (ulp_sp const-decl "nonneg_real" ieee754sp "float/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos_aerr_bound const-decl "nonneg_real" accum_err_cos "float/")
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}"
     ieee754sp "float/")
    (closest_single? const-decl "bool" ieee754sp "float/")
    (unb_single type-eq-decl nil ieee754sp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (sp_closest? const-decl "bool" ieee754sp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (single_precision_format const-decl "Format" ieee754sp "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Cos const-decl "Interval" interval_trig "interval_arith/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Abs const-decl "(NonNeg?)" interval "interval_arith/")
    (Add const-decl "Interval" interval "interval_arith/")
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil)
    (Div const-decl "Interval" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Any? const-decl "bool" interval "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (pre1to2b const-decl "(Precondition2?)" interval "interval_arith/")
    (Precondition2? const-decl "bool" interval "interval_arith/")
    (Precondition? const-decl "bool" interval "interval_arith/")
    (PRED type-eq-decl nil defined_types nil)
    (Min const-decl "Interval" interval "interval_arith/")
    (Interval type-eq-decl nil interval "interval_arith/")
    (x2 skolem-const-decl "real" bbiasp_cos nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sp_closest?_closestroundingpred_j name-judgement
     "ClosestRoundingPred[2](single_precision_format)" ieee754sp
     "float/")
    (sp_closest?_j name-judgement
     "{round: RestrictedRounding[2](single_precision_format, EvenClosest?) |
         rounded_mode?(single_precision_format)(round)}" ieee754sp
     "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(single_precision_format, sp_closest?) |
         exact_rep_conservation[2]
             (single_precision_format, sp_closest?)(RtoF)}" ieee754sp
     "float/")
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Ulp_sp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_sp nil)
    (Ulp_sp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp_sp))"
     interval_ulp_sp nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (cos const-decl "real" sincos_def "trig/")
    (Abs_inclusion formula-decl nil interval "interval_arith/")
    (Cos_inclusion formula-decl nil interval_trig "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos "trig/")
    (Ulp_sp_inclusion formula-decl nil interval_ulp_sp nil)
    (Div_inclusion formula-decl nil interval "interval_arith/")
    (Min_inclusion formula-decl nil interval "interval_arith/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (aeboundsp_cos const-decl "nonneg_real" aerr754sp_cos "float/")
    (Ge const-decl "bool" interval "interval_arith/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (|##| const-decl "bool" interval "interval_arith/")
    (aeboundsp_cos_ia const-decl "Interval" bbiasp_cos nil)
    (Inclusion2? const-decl "bool" interval "interval_arith/"))
   nil))
 (AEB_COS_fundmental_j 0
  (AEB_COS_fundmental_j-1 nil 3699866912
   ("" (skeep)
    (("" (expand "Fundamental2?")
      (("" (skeep)
        (("" (expand "aeboundsp_cos_ia")
          (("" (lift-if 1)
            (("" (split 1)
              (("1" (flatten)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (use "Add_fundamental")
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (split 1)
                              (("1"
                                (use "Min_fundamental")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (use "Div_fundamental")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (use "Ulp_sp_proper")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (use "Ulp_sp_fundamental")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (use "Add_fundamental")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (use
                                                       "Abs_fundamental")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (use
                                                           "Cos_fundamental")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (use
                                                       "Min_fundamental")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (eval-formula 1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (hide 2)
                        (("2" (typepred "Y")
                          (("2" (expand "pre1to2b")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (hide 2)
                  (("2" (typepred "Y")
                    (("2" (expand "pre1to2b")
                      (("2" (expand "NonNeg?")
                        (("2" (expand "Ge")
                          (("2" (expand "<<")
                            (("2" (flatten)
                              (("2"
                                (typepred "Y1")
                                (("2"
                                  (expand "Proper?")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Fundamental2? const-decl "bool" interval "interval_arith/")
    (aeboundsp_cos_ia const-decl "Interval" bbiasp_cos nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Proper_Cos application-judgement "ProperInterval" interval_trig
     "interval_arith/")
    (Proper_Abs application-judgement "ProperInterval" interval
     "interval_arith/")
    (Proper_Add application-judgement "ProperInterval" interval
     "interval_arith/")
    (Ulp_sp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_sp nil)
    (Ulp_sp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp_sp))"
     interval_ulp_sp nil)
    (r2i_Pos application-judgement "(Pos?)" interval "interval_arith/")
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     "interval_arith/")
    (Proper_Min application-judgement "ProperInterval" interval
     "interval_arith/")
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Incl_reflx formula-decl nil interval "interval_arith/")
    (Min_fundamental formula-decl nil interval "interval_arith/")
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Ulp_sp_proper formula-decl nil interval_ulp_sp nil)
    (Abs_fundamental formula-decl nil interval "interval_arith/")
    (Cos_fundamental formula-decl nil interval_trig "interval_arith/")
    (Ulp_sp_fundamental formula-decl nil interval_ulp_sp nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (Div_fundamental formula-decl nil interval "interval_arith/")
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (Min const-decl "Interval" interval "interval_arith/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval "interval_arith/")
    (Precondition2? const-decl "bool" interval "interval_arith/")
    (pre1to2b const-decl "(Precondition2?)" interval "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (Any? const-decl "bool" interval "interval_arith/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (Proper? const-decl "bool" interval "interval_arith/")
    (ProperInterval type-eq-decl nil interval "interval_arith/")
    (Div const-decl "Interval" interval "interval_arith/")
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil)
    (Add const-decl "Interval" interval "interval_arith/")
    (Abs const-decl "(NonNeg?)" interval "interval_arith/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Cos const-decl "Interval" interval_trig "interval_arith/")
    (Add_fundamental formula-decl nil interval "interval_arith/")
    (Ge const-decl "bool" interval "interval_arith/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< const-decl "bool" interval "interval_arith/"))
   nil))
 (AEB_COS_TCC1 0
  (AEB_COS_TCC1-1 nil 3699866912 ("" (subtype-tcc) nil nil)
   ((AEB_COS_fundmental_j application-judgement
     "(Fundamental2?(Any?, pre1to2b(NonNeg?)))" bbiasp_cos nil)
    (AEB_COS_inclusion_j application-judgement
     "(Inclusion2?(Any?, pre1to2b(NonNeg?), aeboundsp_cos_safe))"
     bbiasp_cos nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)))

