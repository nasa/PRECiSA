(interval_ulp_dp
 (IMP_interval_ulp_TCC1 0
  (IMP_interval_ulp_TCC1-1 nil 3909209915 ("" (assuming-tcc) nil nil)
   nil nil
   (IMP_interval_ulp assuming
    "interval_ulp[ieee754_double_base.double, ieee754_semantics[2, 53, 1023].safe_proj, LAMBDA (r: reals.real): ieee754_semantics[2, 53, 1023].round(r), ieee754_domain[2, 53, 1023].min_ulp, LAMBDA (r: reals.real) -> nonneg_real: ieee754_domain[2, 53, 1023].ulp(r)].interval_ulp"
    "ulp_abs: ASSUMPTION interval_ulp.ulp(real_defs.abs(interval_ulp.r1)) = interval_ulp.ulp(interval_ulp.r1)")))
 (IMP_interval_ulp_TCC2 0
  (IMP_interval_ulp_TCC2-1 nil 3909209915
   ("" (use "ulp_monotone") nil nil)
   ((ulp_monotone formula-decl nil ieee754_domain axm_bnd)) nil
   (IMP_interval_ulp assuming
    "interval_ulp[ieee754_double_base.double, ieee754_semantics[2, 53, 1023].safe_proj, LAMBDA (r: reals.real): ieee754_semantics[2, 53, 1023].round(r), ieee754_domain[2, 53, 1023].min_ulp, LAMBDA (r: reals.real) -> nonneg_real: ieee754_domain[2, 53, 1023].ulp(r)].interval_ulp"
    "ulp_monotone: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(0, interval_ulp.r1), reals.<=(interval_ulp.r1, interval_ulp.r2)), reals.<=(interval_ulp.ulp(interval_ulp.r1), interval_ulp.ulp(interval_ulp.r2)))")))
 (IMP_interval_ulp_TCC3 0
  (IMP_interval_ulp_TCC3-1 nil 3909209915 ("" (use "ulp_min") nil nil)
   ((ulp_min formula-decl nil ieee754_domain axm_bnd)) nil
   (IMP_interval_ulp assuming
    "interval_ulp[ieee754_double_base.double, ieee754_semantics[2, 53, 1023].safe_proj, LAMBDA (r: reals.real): ieee754_semantics[2, 53, 1023].round(r), ieee754_domain[2, 53, 1023].min_ulp, LAMBDA (r: reals.real) -> nonneg_real: ieee754_domain[2, 53, 1023].ulp(r)].interval_ulp"
    "ulp_min: ASSUMPTION reals.<=(interval_ulp.min_ulp, interval_ulp.ulp(interval_ulp.r1))")))
 (Ulp_dp_proper 0
  (Ulp_dp_proper-1 nil 3699285101
   ("" (expand "Ulp_dp") (("" (use "Ulp_proper") nil nil)) nil)
   (nil (Ulp_proper formula-decl nil interval_ulp nil)
    (int nonempty-type-eq-decl nil integers nil) nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil) nil
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil) nil nil nil nil
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil) nil nil
    (Ulp_dp const-decl "Interval" interval_ulp_dp nil))
   shostak))
 (Ulp_dp_inclusion 0
  (Ulp_dp_inclusion-1 nil 3699285121
   ("" (expand "Ulp_dp") (("" (use "Ulp_inclusion") nil nil)) nil)
   (nil (Ulp_inclusion formula-decl nil interval_ulp nil)
    (int nonempty-type-eq-decl nil integers nil) nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil) nil
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil) nil nil nil nil
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil) nil nil
    (Ulp_dp const-decl "Interval" interval_ulp_dp nil))
   shostak))
 (Ulp_dp_Inclusion 0
  (Ulp_dp_Inclusion-1 nil 3699042916
   ("" (expand "Inclusion?")
    (("" (skeep)
      (("" (use "Ulp_inclusion")
        (("" (assert)
          (("" (expand "Ulp_dp") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((Ulp_dp const-decl "Interval" interval_ulp_dp nil)
    (PreTrue const-decl "(Precondition?)" interval_expr interval_arith)
    (Precondition? const-decl "bool" interval interval_arith)
    (PRED type-eq-decl nil defined_types nil)
    (Interval type-eq-decl nil interval interval_arith) nil nil
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) nil nil nil nil
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil
    (int nonempty-type-eq-decl nil integers nil)
    (Ulp_inclusion formula-decl nil interval_ulp nil) nil
    (Inclusion? const-decl "bool" interval interval_arith))
   nil
   (Ulp_dp_Inclusion subtype "interval_ulp_dp.Ulp_dp"
    "(interval.Inclusion?(interval_expr.PreTrue, LAMBDA (r: reals.real) -> nonneg_real: ieee754_domain[2, 53, 1023].ulp(r)))")))
 (Ulp_dp_fundamental 0
  (Ulp_dp_fundamental-1 nil 3699285138
   ("" (expand "Ulp_dp") (("" (use "Ulp_fundamental") nil nil)) nil)
   (nil (Ulp_fundamental formula-decl nil interval_ulp nil)
    (int nonempty-type-eq-decl nil integers nil) nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil) nil
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil) nil nil nil nil
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil) nil nil
    (Ulp_dp const-decl "Interval" interval_ulp_dp nil))
   shostak))
 (Ulp_dp_Fundamental 0
  (Ulp_dp_Fundamental-1 nil 3699042916
   ("" (expand "Fundamental?")
    (("" (skeep)
      (("" (expand "Ulp_dp")
        (("" (use "Ulp_fundamental") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   (nil (Ulp_fundamental formula-decl nil interval_ulp nil)
    (int nonempty-type-eq-decl nil integers nil) nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil) nil
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil) nil nil nil nil
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil) nil nil
    (Interval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval interval_arith)
    (PreTrue const-decl "(Precondition?)" interval_expr interval_arith)
    (Ulp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp))"
     interval_ulp nil)
    (Ulp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp nil)
    (Ulp_dp const-decl "Interval" interval_ulp_dp nil)
    (Fundamental? const-decl "bool" interval interval_arith))
   nil
   (Ulp_dp_Fundamental subtype "interval_ulp_dp.Ulp_dp"
    "(interval.Fundamental?(interval_expr.PreTrue))")))
 (ULP_DP_TCC1 0
  (ULP_DP_TCC1-1 nil 3699041021
   ("" (skeep)
    (("" (split 1)
      (("1" (expand "Inclusion?")
        (("1" (skeep)
          (("1" (use "Ulp_inclusion")
            (("1" (assert)
              (("1" (expand "Ulp_dp") (("1" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "Fundamental?")
        (("2" (skeep)
          (("2" (use "Ulp_fundamental")
            (("2" (expand "Ulp_dp") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Ulp_dp_Inclusion name-judgement
     "(Inclusion?(PreTrue, LAMBDA (r: real) -> nonneg_real: ulp(r)))"
     interval_ulp_dp nil)
    (Ulp_dp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_dp nil)
    (Ulp_dp const-decl "Interval" interval_ulp_dp nil)
    (PreTrue const-decl "(Precondition?)" interval_expr interval_arith)
    (Precondition? const-decl "bool" interval interval_arith)
    (PRED type-eq-decl nil defined_types nil)
    (Interval type-eq-decl nil interval interval_arith) nil nil
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) nil nil nil nil
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil
    (int nonempty-type-eq-decl nil integers nil)
    (Ulp_inclusion formula-decl nil interval_ulp nil) nil
    (Inclusion? const-decl "bool" interval interval_arith)
    (Ulp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp))"
     interval_ulp nil)
    (Ulp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp nil)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (Ulp_fundamental formula-decl nil interval_ulp nil)
    (Fundamental? const-decl "bool" interval interval_arith))
   nil
   (ULP_DP subtype "interval_ulp_dp.Ulp_dp"
    "{F: [interval.Interval -> interval.Interval] | booleans.AND(interval.Inclusion?(interval_expr.PreTrue, LAMBDA (r: reals.real) -> nonneg_real: ieee754_domain[2, 53, 1023].ulp(r))(F), interval.Fundamental?(interval_expr.PreTrue)(F))}"))))

