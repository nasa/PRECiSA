(bbiasp_mul
 (AEB_MUL_inclusion_j 0
  (AEB_MUL_inclusion_j-3 "" 3909227783
   ("" (prove-inclusion-judgement)
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((Ge const-decl "bool" interval interval_arith)
    (aerr_ulp_mul const-decl "nnreal" aerr_ulp_mul axm_bnd)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (lb_r2i formula-decl nil interval interval_arith)
    (ub_r2i formula-decl nil interval interval_arith)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (Ulp_sp_inclusion formula-decl nil interval_ulp_sp nil)
    (Div_inclusion formula-decl nil interval interval_arith)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Abs_inclusion formula-decl nil interval interval_arith)
    (Mult_inclusion formula-decl nil interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (Mult const-decl "Interval" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval interval_arith)
    (Precondition4? const-decl "bool" interval interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith)
    (Any3? const-decl "bool" interval interval_arith)
    (Div const-decl "Interval" interval interval_arith)
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ulp const-decl "posreal" ieee754_domain axm_bnd)
    (Add_inclusion formula-decl nil interval interval_arith)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (aeboundsp_mul_ia const-decl "Interval" bbiasp_mul nil)
    (aeboundsp_mul_safe const-decl "real" bbiasp_mul nil)
    (Any3_Precondition3 name-judgement "(Precondition3?)" interval
     interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Any_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (pre1to4d const-decl "(Precondition4?)" interval interval_arith)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Inclusion4? const-decl "bool" interval interval_arith))
   shostak
   (AEB_MUL_inclusion_j subtype "bbiasp_mul.aeboundsp_mul_ia"
    "(interval.Inclusion4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?), bbiasp_mul.aeboundsp_mul_safe))"))
  (AEB_MUL_inclusion_j-2 nil 3909220318
   ("" (expand "Inclusion4?")
    (("" (skeep)
      (("" (expand "aeboundsp_mul_safe")
        (("" (expand "aeboundsp_mul_ia")
          (("" (lift-if)
            (("" (split)
              (("1" (flatten)
                (("1" (hide 1)
                  (("1" (split -1)
                    (("1" (typepred "X2") (("1" (grind) nil)))
                     ("2" (typepred "X4") (("2" (grind) nil)))))))))
               ("2" (flatten)
                (("2" (lift-if 3)
                  (("2" (split 3)
                    (("1" (flatten)
                      (("1" (expand "aerr_ulp_mul")
                        (("1" (use "Add_inclusion")
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (split)
                                (("1"
                                  (expand "mul_aerr_bound")
                                  (("1"
                                    (use "Add_inclusion")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (split)
                                          (("1"
                                            (use "Add_inclusion")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (use
                                                     "Mult_inclusion")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (use
                                                           "Abs_inclusion")
                                                          (("1"
                                                            (assert)
                                                            nil)))))))))
                                                   ("2"
                                                    (use
                                                     "Mult_inclusion")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (use
                                                           "Abs_inclusion")
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))))))))
                                           ("2"
                                            (use "Mult_inclusion")
                                            (("2"
                                              (assert)
                                              nil)))))))))))))
                                 ("2"
                                  (use "Div_inclusion")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (split)
                                        (("1"
                                          (lemma "Ulp_sp_inclusion")
                                          (("1"
                                            (inst? -1 :where 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (expand
                                                   "mul_ulp_bound")
                                                  (("1"
                                                    (lemma
                                                     "Add_inclusion")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "Mult(Abs(X1), Abs(X3))"
                                                       "Add(Add(Mult(Abs(X1), X4), Mult(Abs(X3), X2)), Mult(X2, X4))"
                                                       "abs(x1) * abs(x3)"
                                                       "abs(x1) * x4 + x2 * abs(x3) + x2 * x4")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (use
                                                               "Mult_inclusion")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (use
                                                                       "Abs_inclusion")
                                                                      (("1"
                                                                        (assert)
                                                                        nil)))
                                                                     ("2"
                                                                      (use
                                                                       "Abs_inclusion")
                                                                      (("2"
                                                                        (assert)
                                                                        nil)))))))))))
                                                             ("2"
                                                              (lemma
                                                               "Add_inclusion")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "Add(Mult(Abs(X1), X4), Mult(Abs(X3), X2))"
                                                                 " Mult(X2, X4)"
                                                                 "abs(x1) * x4 + x2 * abs(x3)"
                                                                 "x2 * x4")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (use
                                                                         "Add_inclusion")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             2)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (use
                                                                                 "Mult_inclusion")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (use
                                                                                       "Abs_inclusion")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))))))
                                                                               ("2"
                                                                                (use
                                                                                 "Mult_inclusion")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "Mult_inclusion")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "Abs(X3)"
                                                                                     "X2"
                                                                                     "abs(x3)"
                                                                                     "x2")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (hide
                                                                                           3)
                                                                                          (("2"
                                                                                            (use
                                                                                             "Abs_inclusion")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil)))))))))))))))))))))))
                                                                       ("2"
                                                                        (use
                                                                         "Mult_inclusion")
                                                                        (("2"
                                                                          (assert)
                                                                          nil)))))))))))))))))))))))))))))))))
                                         ("2" (eval-formula) nil)
                                         ("3"
                                          (eval-formula)
                                          nil)))))))))))))))
                           ("2" (assert) nil) ("3" (assert) nil)))))))
                     ("2" (flatten)
                      (("2" (typepred "X2")
                        (("2" (expand "pre1to2b")
                          (("2" (typepred "X4")
                            (("2" (assert)
                              nil))))))))))))))))))))))))))
    nil)
   ((aeboundsp_mul_ia const-decl "Interval" bbiasp_mul nil)
    (Any3? const-decl "bool" interval interval_arith)
    (pre1to4d const-decl "(Precondition4?)" interval interval_arith)
    (Precondition4? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith)
    (Precondition? const-decl "bool" interval interval_arith)
    (PRED type-eq-decl nil defined_types nil)
    (Interval type-eq-decl nil interval interval_arith)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (|##| const-decl "bool" interval interval_arith)
    (Ge const-decl "bool" interval interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Add const-decl "Interval" interval interval_arith)
    (Mult const-decl "Interval" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Div const-decl "Interval" interval interval_arith)
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ulp const-decl "posreal" ieee754_domain axm_bnd)
    (Add_inclusion formula-decl nil interval interval_arith)
    (Abs_inclusion formula-decl nil interval interval_arith)
    (Mult_inclusion formula-decl nil interval interval_arith)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Ulp_sp_inclusion formula-decl nil interval_ulp_sp nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (Div_inclusion formula-decl nil interval interval_arith)
    (aerr_ulp_mul const-decl "nnreal" aerr_ulp_mul axm_bnd)
    (aeboundsp_mul_safe const-decl "real" bbiasp_mul nil)
    (Inclusion4? const-decl "bool" interval interval_arith))
   nil
   (AEB_MUL_inclusion_j subtype "bbiasp_mul.aeboundsp_mul_ia"
    "(interval.Inclusion4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?), bbiasp_mul.aeboundsp_mul_safe))"))
  (AEB_MUL_inclusion_j-1 nil 3909220236 ("" (judgement-tcc) nil nil)
   nil nil
   (AEB_MUL_inclusion_j subtype "bbiasp_mul.aeboundsp_mul_ia"
    "(interval.Inclusion4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?), bbiasp_mul.aeboundsp_mul_safe))")))
 (AEB_MUL_fundmental_j 0
  (AEB_MUL_fundmental_j-5 "" 3909241162
   ("" (prove-fundamental-judgement) nil)
   ((aeboundsp_mul_ia const-decl "Interval" bbiasp_mul nil)
    (<< const-decl "bool" interval interval_arith)
    (Ge const-decl "bool" interval interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     interval_arith)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (Ulp_sp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_sp nil)
    (Ulp_sp_Inclusion name-judgement
     "(Inclusion?(PreTrue, LAMBDA (r: real) -> nonneg_real: ulp(r)))"
     interval_ulp_sp nil)
    (Proper_Abs application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Mult application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (Add_fundamental formula-decl nil interval interval_arith)
    (Mult_fundamental formula-decl nil interval interval_arith)
    (Abs_fundamental formula-decl nil interval interval_arith)
    (Div_fundamental formula-decl nil interval interval_arith)
    (Ulp_sp_proper formula-decl nil interval_ulp_sp nil)
    (Ulp_sp_fundamental formula-decl nil interval_ulp_sp nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (Add const-decl "Interval" interval interval_arith)
    (Mult const-decl "Interval" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Div const-decl "Interval" interval interval_arith)
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (Precondition4? const-decl "bool" interval interval_arith)
    (Any3? const-decl "bool" interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (pre1to4d const-decl "(Precondition4?)" interval interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (Any_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Any3_Precondition3 name-judgement "(Precondition3?)" interval
     interval_arith)
    (AEB_MUL_inclusion_j name-judgement
     "(Inclusion4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?), aeboundsp_mul_safe))"
     bbiasp_mul nil)
    (Fundamental4? const-decl "bool" interval interval_arith))
   shostak
   (AEB_MUL_fundmental_j subtype "bbiasp_mul.aeboundsp_mul_ia"
    "(interval.Fundamental4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?)))"))
  (AEB_MUL_fundmental_j-4 nil 3699283521
   ("" (expand "Fundamental4?")
    (("" (skeep)
      (("" (typepred "Y2" "Y4")
        (("" (assert)
          (("" (expand "aeboundsp_mul_ia")
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (use "Add_fundamental")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (split)
                            (("1" (use "Add_fundamental")
                              (("1"
                                (assert)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (split)
                                    (("1"
                                      (use "Add_fundamental")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (use "Mult_fundamental")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "Mult_fundamental")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (use
                                                           "Abs_fundamental")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (use
                                                     "Abs_fundamental")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "Mult_fundamental")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "Div_fundamental")
                              (("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (split)
                                    (("1"
                                      (use "Ulp_sp_proper")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (use "Ulp_sp_fundamental")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (use "Add_fundamental")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (use
                                                     "Mult_fundamental")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (use
                                                             "Abs_fundamental")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "Abs_fundamental")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "Add_fundamental")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (use
                                                             "Add_fundamental")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (use
                                                                   "Mult_fundamental")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (use
                                                                           "Mult_fundamental")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (use
                                                                                 "Abs_fundamental")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (use
                                                                           "Abs_fundamental")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "Mult_fundamental")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (eval-formula) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (hide 2)
                      (("2" (split)
                        (("1" (hide-all-but (-1 -4 1))
                          (("1" (use "NonNeg_Incl")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (hide-all-but (-2 -6 1))
                          (("2" (use "NonNeg_Incl")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AEB_MUL_inclusion_j name-judgement
     "(Inclusion4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?), aeboundsp_mul_safe))"
     bbiasp_mul nil)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Incl formula-decl nil interval interval_arith)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (Any_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Any3_Precondition3 name-judgement "(Precondition3?)" interval
     interval_arith)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (Ge const-decl "bool" interval interval_arith)
    (<< const-decl "bool" interval interval_arith)
    (Add_fundamental formula-decl nil interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (Mult const-decl "Interval" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Div const-decl "Interval" interval interval_arith)
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil) nil
    (Div_fundamental formula-decl nil interval interval_arith)
    (Ulp_sp_proper formula-decl nil interval_ulp_sp nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (Incl_reflx formula-decl nil interval interval_arith)
    (Ulp_sp_fundamental formula-decl nil interval_ulp_sp nil)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Abs_fundamental formula-decl nil interval interval_arith)
    (Mult_fundamental formula-decl nil interval interval_arith)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Mult application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Abs application-judgement "ProperInterval" interval
     interval_arith)
    (Ulp_sp_Inclusion name-judgement
     "(Inclusion?(PreTrue, LAMBDA (r: real) -> nonneg_real: ulp(r)))"
     interval_ulp_sp nil)
    (Ulp_sp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_sp nil)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     interval_arith)
    (aeboundsp_mul_ia const-decl "Interval" bbiasp_mul nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (Precondition4? const-decl "bool" interval interval_arith)
    (pre1to4d const-decl "(Precondition4?)" interval interval_arith)
    (Any3? const-decl "bool" interval interval_arith)
    (Fundamental4? const-decl "bool" interval interval_arith))
   nil
   (AEB_MUL_fundmental_j subtype "bbiasp_mul.aeboundsp_mul_ia"
    "(interval.Fundamental4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?)))"))
  (AEB_MUL_fundmental_j-3 nil 3684758527
   ("" (expand "Fundamental4?")
    (("" (skeep)
      (("" (typepred "Y2" "Y4")
        (("" (assert)
          (("" (expand "aeboundsp_mul_ia")
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (use "Add_fundamental")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (split)
                            (("1" (use "Add_fundamental")
                              (("1"
                                (assert)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (split)
                                    (("1"
                                      (use "Add_fundamental")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (use "Mult_fundamental")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "Mult_fundamental")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (use
                                                           "Abs_fundamental")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (use
                                                     "Abs_fundamental")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "Mult_fundamental")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "Div_fundamental")
                              (("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (split)
                                    (("1"
                                      (use "Ulp_proper")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (use "Ulp_fundamental")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (use "Add_fundamental")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (use
                                                     "Mult_fundamental")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (use
                                                             "Abs_fundamental")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "Abs_fundamental")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "Add_fundamental")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (use
                                                             "Add_fundamental")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (use
                                                                   "Mult_fundamental")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (use
                                                                           "Mult_fundamental")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (use
                                                                                 "Abs_fundamental")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (use
                                                                           "Abs_fundamental")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "Mult_fundamental")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (eval-formula) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (hide 2)
                      (("2" (split)
                        (("1" (hide-all-but (-1 -4 1))
                          (("1" (use "NonNeg_Incl")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (hide-all-but (-2 -6 1))
                          (("2" (use "NonNeg_Incl")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Incl formula-decl nil interval interval_arith)
    (Add_fundamental formula-decl nil interval interval_arith)
    (Ulp const-decl "Interval" interval_ulp nil)
    (Div const-decl "Interval" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Mult const-decl "Interval" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (Div_fundamental formula-decl nil interval interval_arith)
    (Ulp_fundamental formula-decl nil interval_ulp nil)
    (Ulp_proper formula-decl nil interval_ulp nil)
    (Incl_reflx formula-decl nil interval interval_arith)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Abs_fundamental formula-decl nil interval interval_arith)
    (Mult_fundamental formula-decl nil interval interval_arith)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Mult application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Abs application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Precondition? const-decl "bool" interval interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (Precondition4? const-decl "bool" interval interval_arith)
    (pre1to4d const-decl "(Precondition4?)" interval interval_arith)
    (Any3? const-decl "bool" interval interval_arith)
    (Fundamental4? const-decl "bool" interval interval_arith))
   nil
   (AEB_MUL_fundmental_j subtype "bbiasp_mul.aeboundsp_mul_ia"
    "(interval.Fundamental4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?)))"))
  (AEB_MUL_fundmental_j-2 nil 3684758500
   ("" (expand "Fundamental")
    (("" (skeep)
      (("" (expand "aeboundsp_mul_ia")
        (("" (lift-if)
          (("" (split)
            (("1" (flatten)
              (("1" (use "Add_fundamental")
                (("1" (assert)
                  (("1" (hide 2)
                    (("1" (split)
                      (("1" (use "Add_fundamental")
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (split)
                              (("1"
                                (use "Add_fundamental")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (use "Mult_fundamental")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split)
                                          (("1"
                                            (split)
                                            (("1" (propax) nil)
                                             ("2"
                                              (use "Mult_fundamental")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (use
                                                     "Abs_fundamental")
                                                    (("2"
                                                      (assert)
                                                      nil)))))))))))
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (use "Abs_fundamental")
                                              (("2"
                                                (assert)
                                                nil)))))))))))))))))
                               ("2"
                                (use "Mult_fundamental")
                                (("2" (assert) nil)))))))))))
                       ("2" (use "Div_fundamental")
                        (("2" (assert)
                          (("2" (hide 2)
                            (("2" (split)
                              (("1"
                                (use "Ulp_proper")
                                (("1" (assert) nil)))
                               ("2"
                                (use "Ulp_fundamental")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (use "Add_fundamental")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (split)
                                            (("1"
                                              (use "Mult_fundamental")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (use
                                                       "Abs_fundamental")
                                                      (("1"
                                                        (assert)
                                                        nil)))
                                                     ("2"
                                                      (use
                                                       "Abs_fundamental")
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))
                                             ("2"
                                              (use "Add_fundamental")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (use
                                                       "Add_fundamental")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (use
                                                             "Mult_fundamental")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil)
                                                                   ("2"
                                                                    (use
                                                                     "Mult_fundamental")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (use
                                                                           "Abs_fundamental")
                                                                          (("2"
                                                                            (assert)
                                                                            nil)))))))))))
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (use
                                                                     "Abs_fundamental")
                                                                    (("2"
                                                                      (assert)
                                                                      nil)))))))))))))))))
                                                     ("2"
                                                      (use
                                                       "Mult_fundamental")
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))))))))))))))))
                               ("3"
                                (eval-formula)
                                nil)))))))))))))))))))
             ("2" (flatten)
              (("2" (hide 2)
                (("2" (split)
                  (("1" (typepred "Y2")
                    (("1" (assert)
                      (("1" (hide-all-but (-1 -3 1))
                        (("1" (use "NonNeg_Incl")
                          (("1" (assert) nil)))))))))
                   ("2" (typepred "Y4")
                    (("2" (assert)
                      (("2" (hide-all-but (-1 -5 1))
                        (("2" (use "NonNeg_Incl")
                          (("2" (assert) nil))))))))))))))))))))))))
    nil)
   nil nil
   (AEB_MUL_fundmental_j subtype "bbiasp_mul.aeboundsp_mul_ia"
    "(interval.Fundamental4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?)))"))
  (AEB_MUL_fundmental_j-1 nil 3684758058 ("" (judgement-tcc) nil nil)
   nil nil
   (AEB_MUL_fundmental_j subtype "bbiasp_mul.aeboundsp_mul_ia"
    "(interval.Fundamental4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?)))")))
 (AEB_MUL_j 0
  (AEB_MUL_j-1 nil 3684758436 ("" (assert) nil nil)
   ((Any_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Any3_Precondition3 name-judgement "(Precondition3?)" interval
     interval_arith)
    (AEB_MUL_fundmental_j name-judgement
     "(Fundamental4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?)))"
     bbiasp_mul nil)
    (AEB_MUL_inclusion_j name-judgement
     "(Inclusion4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?), aeboundsp_mul_safe))"
     bbiasp_mul nil))
   nil
   (AEB_MUL_j subtype "bbiasp_mul.aeboundsp_mul_ia"
    "{F: [[interval.Interval, interval.Interval, interval.Interval, interval.Interval] -> interval.Interval] | booleans.AND(interval.Inclusion4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?), bbiasp_mul.aeboundsp_mul_safe)(F), interval.Fundamental4?(interval.Any?, interval.pre1to2b(interval.NonNeg?), interval.Any3?, interval.pre1to4d(interval.NonNeg?))(F))}")))
 (AEB_MUL_P2L_inclusion_j 0
  (AEB_MUL_P2L_inclusion_j-1 nil 3909565390
   ("" (prove-inclusion-judgement) nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (aeboundsp_mul_p2l_ia const-decl "Interval" bbiasp_mul nil)
    (Ge const-decl "bool" interval interval_arith)
    (Mult_inclusion formula-decl nil interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ub_r2i formula-decl nil interval interval_arith)
    (lb_r2i formula-decl nil interval interval_arith)
    (aerr_ulp_mul_p2l const-decl "nonneg_real" aerr_ulp_mul axm_bnd)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (aeboundsp_mul_p2l_safe const-decl "real" bbiasp_mul nil)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Inclusion? const-decl "bool" interval interval_arith))
   nil
   (AEB_MUL_P2L_inclusion_j subtype
    "bbiasp_mul.aeboundsp_mul_p2l_ia(bbiasp_mul.n)"
    "(interval.Inclusion?(interval.NonNeg?, bbiasp_mul.aeboundsp_mul_p2l_safe(bbiasp_mul.n)))")))
 (AEB_MUL_P2L_j 0
  (AEB_MUL_P2L_j-2 nil 3909565502
   ("" (skeep)
    (("" (split 1)
      (("1" (assert) nil nil)
       ("2" (expand "Fundamental?")
        (("2" (skeep)
          (("2" (expand "aeboundsp_mul_p2l_ia")
            (("2" (lift-if 1)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (use "Mult_fundamental")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (typepred "X")
                    (("2" (hide 2)
                      (("2" (use "NonNeg_Incl")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (AEB_MUL_P2L_inclusion_j application-judgement
     "(Inclusion?(NonNeg?, aeboundsp_mul_p2l_safe(n)))" bbiasp_mul nil)
    (NonNeg_Incl formula-decl nil interval interval_arith)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Incl_reflx formula-decl nil interval interval_arith)
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     interval_arith)
    (posint_exp application-judgement "posint" exponentiation nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (Proper_Mult application-judgement "ProperInterval" interval
     interval_arith)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Mult_fundamental formula-decl nil interval interval_arith)
    (aeboundsp_mul_p2l_ia const-decl "Interval" bbiasp_mul nil)
    (Fundamental? const-decl "bool" interval interval_arith))
   nil
   (AEB_MUL_P2L_j subtype
    "bbiasp_mul.aeboundsp_mul_p2l_ia(bbiasp_mul.n)"
    "{F: [interval.Interval -> interval.Interval] | booleans.AND(interval.Inclusion?(interval.NonNeg?, bbiasp_mul.aeboundsp_mul_p2l_safe(bbiasp_mul.n))(F), interval.Fundamental?(interval.NonNeg?)(F))}"))
  (AEB_MUL_P2L_j-1 nil 3909565390 ("" (judgement-tcc) nil nil) nil nil
   (AEB_MUL_P2L_j subtype
    "bbiasp_mul.aeboundsp_mul_p2l_ia(bbiasp_mul.n)"
    "{F: [interval.Interval -> interval.Interval] | booleans.AND(interval.Inclusion?(interval.NonNeg?, bbiasp_mul.aeboundsp_mul_p2l_safe(bbiasp_mul.n))(F), interval.Fundamental?(interval.NonNeg?)(F))}")))
 (AEB_MUL_P2R_inclusion_j 0
  (AEB_MUL_P2R_inclusion_j-1 nil 3909565390
   ("" (prove-inclusion-judgement) nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (aeboundsp_mul_p2r_ia const-decl "Interval" bbiasp_mul nil)
    (Ge const-decl "bool" interval interval_arith)
    (Mult_inclusion formula-decl nil interval interval_arith)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (posint_exp application-judgement "posint" exponentiation nil)
    (ub_r2i formula-decl nil interval interval_arith)
    (lb_r2i formula-decl nil interval interval_arith)
    (aerr_ulp_mul_p2r const-decl "nonneg_real" aerr_ulp_mul axm_bnd)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (aeboundsp_mul_p2r_safe const-decl "real" bbiasp_mul nil)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Inclusion? const-decl "bool" interval interval_arith))
   nil
   (AEB_MUL_P2R_inclusion_j subtype
    "bbiasp_mul.aeboundsp_mul_p2r_ia(bbiasp_mul.n)"
    "(interval.Inclusion?(interval.NonNeg?, bbiasp_mul.aeboundsp_mul_p2r_safe(bbiasp_mul.n)))")))
 (AEB_MUL_P2R_j 0
  (AEB_MUL_P2R_j-2 nil 3909565536
   ("" (skeep)
    (("" (split 1)
      (("1" (assert) nil nil)
       ("2" (expand "Fundamental?")
        (("2" (skeep)
          (("2" (expand "aeboundsp_mul_p2r_ia")
            (("2" (lift-if 1)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (use "Mult_fundamental")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (typepred "X")
                    (("2" (hide 2)
                      (("2" (use "NonNeg_Incl")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (AEB_MUL_P2R_inclusion_j application-judgement
     "(Inclusion?(NonNeg?, aeboundsp_mul_p2r_safe(n)))" bbiasp_mul nil)
    (NonNeg_Incl formula-decl nil interval interval_arith)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Incl_reflx formula-decl nil interval interval_arith)
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     interval_arith)
    (posint_exp application-judgement "posint" exponentiation nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (Proper_Mult application-judgement "ProperInterval" interval
     interval_arith)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Mult_fundamental formula-decl nil interval interval_arith)
    (aeboundsp_mul_p2r_ia const-decl "Interval" bbiasp_mul nil)
    (Fundamental? const-decl "bool" interval interval_arith))
   nil
   (AEB_MUL_P2R_j subtype
    "bbiasp_mul.aeboundsp_mul_p2r_ia(bbiasp_mul.n)"
    "{F: [interval.Interval -> interval.Interval] | booleans.AND(interval.Inclusion?(interval.NonNeg?, bbiasp_mul.aeboundsp_mul_p2r_safe(bbiasp_mul.n))(F), interval.Fundamental?(interval.NonNeg?)(F))}"))
  (AEB_MUL_P2R_j-1 nil 3909565390 ("" (judgement-tcc) nil nil) nil nil
   (AEB_MUL_P2R_j subtype
    "bbiasp_mul.aeboundsp_mul_p2r_ia(bbiasp_mul.n)"
    "{F: [interval.Interval -> interval.Interval] | booleans.AND(interval.Inclusion?(interval.NonNeg?, bbiasp_mul.aeboundsp_mul_p2r_safe(bbiasp_mul.n))(F), interval.Fundamental?(interval.NonNeg?)(F))}"))))

