bbiadp_sqt: THEORY
BEGIN

  IMPORTING interval_ulp_dp,
  	        float_bounded_axiomatic@aerr_ulp__double,
	          interval_arith@interval_sqrt

  R,E: VAR Interval
  n  : VAR nat

  aeb_sqt_pre2(R,E:Interval): bool =
	   NonNeg?(E) AND
           Ge(Sub(R,E),0)

  aeb_sqt_pre2_predondition_j: JUDGEMENT
    aeb_sqt_pre2 HAS_TYPE (Precondition2?)

  aebounddp_sqt_ia(n)(R,E): Interval =
    If aeb_sqt_pre2(R,E)
    THEN Add(Sqrt(n)(E), Div(Ulp_dp(Sqrt(n)(Add(R,E))),[|2|]))
    ELSE EmptyInterval
    ENDIF

  re1,re2: VAR RealExpr

  x1,x2: VAR real

  aebounddp_sqt_safe(r,e: real): real =
    IF r - e >= 0 AND e >= 0
    THEN aerr_ulp_sqt(r,e)
    ELSE 1 ENDIF

  AEB_SQT_inclusion_j: JUDGEMENT
    aebounddp_sqt_ia(n)
    HAS_TYPE (Inclusion2?(Any?,aeb_sqt_pre2,aebounddp_sqt_safe))

%|- AEB_SQT_inclusion_j : PROOF
%|- (then
%|-  (install-rewrites :rewrites
%|-   ("aeb_sqt_pre2" "float_bounded_axiomatic@ieee754_sqt.sqrt"))
%|-  (branch (prove-inclusion-judgement) ((grind))))
%|- QED AEB_SQT_inclusion_j

  AEB_SQT_fundmental_j: JUDGEMENT
    aebounddp_sqt_ia(n)
    HAS_TYPE (Fundamental2?(Any?,aeb_sqt_pre2))

  AEB_SQT(n)(re1,re2):  RealExpr =
    FUN2(Any?,
         aeb_sqt_pre2,
	 aebounddp_sqt_safe,
	 aebounddp_sqt_ia(n),
	 re1,re2)

END bbiadp_sqt
