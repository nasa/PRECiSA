bbiasp_mul: THEORY
BEGIN

  importing interval_ulp_sp
  importing axm_bnd@aerr_ulp__single

  R1,E1,R2,E2: VAR Interval

  aeboundsp_mul_ia(R1,E1,R2,E2): Interval =
    If NonNeg?(E1) AND NonNeg?(E2)
    THEN Add(Add(Add(Mult(Abs(R1),E2),Mult(Abs(R2),E1)),Mult(E1,E2)),
             Div(Ulp_sp(
	          Add(
		    Add(Add(Mult(Abs(R1),Abs(R2)),Mult(Abs(R1),E2)), Mult(E1,Abs(R2))),
		    Mult(E1,E2))
		 ),   
		 [|2|]))
    ELSE EmptyInterval
    ENDIF

  re1,re2,re3,re4: VAR RealExpr

  x1,x2,x3,x4: VAR real

  aeboundsp_mul_safe(x1,x2,x3,x4): real =
    IF x2 >= 0 AND x4 >= 0
    THEN aerr_ulp_mul(x1,x2,x3,x4)
    ELSE 1
    ENDIF

  %|- AEB_MUL_inclusion_j : PROOF
  %|- (branch (prove-inclusion-judgement)  ((grind)))
  %|- QED AEB_MUL_inclusion_j
  AEB_MUL_inclusion_j: JUDGEMENT
    aeboundsp_mul_ia
    HAS_TYPE (Inclusion4?( Any?,
    	     		   pre1to2b(NonNeg?),
			   Any3?,
			   pre1to4d(NonNeg?),
			   aeboundsp_mul_safe ))

  
  %|- AEB_MUL_fundmental_j : PROOF
  %|- (prove-fundamental-judgement)
  %|- QED AEB_MUL_fundmental_j
  AEB_MUL_fundmental_j: JUDGEMENT
    aeboundsp_mul_ia
    HAS_TYPE (Fundamental4?(Any?,pre1to2b(NonNeg?), Any3?,pre1to4d(NonNeg?)))

  AEB_MUL_j: JUDGEMENT
    aeboundsp_mul_ia
    HAS_TYPE {F: [[Interval, Interval, Interval, Interval] -> Interval] |
             	   Inclusion4?( Any?,
    	     		   	pre1to2b(NonNeg?),
			   	Any3?,
			   	pre1to4d(NonNeg?),
			   	aeboundsp_mul_safe ) (F)
                   AND Fundamental4?( Any?, pre1to2b(NonNeg?), Any3?,
		       		      pre1to4d(NonNeg?) ) (F)}

  AEB_MUL(re1,re2,re3,re4):  RealExpr =
    FUN4(Any?,pre1to2b(NonNeg?),Any3?,pre1to4d(NonNeg?),aeboundsp_mul_safe,
      aeboundsp_mul_ia,re1,re2,re3,re4)

  % --- special cases: multiplication by power of two

  % Contrary to the cases of the trigonometric functions where n represents the
  % precision used to calculate the function, here n represents the power of
  % two participating in the multiplication.

  aeboundsp_mul_p2l_ia(n:nat)(E1): Interval =
    If NonNeg?(E1)
    THEN Mult([|2^n|],E1)
    ELSE EmptyInterval
    ENDIF

  aeboundsp_mul_p2l_safe(n:nat)(x1): real =
    IF x1 >= 0
    THEN aerr_ulp_mul_p2l(n,x1)
    ELSE 1 ENDIF

  n: VAR nat

  %|-   AEB_MUL_P2L_inclusion_j : PROOF
  %|- (prove-inclusion-judgement)
  %|- QED   AEB_MUL_P2L_inclusion_j 
  AEB_MUL_P2L_inclusion_j: JUDGEMENT
    aeboundsp_mul_p2l_ia(n)
    HAS_TYPE (Inclusion?( NonNeg?,
			  aeboundsp_mul_p2l_safe(n)))

  AEB_MUL_P2L_j: JUDGEMENT
    aeboundsp_mul_p2l_ia(n)
    HAS_TYPE {F: [Interval -> Interval] |
             	   Inclusion?( NonNeg?, aeboundsp_mul_p2l_safe(n) ) (F)
                   AND Fundamental?( NonNeg? ) (F)}

  AEB_MUL_P2L(n)(re1):  RealExpr =
    FUN(NonNeg?,aeboundsp_mul_p2l_safe(n),aeboundsp_mul_p2l_ia(n),re1)

  %

  aeboundsp_mul_p2r_ia(n:nat)(E1): Interval =
    If NonNeg?(E1)
    THEN Mult(E1,[|2^n|])
    ELSE EmptyInterval
    ENDIF

  aeboundsp_mul_p2r_safe(n:nat)(x1): real =
    IF x1 >= 0
    THEN aerr_ulp_mul_p2r(n,x1)
    ELSE 1 ENDIF

  %|-   AEB_MUL_P2R_inclusion_j : PROOF
  %|- (prove-inclusion-judgement)
  %|- QED   AEB_MUL_P2R_inclusion_j 
  AEB_MUL_P2R_inclusion_j: JUDGEMENT
    aeboundsp_mul_p2r_ia(n)
    HAS_TYPE (Inclusion?( NonNeg?,
			  aeboundsp_mul_p2r_safe(n)))


  AEB_MUL_P2R_j: JUDGEMENT
    aeboundsp_mul_p2r_ia(n)
    HAS_TYPE {F: [Interval -> Interval] |
             	   Inclusion?( NonNeg?, aeboundsp_mul_p2r_safe(n) ) (F)
                   AND Fundamental?( NonNeg? ) (F)}

  AEB_MUL_P2R(n)(re1):  RealExpr =
    FUN(NonNeg?,aeboundsp_mul_p2r_safe(n),aeboundsp_mul_p2r_ia(n),re1)

END bbiasp_mul
