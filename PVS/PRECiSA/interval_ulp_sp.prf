(interval_ulp_sp
 (IMP_interval_ulp_TCC1 0
  (IMP_interval_ulp_TCC2-1 nil 3909153896 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ const-decl "real" exponentiation nil)
    (log_gt1 const-decl "[{r | r >= 1} -> nnreal]" nn_log power)
    (inverse const-decl "D" function_inverse nil)
    (nn_log const-decl "nnreal" nn_log power)
    (log const-decl "real" log power)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (emin const-decl "negint" ieee754_domain axm_bnd)
    (ulp const-decl "posreal" ieee754_domain axm_bnd))
   nil
   (IMP_interval_ulp assuming
    "interval_ulp[ieee754_single_base.single, ieee754_semantics[2, 24, 127].safe_proj, LAMBDA (r: reals.real): ieee754_semantics[2, 24, 127].round(r), ieee754_domain[2, 24, 127].min_ulp, LAMBDA (r: reals.real) -> nonneg_real: ieee754_domain[2, 24, 127].ulp(r)].interval_ulp"
    "ulp_abs: ASSUMPTION interval_ulp.ulp(real_defs.abs(interval_ulp.r1)) = interval_ulp.ulp(interval_ulp.r1)")))
 (IMP_interval_ulp_TCC2 0
  (IMP_interval_ulp_TCC3-1 nil 3909153896
   ("" (skeep)
    (("" (expand "ulp_single") (("" (rewrite "ulp_monotone") nil nil))
      nil))
    nil)
   ((ulp_monotone formula-decl nil ieee754_domain axm_bnd)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil
   (IMP_interval_ulp assuming
    "interval_ulp[ieee754_single_base.single, ieee754_semantics[2, 24, 127].safe_proj, LAMBDA (r: reals.real): ieee754_semantics[2, 24, 127].round(r), ieee754_domain[2, 24, 127].min_ulp, LAMBDA (r: reals.real) -> nonneg_real: ieee754_domain[2, 24, 127].ulp(r)].interval_ulp"
    "ulp_monotone: ASSUMPTION booleans.IMPLIES(booleans.AND(reals.<=(0, interval_ulp.r1), reals.<=(interval_ulp.r1, interval_ulp.r2)), reals.<=(interval_ulp.ulp(interval_ulp.r1), interval_ulp.ulp(interval_ulp.r2)))")))
 (IMP_interval_ulp_TCC3 0
  (IMP_interval_ulp_TCC4-1 nil 3909153896
   ("" (skeep)
    (("" (expand "ulp_single")
      (("" (expand "min_ulp_single") (("" (rewrite "ulp_min") nil nil))
        nil))
      nil))
    nil)
   ((ulp_min formula-decl nil ieee754_domain axm_bnd)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil
   (IMP_interval_ulp assuming
    "interval_ulp[ieee754_single_base.single, ieee754_semantics[2, 24, 127].safe_proj, LAMBDA (r: reals.real): ieee754_semantics[2, 24, 127].round(r), ieee754_domain[2, 24, 127].min_ulp, LAMBDA (r: reals.real) -> nonneg_real: ieee754_domain[2, 24, 127].ulp(r)].interval_ulp"
    "ulp_min: ASSUMPTION reals.<=(interval_ulp.min_ulp, interval_ulp.ulp(interval_ulp.r1))")))
 (Ulp_sp_proper 0
  (Ulp_sp_proper-2 nil 3909207087
   ("" (expand "Ulp_sp") (("" (use "Ulp_proper") nil nil)) nil)
   ((Ulp_proper formula-decl nil interval_ulp nil)
    (datum nonempty-type-decl nil ieee754_data axm_bnd)
    (single type-eq-decl nil ieee754_single_base axm_bnd)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (safe_proj const-decl "real" ieee754_semantics axm_bnd)
    (round const-decl "datum" ieee754_semantics axm_bnd)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (min_ulp const-decl "posreal" ieee754_domain axm_bnd)
    (ulp const-decl "posreal" ieee754_domain axm_bnd)
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil))
   nil)
  (Ulp_sp_proper-1 nil 3699283228
   ("" (expand "Ulp_sp") (("" (use "Ulp_proper") nil nil)) nil)
   ((Ulp_proper formula-decl nil interval_ulp nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil))
   shostak))
 (Ulp_sp_inclusion 0
  (Ulp_sp_inclusion-1 nil 3699272340
   ("" (expand "Ulp_sp") (("" (use "Ulp_inclusion") nil nil)) nil)
   ((Ulp_inclusion formula-decl nil interval_ulp nil)
    (datum nonempty-type-decl nil ieee754_data axm_bnd)
    (single type-eq-decl nil ieee754_single_base axm_bnd)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (safe_proj const-decl "real" ieee754_semantics axm_bnd)
    (round const-decl "datum" ieee754_semantics axm_bnd)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (min_ulp const-decl "posreal" ieee754_domain axm_bnd)
    (ulp const-decl "posreal" ieee754_domain axm_bnd)
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil))
   shostak))
 (Ulp_sp_Inclusion 0
  (Ulp_sp_Inclusion-2 nil 3699270609
   ("" (expand "Inclusion?")
    (("" (skeep)
      (("" (use "Ulp_inclusion")
        (("" (assert)
          (("" (expand "Ulp_sp") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((Ulp_sp const-decl "Interval" interval_ulp_sp nil)
    (PreTrue const-decl "(Precondition?)" interval_expr interval_arith)
    (Precondition? const-decl "bool" interval interval_arith)
    (PRED type-eq-decl nil defined_types nil)
    (Interval type-eq-decl nil interval interval_arith)
    (ulp const-decl "posreal" ieee754_domain axm_bnd)
    (min_ulp const-decl "posreal" ieee754_domain axm_bnd)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (round const-decl "datum" ieee754_semantics axm_bnd)
    (safe_proj const-decl "real" ieee754_semantics axm_bnd)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (single type-eq-decl nil ieee754_single_base axm_bnd)
    (datum nonempty-type-decl nil ieee754_data axm_bnd)
    (Ulp_inclusion formula-decl nil interval_ulp nil)
    (Inclusion? const-decl "bool" interval interval_arith))
   nil
   (Ulp_sp_Inclusion subtype "interval_ulp_sp.Ulp_sp"
    "(interval.Inclusion?(interval_expr.PreTrue, LAMBDA (r: reals.real) -> nonneg_real: ieee754_domain[2, 24, 127].ulp(r)))"))
  (Ulp_sp_Inclusion-1 nil 3699269065 ("" (judgement-tcc) nil nil) nil
   nil
   (Ulp_sp_Inclusion subtype "interval_ulp_sp.Ulp_sp"
    "(interval.Inclusion?(interval_expr.PreTrue, LAMBDA (r: reals.real) -> nonneg_real: ieee754_domain[2, 24, 127].ulp(r)))")))
 (Ulp_sp_fundamental 0
  (Ulp_sp_fundamental-1 nil 3699272434
   ("" (expand "Ulp_sp") (("" (use "Ulp_fundamental") nil nil)) nil)
   ((Ulp_fundamental formula-decl nil interval_ulp nil)
    (datum nonempty-type-decl nil ieee754_data axm_bnd)
    (single type-eq-decl nil ieee754_single_base axm_bnd)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (safe_proj const-decl "real" ieee754_semantics axm_bnd)
    (round const-decl "datum" ieee754_semantics axm_bnd)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (min_ulp const-decl "posreal" ieee754_domain axm_bnd)
    (ulp const-decl "posreal" ieee754_domain axm_bnd)
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil))
   shostak))
 (Ulp_sp_Fundamental 0
  (Ulp_sp_Fundamental-2 nil 3699270653
   ("" (expand "Fundamental?")
    (("" (skeep)
      (("" (expand "Ulp_sp")
        (("" (use "Ulp_fundamental") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((Ulp_fundamental formula-decl nil interval_ulp nil)
    (datum nonempty-type-decl nil ieee754_data axm_bnd)
    (single type-eq-decl nil ieee754_single_base axm_bnd)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (safe_proj const-decl "real" ieee754_semantics axm_bnd)
    (round const-decl "datum" ieee754_semantics axm_bnd)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (min_ulp const-decl "posreal" ieee754_domain axm_bnd)
    (ulp const-decl "posreal" ieee754_domain axm_bnd)
    (Interval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval interval_arith)
    (PreTrue const-decl "(Precondition?)" interval_expr interval_arith)
    (Ulp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp))"
     interval_ulp_sp nil)
    (Ulp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_sp nil)
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil)
    (Fundamental? const-decl "bool" interval interval_arith))
   nil
   (Ulp_sp_Fundamental subtype "interval_ulp_sp.Ulp_sp"
    "(interval.Fundamental?(interval_expr.PreTrue))"))
  (Ulp_sp_Fundamental-1 nil 3699269065 ("" (judgement-tcc) nil nil) nil
   nil
   (Ulp_sp_Fundamental subtype "interval_ulp_sp.Ulp_sp"
    "(interval.Fundamental?(interval_expr.PreTrue))")))
 (ULP_SP_TCC1 0
  (ULP_SP_TCC1-2 nil 3909567691
   ("" (skeep)
    (("" (split 1)
      (("1" (expand "Inclusion?")
        (("1" (skeep)
          (("1" (use "Ulp_inclusion")
            (("1" (assert)
              (("1" (expand "Ulp_sp") (("1" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "Fundamental?")
        (("2" (skeep)
          (("2" (use "Ulp_fundamental")
            (("2" (expand "Ulp_sp") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Fundamental? const-decl "bool" interval interval_arith)
    (Ulp_fundamental formula-decl nil interval_ulp nil)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Ulp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_sp nil)
    (Ulp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp))"
     interval_ulp_sp nil)
    (Inclusion? const-decl "bool" interval interval_arith)
    (Ulp_inclusion formula-decl nil interval_ulp nil)
    (datum nonempty-type-decl nil ieee754_data axm_bnd)
    (single type-eq-decl nil ieee754_single_base axm_bnd)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (safe_proj const-decl "real" ieee754_semantics axm_bnd)
    (round const-decl "datum" ieee754_semantics axm_bnd)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (min_ulp const-decl "posreal" ieee754_domain axm_bnd)
    (ulp const-decl "posreal" ieee754_domain axm_bnd)
    (Interval type-eq-decl nil interval interval_arith)
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval interval_arith)
    (PreTrue const-decl "(Precondition?)" interval_expr interval_arith)
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil)
    (Ulp_sp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_sp nil)
    (Ulp_sp_Inclusion name-judgement
     "(Inclusion?(PreTrue, LAMBDA (r: real) -> nonneg_real: ulp(r)))"
     interval_ulp_sp nil))
   nil
   (ULP_SP subtype "interval_ulp_sp.Ulp_sp"
    "{F: [interval.Interval -> interval.Interval] | booleans.AND(interval.Inclusion?(interval_expr.PreTrue, LAMBDA (r: reals.real) -> nonneg_real: ieee754_domain[2, 24, 127].ulp(r))(F), interval.Fundamental?(interval_expr.PreTrue)(F))}"))
  (ULP_SP_TCC1-1 nil 3699269065 ("" (subtype-tcc) nil nil)
   ((Ulp_sp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_sp nil)
    (Ulp_sp_Inclusion name-judgement
     "(Inclusion?(PreTrue, LAMBDA (r: real) -> nonneg_real: ulp(r)))"
     interval_ulp_sp nil))
   nil
   (ULP_SP subtype "interval_ulp_sp.Ulp_sp"
    "{F: [interval.Interval -> interval.Interval] | booleans.AND(interval.Inclusion?(interval_expr.PreTrue, LAMBDA (r: reals.real) -> nonneg_real: ieee754_domain[2, 24, 127].ulp(r))(F), interval.Fundamental?(interval_expr.PreTrue)(F))}"))))

