(bbiasp_div
 (aeb_div_pre4_predondition_j 0
  (aeb_div_pre4_predondition_j-2 nil 3684856541
   ("" (expand "Precondition4?")
    (("" (expand "aeb_div_pre4")
      (("" (skeep)
        (("" (split 1)
          (("1" (hide-all-but (-5 -2 1))
            (("1" (use "NonNeg_Incl") (("1" (assert) nil nil)) nil))
            nil)
           ("2" (hide-all-but (1 -4 -6))
            (("2" (use "NonNeg_Incl") (("2" (assert) nil nil)) nil))
            nil)
           ("3" (lemma "Zeroless_fundamental")
            (("3" (inst? -1 :where 1)
              (("3" (inst? -1 :where -9)
                (("3" (assert)
                  (("3" (use "Sub_fundamental")
                    (("3" (assert)
                      (("3" (split 1)
                        (("1" (use "Mult_fundamental")
                          (("1" (assert) nil nil)) nil)
                         ("2" (use "Mult_fundamental")
                          (("2" (assert)
                            (("2" (use "Abs_fundamental")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (flatten)
            (("4" (split -9)
              (("1" (lemma "Gt_fundamental")
                (("1" (inst? -1 :where 1)
                  (("1" (inst? -1 :where -2)
                    (("1" (assert)
                      (("1" (use "Sub_fundamental")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "Lt_fundamental")
                (("2" (inst? -1 :where 2)
                  (("2" (inst? -1 :where -2)
                    (("2" (assert)
                      (("2" (use "Add_fundamental")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Proper_Sub application-judgement "ProperInterval" interval
     interval_arith)
    (aeb_div_pre4 const-decl "bool" bbiaXp_div nil)
    (NonNeg_Incl formula-decl nil interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Interval type-eq-decl nil interval interval_arith)
    (real nonempty-type-from-decl nil reals nil)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Sub const-decl "Interval" interval interval_arith)
    (Mult const-decl "Interval" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Proper_Abs application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Mult application-judgement "ProperInterval" interval
     interval_arith)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Abs_fundamental formula-decl nil interval interval_arith)
    (Mult_fundamental formula-decl nil interval interval_arith)
    (Sub_fundamental formula-decl nil interval interval_arith)
    (Zeroless_fundamental formula-decl nil interval interval_arith)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (Gt_fundamental formula-decl nil interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (Add_fundamental formula-decl nil interval interval_arith)
    (Lt_fundamental formula-decl nil interval interval_arith)
    (Precondition4? const-decl "bool" interval interval_arith))
   nil
   (aeb_div_pre4_predondition_j subtype "bbiaXp_div.aeb_div_pre4"
    "(interval.Precondition4?)"))
  (aeb_div_pre4_predondition_j-1 nil 3684856535
   ("" (judgement-tcc) nil nil) nil nil
   (aeb_div_pre4_predondition_j subtype "bbiaXp_div.aeb_div_pre4"
    "(interval.Precondition4?)")))
 (helper1 0
  (helper1-1 nil 3684058478 ("" (grind) nil nil)
   ((NonNeg? const-decl "bool" interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (Ge const-decl "bool" interval interval_arith)
    (real_plus_real_is_real application-judgement "real" reals nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (Sub const-decl "Interval" interval interval_arith)
    (Gt const-decl "bool" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (Lt const-decl "bool" interval interval_arith)
    (Zeroin? const-decl "bool" interval interval_arith)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Zeroless? const-decl "bool" interval interval_arith))
   shostak))
 (aeboundsp_div_safe_TCC1 0
  (aeboundsp_div_safe_TCC1-1 nil 3683997757 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil
   (aeboundsp_div_safe subtype "bbiasp_div.e2"
    "{e2: real_types.nnreal | (booleans.OR(reals.<(0, (number_fields.-)(bbiasp_div.r2, e2)), reals.<((number_fields.+)(e2, bbiasp_div.r2), 0)))}")))
 (AEB_DIV_inclusion_j 0
  (AEB_DIV_inclusion_j-2 nil 3699283584
   ("" (install-rewrites :rewrites ("aeb_div_pre4" "helper1"))
    (("" (prove-inclusion-judgement)
      (("1" (rewrite "helper1") nil nil)
       ("2" (expand "NonNeg?")
        (("2" (lemma "inclusion_Ge")
          (("2" (inst? -1)
            (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("3" (expand "NonNeg?")
        (("3" (lemma "inclusion_Ge")
          (("3" (inst? -1)
            (("3" (inst? -1) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("4" (lemma "inclusion_Gt")
        (("4" (expand ">")
          (("4" (inst? -1 :where 1)
            (("4" (inst? -1)
              (("4" (assert)
                (("4" (lemma "inclusion_Lt")
                  (("4" (inst? -1 :where 3)
                    (("4" (inst? -1)
                      (("4" (assert)
                        (("4" (rewrite "Sub_inclusion")
                          (("4" (rewrite "Add_inclusion")
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Inclusion4? const-decl "bool" interval interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (aeb_div_pre4 const-decl "bool" bbiaXp_div nil)
    (Any_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Any2_Precondition2 name-judgement "(Precondition2?)" interval
     interval_arith)
    (Any3_Precondition3 name-judgement "(Precondition3?)" interval
     interval_arith)
    (aeb_div_pre4_predondition_j name-judgement "(Precondition4?)"
     bbiasp_div nil)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     interval_arith)
    (aeboundsp_div_safe const-decl "real" bbiasp_div nil)
    (aeboundsp_div_ia const-decl "Interval" bbiasp_div nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (aerr_ulp_div const-decl "nnreal" aerr_ulp_div axm_bnd)
    (Add_inclusion formula-decl nil interval interval_arith)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Div const-decl "Interval" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (Mult const-decl "Interval" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Any3? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (Any2? const-decl "bool" interval interval_arith)
    (Sub const-decl "Interval" interval interval_arith)
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ulp const-decl "posreal" ieee754_domain axm_bnd)
    (Div_inclusion formula-decl nil interval interval_arith)
    (Mult_inclusion formula-decl nil interval interval_arith)
    (Abs_inclusion formula-decl nil interval interval_arith)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Sub_inclusion formula-decl nil interval interval_arith)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (Ulp_sp_inclusion formula-decl nil interval_ulp_sp nil)
    (helper1 formula-decl nil bbiasp_div nil)
    (Proper? const-decl "bool" interval interval_arith)
    (inclusion_Ge formula-decl nil interval interval_arith)
    (inclusion_Lt formula-decl nil interval interval_arith)
    (inclusion_Gt formula-decl nil interval interval_arith))
   nil
   (AEB_DIV_inclusion_j subtype "bbiasp_div.aeboundsp_div_ia"
    "(interval.Inclusion4?(interval.Any?, interval.Any2?, interval.Any3?, bbiaXp_div.aeb_div_pre4, bbiasp_div.aeboundsp_div_safe))"))
  (AEB_DIV_inclusion_j-1 nil 3684853969
   ("" (expand "Inclusion4?")
    (("" (skeep)
      (("" (expand "aeboundsp_div_ia")
        (("" (expand "aeboundsp_div_safe")
          (("" (lift-if 1)
            (("" (split 1)
              (("1" (flatten)
                (("1" (expand "aerr_ulp_div")
                  (("1" (with-tccs (use "Add_inclusion"))
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (split 1)
                          (("1" (expand "div_aerr_bound")
                            (("1" (use "Div_inclusion")
                              (("1"
                                (assert)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (lemma "Add_inclusion")
                                    (("1"
                                      (inst
                                       -1
                                       "Mult(Abs(X3), X2)"
                                       " Mult(Abs(X1), X4)"
                                       "abs(x3) * x2"
                                       "abs(x1) * x4")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (use "Mult_inclusion")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use "Abs_inclusion")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use "Mult_inclusion")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (use "Abs_inclusion")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "Sub_inclusion")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (use "Mult_inclusion")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (use "Mult_inclusion")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (use "Abs_inclusion")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (typepred "X4")
                                    (("3"
                                      (expand "aeb_div_pre4")
                                      (("3" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "Div_inclusion")
                            (("2" (assert)
                              (("2"
                                (split 1)
                                (("1"
                                  (lemma "Ulp_inclusion")
                                  (("1"
                                    (inst? -1 :where 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "div_ulp_bound")
                                        (("1"
                                          (use "Div_inclusion")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (use "Add_inclusion")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (use
                                                     "Abs_inclusion")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (use "Sub_inclusion")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "Abs_inclusion")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (typepred "X4")
                                                (("3"
                                                  (expand
                                                   "aeb_div_pre4")
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (lemma "helper1")
                                                      (("3"
                                                        (inst?
                                                         -1
                                                         :where
                                                         1)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (eval-formula) nil nil)
                                 ("3" (eval-formula) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (hide 2)
                  (("2" (typepred "X4")
                    (("2" (expand "aeb_div_pre4")
                      (("2" (flatten)
                        (("2" (typepred "X2")
                          (("2" (assert)
                            (("2" (split 1)
                              (("1"
                                (expand "NonNeg?")
                                (("1"
                                  (hide-all-but (-2 -8 1))
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-3 -10 1))
                                (("2" (grind) nil nil))
                                nil)
                               ("3"
                                (flatten)
                                (("3"
                                  (split -6)
                                  (("1"
                                    (lemma "inclusion_Gt")
                                    (("1"
                                      (inst? -1 :where -2)
                                      (("1"
                                        (inst -1 "x3-x4")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use "Sub_inclusion")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "inclusion_Lt")
                                    (("2"
                                      (inst? -1 :where -2)
                                      (("2"
                                        (inst? -1 :where 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "Add_inclusion")
                                            (("2"
                                              (inst
                                               -1
                                               "X3"
                                               "X4"
                                               "x3"
                                               "x4")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lt_realorder name-judgement "RealOrder" real_orders reals)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     interval_arith)
    (Div_inclusion formula-decl nil interval interval_arith)
    (Abs_inclusion formula-decl nil interval interval_arith)
    (Mult_inclusion formula-decl nil interval interval_arith)
    (Sub_inclusion formula-decl nil interval interval_arith)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Ulp_inclusion formula-decl nil interval_ulp nil)
    (Proper? const-decl "bool" interval interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Add_inclusion formula-decl nil interval interval_arith)
    (Ulp const-decl "Interval" interval_ulp nil)
    (Sub const-decl "Interval" interval interval_arith)
    (Any2? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (Any3? const-decl "bool" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Mult const-decl "Interval" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (Div const-decl "Interval" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith)
    (Ge const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (inclusion_Gt formula-decl nil interval interval_arith)
    (inclusion_Lt formula-decl nil interval interval_arith)
    (Inclusion4? const-decl "bool" interval interval_arith))
   nil
   (AEB_DIV_inclusion_j subtype "bbiasp_div.aeboundsp_div_ia"
    "(interval.Inclusion4?(interval.Any?, interval.Any2?, interval.Any3?, bbiaXp_div.aeb_div_pre4, bbiasp_div.aeboundsp_div_safe))")))
 (AEB_DIV_fundmental_j 0
  (AEB_DIV_fundmental_j-3 nil 3699283612
   ("" (expand "Fundamental4?")
    (("" (skeep)
      (("" (expand "aeboundsp_div_ia")
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (use "Add_fundamental")
                (("1" (assert)
                  (("1" (hide 2)
                    (("1" (split)
                      (("1" (expand "aeb_div_pre4")
                        (("1" (flatten)
                          (("1" (use "Div_fundamental")
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (use "Add_fundamental")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (use "Mult_fundamental")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use "Abs_fundamental")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use "Mult_fundamental")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (use "Abs_fundamental")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "Sub_fundamental")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (use "Mult_fundamental")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (use "Mult_fundamental")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (use "Abs_fundamental")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (typepred "Y4")
                                    (("3"
                                      (expand "aeb_div_pre4")
                                      (("3" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (use "Div_fundamental")
                        (("2" (assert)
                          (("2" (hide 2)
                            (("2" (split 1)
                              (("1"
                                (lemma "Ulp_sp_proper")
                                (("1"
                                  (inst? -1 :where 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use "Proper_Div")
                                      (("1"
                                        (expand "aeb_div_pre4")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (use "helper1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (use "Ulp_sp_fundamental")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (use "Proper_Div")
                                        (("1"
                                          (expand "aeb_div_pre4")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (use "helper1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "Div_fundamental")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (split 1)
                                              (("1"
                                                (use "Add_fundamental")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (use
                                                     "Abs_fundamental")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (use "Sub_fundamental")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "Abs_fundamental")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (typepred "Y4")
                                                (("3"
                                                  (expand
                                                   "aeb_div_pre4")
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (lemma "helper1")
                                                      (("3"
                                                        (inst?
                                                         -1
                                                         :where
                                                         1)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (eval-formula) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (hide 2)
                (("2" (expand "aeb_div_pre4")
                  (("2" (typepred "Y4")
                    (("2" (expand "aeb_div_pre4")
                      (("2" (flatten)
                        (("2" (split 1)
                          (("1" (hide-all-but (-7 -1 1))
                            (("1" (use "NonNeg_Incl")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide-all-but (1 -9 -2))
                            (("2" (use "NonNeg_Incl")
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (lemma "Zeroless_fundamental")
                            (("3" (inst? -1 :where 1)
                              (("3"
                                (inst? -1 :where -5)
                                (("3"
                                  (assert)
                                  (("3"
                                    (hide 2)
                                    (("3"
                                      (use "Sub_fundamental")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide 2)
                                          (("3"
                                            (split 1)
                                            (("1"
                                              (use "Mult_fundamental")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (use "Mult_fundamental")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "Abs_fundamental")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (flatten)
                            (("4" (split -5)
                              (("1"
                                (lemma "Gt_fundamental")
                                (("1"
                                  (inst? -1 :where 1)
                                  (("1"
                                    (inst? -1 :where -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (use "Sub_fundamental")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "Lt_fundamental")
                                (("2"
                                  (inst? -1 :where 2)
                                  (("2"
                                    (inst? -1 :where -2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (use "Add_fundamental")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg_Incl formula-decl nil interval interval_arith)
    (Zeroless_fundamental formula-decl nil interval interval_arith)
    (Gt_fundamental formula-decl nil interval interval_arith)
    (Lt_fundamental formula-decl nil interval interval_arith)
    (NonNeg_Mult application-judgement "(NonNeg?)" interval
     interval_arith)
    (r2i_Proper application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (Ulp_sp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_sp nil)
    (Ulp_sp_Inclusion name-judgement
     "(Inclusion?(PreTrue, LAMBDA (r: real) -> nonneg_real: ulp(r)))"
     interval_ulp_sp nil)
    (Proper_Sub application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Abs application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Mult application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (aeb_div_pre4_predondition_j name-judgement "(Precondition4?)"
     bbiasp_div nil)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Abs_fundamental formula-decl nil interval interval_arith)
    (Mult_fundamental formula-decl nil interval interval_arith)
    (Sub_fundamental formula-decl nil interval interval_arith)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Div_fundamental formula-decl nil interval interval_arith)
    (Incl_reflx formula-decl nil interval interval_arith)
    (Proper_Div judgement-tcc nil interval interval_arith)
    (X4 skolem-const-decl "ProperInterval" bbiasp_div nil)
    (X3 skolem-const-decl "ProperInterval" bbiasp_div nil)
    (Zeroless? const-decl "bool" interval interval_arith)
    (helper1 formula-decl nil bbiasp_div nil)
    (Ulp_sp_proper formula-decl nil interval_ulp_sp nil)
    (Y3 skolem-const-decl "{Y3: Interval | Any3?(Y1, Y2, Y3)}"
     bbiasp_div nil)
    (Y2 skolem-const-decl "{Y2: Interval | Any2?(Y1, Y2)}" bbiasp_div
     nil)
    (Y1 skolem-const-decl "(Any?)" bbiasp_div nil)
    (Ulp_sp_fundamental formula-decl nil interval_ulp_sp nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Div const-decl "Interval" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (Mult const-decl "Interval" interval interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Any3? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (Any2? const-decl "bool" interval interval_arith)
    (aeb_div_pre4 const-decl "bool" bbiaXp_div nil)
    (Sub const-decl "Interval" interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Ulp_sp const-decl "Interval" interval_ulp_sp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    ([\|\|] const-decl "Interval" interval interval_arith)
    (Add_fundamental formula-decl nil interval interval_arith)
    (aeboundsp_div_ia const-decl "Interval" bbiasp_div nil)
    (Fundamental4? const-decl "bool" interval interval_arith))
   nil
   (AEB_DIV_fundmental_j subtype "bbiasp_div.aeboundsp_div_ia"
    "(interval.Fundamental4?(interval.Any?, interval.Any2?, interval.Any3?, bbiaXp_div.aeb_div_pre4))"))
  (AEB_DIV_fundmental_j-2 nil 3684855060
   ("" (expand "Fundamental4?")
    (("" (skeep)
      (("" (expand "aeboundsp_div_ia")
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten)
              (("1" (use "Add_fundamental")
                (("1" (assert)
                  (("1" (hide 2)
                    (("1" (split)
                      (("1" (expand "aeb_div_pre4")
                        (("1" (flatten)
                          (("1" (use "Div_fundamental")
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (use "Add_fundamental")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (use "Mult_fundamental")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use "Abs_fundamental")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use "Mult_fundamental")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (use "Abs_fundamental")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "Sub_fundamental")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (use "Mult_fundamental")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (use "Mult_fundamental")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (use "Abs_fundamental")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (typepred "Y4")
                                    (("3"
                                      (expand "aeb_div_pre4")
                                      (("3" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (use "Div_fundamental")
                        (("2" (assert)
                          (("2" (hide 2)
                            (("2" (split 1)
                              (("1"
                                (lemma "Ulp_proper")
                                (("1"
                                  (inst? -1 :where 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use "Proper_Div")
                                      (("1"
                                        (expand "aeb_div_pre4")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (use "helper1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (use "Ulp_fundamental")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (use "Proper_Div")
                                        (("1"
                                          (expand "aeb_div_pre4")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (use "helper1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "Div_fundamental")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (split 1)
                                              (("1"
                                                (use "Add_fundamental")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (use
                                                     "Abs_fundamental")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (use "Sub_fundamental")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "Abs_fundamental")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (typepred "Y4")
                                                (("3"
                                                  (expand
                                                   "aeb_div_pre4")
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (lemma "helper1")
                                                      (("3"
                                                        (inst?
                                                         -1
                                                         :where
                                                         1)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (eval-formula) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (hide 2)
                (("2" (expand "aeb_div_pre4")
                  (("2" (typepred "Y4")
                    (("2" (expand "aeb_div_pre4")
                      (("2" (flatten)
                        (("2" (split 1)
                          (("1" (hide-all-but (-7 -1 1))
                            (("1" (use "NonNeg_Incl")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide-all-but (1 -9 -2))
                            (("2" (use "NonNeg_Incl")
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (lemma "Zeroless_fundamental")
                            (("3" (inst? -1 :where 1)
                              (("3"
                                (inst? -1 :where -5)
                                (("3"
                                  (assert)
                                  (("3"
                                    (hide 2)
                                    (("3"
                                      (use "Sub_fundamental")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide 2)
                                          (("3"
                                            (split 1)
                                            (("1"
                                              (use "Mult_fundamental")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (use "Mult_fundamental")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "Abs_fundamental")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (flatten)
                            (("4" (split -5)
                              (("1"
                                (lemma "Gt_fundamental")
                                (("1"
                                  (inst? -1 :where 1)
                                  (("1"
                                    (inst? -1 :where -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (use "Sub_fundamental")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "Lt_fundamental")
                                (("2"
                                  (inst? -1 :where 2)
                                  (("2"
                                    (inst? -1 :where -2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (use "Add_fundamental")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg_Incl formula-decl nil interval interval_arith)
    (Zeroless_fundamental formula-decl nil interval interval_arith)
    (Gt_fundamental formula-decl nil interval interval_arith)
    (Lt_fundamental formula-decl nil interval interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     interval_arith)
    (Proper_Sub application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Abs application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Mult application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Abs_fundamental formula-decl nil interval interval_arith)
    (Mult_fundamental formula-decl nil interval interval_arith)
    (Sub_fundamental formula-decl nil interval interval_arith)
    (Div_fundamental formula-decl nil interval interval_arith)
    (Incl_reflx formula-decl nil interval interval_arith)
    (Proper_Div judgement-tcc nil interval interval_arith)
    (Zeroless? const-decl "bool" interval interval_arith)
    (Ulp_proper formula-decl nil interval_ulp nil)
    (Ulp_fundamental formula-decl nil interval_ulp nil)
    (Interval type-eq-decl nil interval interval_arith)
    (Div const-decl "Interval" interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (Mult const-decl "Interval" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Any3? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (Any2? const-decl "bool" interval interval_arith)
    (Sub const-decl "Interval" interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Ulp const-decl "Interval" interval_ulp nil)
    (Add_fundamental formula-decl nil interval interval_arith)
    (Fundamental4? const-decl "bool" interval interval_arith))
   nil
   (AEB_DIV_fundmental_j subtype "bbiasp_div.aeboundsp_div_ia"
    "(interval.Fundamental4?(interval.Any?, interval.Any2?, interval.Any3?, bbiaXp_div.aeb_div_pre4))"))
  (AEB_DIV_fundmental_j-1 nil 3684853969 ("" (judgement-tcc) nil nil)
   nil nil
   (AEB_DIV_fundmental_j subtype "bbiasp_div.aeboundsp_div_ia"
    "(interval.Fundamental4?(interval.Any?, interval.Any2?, interval.Any3?, bbiaXp_div.aeb_div_pre4))")))
 (AEB_DIV_TCC1 0
  (AEB_DIV_TCC1-1 nil 3683997757 ("" (subtype-tcc) nil nil)
   ((AEB_DIV_fundmental_j name-judgement
     "(Fundamental4?(Any?, Any2?, Any3?, aeb_div_pre4))" bbiasp_div
     nil)
    (AEB_DIV_inclusion_j name-judgement
     "(Inclusion4?(Any?, Any2?, Any3?, aeb_div_pre4, aeboundsp_div_safe))"
     bbiasp_div nil))
   nil
   (AEB_DIV subtype "bbiasp_div.aeboundsp_div_ia"
    "{F: [[interval.Interval, interval.Interval, interval.Interval, interval.Interval] -> interval.Interval] | booleans.AND(interval.Inclusion4?(interval.Any?, interval.Any2?, interval.Any3?, bbiaXp_div.aeb_div_pre4, bbiasp_div.aeboundsp_div_safe)(F), interval.Fundamental4?(interval.Any?, interval.Any2?, interval.Any3?, bbiaXp_div.aeb_div_pre4)(F))}"))))

