(bbiadp_flr
 (AEB_FLR_inclusion_j 0
  (AEB_FLR_inclusion_j-2 nil 3699285567
   ("" (prove-inclusion-judgement) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Any_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (aebounddp_flr_safe const-decl "real" bbiadp_flr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (aerr_ulp_floor const-decl "nnreal" aerr_ulp_floor axm_bnd)
    (Abs_inclusion formula-decl nil interval interval_arith)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Precondition2? const-decl "bool" interval interval_arith)
    (Precondition? const-decl "bool" interval interval_arith)
    (PRED type-eq-decl nil defined_types nil)
    (Add const-decl "Interval" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Floor const-decl "Interval" interval interval_arith)
    (Sub const-decl "Interval" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Add_inclusion formula-decl nil interval interval_arith)
    (Floor_inclusion formula-decl nil interval interval_arith)
    (Sub_inclusion formula-decl nil interval interval_arith)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (Ge const-decl "bool" interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (aebounddp_flr_ia const-decl "Interval" bbiadp_flr nil)
    (Inclusion2? const-decl "bool" interval interval_arith))
   nil
   (AEB_FLR_inclusion_j subtype "bbiadp_flr.aebounddp_flr_ia"
    "(interval.Inclusion2?(interval.Any?, interval.pre1to2b(interval.NonNeg?), bbiadp_flr.aebounddp_flr_safe))"))
  (AEB_FLR_inclusion_j-1 nil 3684847068
   ("" (expand "Inclusion2?")
    (("" (skeep)
      (("" (expand "aebounddp_flr_ia")
        (("" (expand "aebounddp_flr_safe")
          (("" (lift-if)
            (("" (split)
              (("1" (flatten)
                (("1" (hide 1)
                  (("1" (hide -2)
                    (("1" (typepred "X2") (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (typepred "X2")
                  (("2" (assert)
                    (("2" (expand "aerr_ulp_flr")
                      (("2" (use "Add_inclusion")
                        (("2" (assert)
                          (("2" (hide 3)
                            (("2" (split)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand "flr_aerr_bound")
                                  (("1"
                                    (lemma "Add_inclusion")
                                    (("1"
                                      (inst -1 "X2" "[|1|]" "x2" "1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (eval-formula)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (use "Div_inclusion")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (split)
                                        (("1"
                                          (expand "flr_ulp_bound")
                                          (("1"
                                            (use "Ulp_inclusion")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (lemma
                                                   "Add_inclusion")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "Abs(Floor(X1))"
                                                     "Add(X2, [|1|])"
                                                     "abs(floor(x1))"
                                                     "1 + x2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (use
                                                             "Abs_inclusion")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (use
                                                                   "Floor_inclusion")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "Add_inclusion")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "X2"
                                                               "[|1|]"
                                                               "x2"
                                                               "1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (eval-formula)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (eval-formula) nil nil)
                                         ("3" (eval-formula) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Any? const-decl "bool" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith)
    (Precondition? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (Ge const-decl "bool" interval interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (Div_inclusion formula-decl nil interval interval_arith)
    (Floor_inclusion formula-decl nil interval interval_arith)
    (Abs_inclusion formula-decl nil interval interval_arith)
    (Ulp_inclusion formula-decl nil interval_ulp nil)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (Add const-decl "Interval" interval interval_arith)
    (Div const-decl "Interval" interval interval_arith)
    (Ulp const-decl "Interval" interval_ulp nil)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Floor const-decl "Interval" interval interval_arith)
    (Add_inclusion formula-decl nil interval interval_arith)
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (Inclusion2? const-decl "bool" interval interval_arith))
   nil
   (AEB_FLR_inclusion_j subtype "bbiadp_flr.aebounddp_flr_ia"
    "(interval.Inclusion2?(interval.Any?, interval.pre1to2b(interval.NonNeg?), bbiadp_flr.aebounddp_flr_safe))")))
 (AEB_FLR_fundmental_j 0
  (AEB_FLR_fundmental_j-2 nil 3699285671
   ("" (prove-fundamental-judgement) nil nil)
   ((aebounddp_flr_ia const-decl "Interval" bbiadp_flr nil)
    (<< const-decl "bool" interval interval_arith)
    (Ge const-decl "bool" interval interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Add const-decl "Interval" interval interval_arith)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Floor const-decl "Interval" interval interval_arith)
    (Sub const-decl "Interval" interval interval_arith)
    (Sub_fundamental formula-decl nil interval interval_arith)
    (Floor_fundamental formula-decl nil interval interval_arith)
    (Add_fundamental formula-decl nil interval interval_arith)
    (Abs_fundamental formula-decl nil interval interval_arith)
    (Proper_Abs application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Sub application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Floor application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (PRED type-eq-decl nil defined_types nil)
    (Precondition? const-decl "bool" interval interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (Any_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (AEB_FLR_inclusion_j name-judgement
     "(Inclusion2?(Any?, pre1to2b(NonNeg?), aebounddp_flr_safe))"
     bbiadp_flr nil)
    (Fundamental2? const-decl "bool" interval interval_arith))
   nil
   (AEB_FLR_fundmental_j subtype "bbiadp_flr.aebounddp_flr_ia"
    "(interval.Fundamental2?(interval.Any?, interval.pre1to2b(interval.NonNeg?)))"))
  (AEB_FLR_fundmental_j-1 nil 3684847068
   ("" (expand "Fundamental2?")
    (("" (skeep)
      (("" (typepred "Y")
        (("" (assert)
          (("" (expand "aebounddp_flr_ia")
            (("" (lift-if)
              (("" (split)
                (("1" (flatten)
                  (("1" (use "Add_fundamental")
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (split)
                          (("1" (use "Add_fundamental")
                            (("1" (assert) nil nil)) nil)
                           ("2" (use "Div_fundamental")
                            (("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (split)
                                  (("1"
                                    (use "Ulp_proper")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (use "Ulp_fundamental")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (use "Add_fundamental")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (use
                                                   "Abs_fundamental")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (use
                                                         "Floor_fundamental")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "Add_fundamental")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (eval-formula) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (hide 2)
                    (("2" (hide -2)
                      (("2" (use "NonNeg_Incl")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NonNeg_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (NonNeg_Incl formula-decl nil interval interval_arith)
    (Proper_Floor application-judgement "ProperInterval" interval
     interval_arith)
    (Proper_Abs application-judgement "ProperInterval" interval
     interval_arith)
    (r2i_Pos application-judgement "(Pos?)" interval interval_arith)
    (r2i_Nneg application-judgement "(NonNeg?)" interval
     interval_arith)
    (Proper_Add application-judgement "ProperInterval" interval
     interval_arith)
    (Incl_reflx formula-decl nil interval interval_arith)
    (Zeroless_Precondition name-judgement "(Precondition?)" interval
     interval_arith)
    (Ulp_proper formula-decl nil interval_ulp nil)
    (Abs_fundamental formula-decl nil interval interval_arith)
    (Floor_fundamental formula-decl nil interval interval_arith)
    (Ulp_fundamental formula-decl nil interval_ulp nil)
    (Div_fundamental formula-decl nil interval interval_arith)
    (Add const-decl "Interval" interval interval_arith)
    (Proper? const-decl "bool" interval interval_arith)
    (ProperInterval type-eq-decl nil interval interval_arith)
    (Div const-decl "Interval" interval interval_arith)
    (Ulp const-decl "Interval" interval_ulp nil)
    (Abs const-decl "(NonNeg?)" interval interval_arith)
    (Floor const-decl "Interval" interval interval_arith)
    (Add_fundamental formula-decl nil interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Precondition? const-decl "bool" interval interval_arith)
    (Precondition2? const-decl "bool" interval interval_arith)
    (pre1to2b const-decl "(Precondition2?)" interval interval_arith)
    (NonNeg? const-decl "bool" interval interval_arith)
    (Any? const-decl "bool" interval interval_arith)
    (Fundamental2? const-decl "bool" interval interval_arith))
   nil
   (AEB_FLR_fundmental_j subtype "bbiadp_flr.aebounddp_flr_ia"
    "(interval.Fundamental2?(interval.Any?, interval.pre1to2b(interval.NonNeg?)))")))
 (AEB_FLR_TCC1 0
  (AEB_FLR_TCC1-1 nil 3684059180 ("" (subtype-tcc) nil nil)
   ((AEB_FLR_fundmental_j name-judgement
     "(Fundamental2?(Any?, pre1to2b(NonNeg?)))" bbiadp_flr nil)
    (AEB_FLR_inclusion_j name-judgement
     "(Inclusion2?(Any?, pre1to2b(NonNeg?), aebounddp_flr_safe))"
     bbiadp_flr nil))
   nil
   (AEB_FLR subtype "bbiadp_flr.aebounddp_flr_ia"
    "{F: [[interval.Interval, interval.Interval] -> interval.Interval] | booleans.AND(interval.Inclusion2?(interval.Any?, interval.pre1to2b(interval.NonNeg?), bbiadp_flr.aebounddp_flr_safe)(F), interval.Fundamental2?(interval.Any?, interval.pre1to2b(interval.NonNeg?))(F))}"))))

