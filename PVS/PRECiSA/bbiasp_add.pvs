bbiasp_add: theory
begin

  importing interval_ulp_sp
  importing float_bounded_axiomatic@aerr_ulp__single

  R1,E1,R2,E2: var Interval

  aeboundsp_add_ia(R1,E1,R2,E2): Interval =
    if NonNeg?(E1) and NonNeg?(E2)
    then Add(Add(E1,E2),Div(Ulp_sp(Add(Add(Abs(Add(R1,R2)),E1),E2)),[|2|]))
    else EmptyInterval
    endif

  re1,re2,re3,re4: var RealExpr
  x1,x2,x3,x4: var real

  aeboundsp_add_safe(x1,x2,x3,x4): real =
    if x2 >= 0 and x4 >= 0
    then aerr_ulp_add(x1,x2,x3,x4)
    else 1 endif

  %|-   AEB_ADD_inclusion_j : PROOF
  %|- (prove-inclusion-judgement)
  %|- QED   AEB_ADD_inclusion_j
  AEB_ADD_inclusion_j: judgement
    aeboundsp_add_ia
    has_type (Inclusion4?( Any?,
    	     		   pre1to2b(NonNeg?),
			   Any3?,
			   pre1to4d(NonNeg?),
			   aeboundsp_add_safe ))

  AEB_ADD_fundmental_j: judgement
    aeboundsp_add_ia
    has_type (Fundamental4?(Any?,pre1to2b(NonNeg?), Any3?,pre1to4d(NonNeg?)))

%|- AEB_ADD_fundmental_j : PROOF
%|- (prove-fundamental-judgement)
%|- QED AEB_ADD_fundmental_j

  AEB_ADD_j: judgement
    aeboundsp_add_ia
    has_type {F: [[Interval, Interval, Interval, Interval] -> Interval] |
             	   Inclusion4?( Any?,
    	     		   	pre1to2b(NonNeg?),
			   	Any3?,
			   	pre1to4d(NonNeg?),
			   	aeboundsp_add_safe ) (F)
                   AND Fundamental4?( Any?, pre1to2b(NonNeg?), Any3?,
		       		      pre1to4d(NonNeg?) ) (F)}

  AEB_ADD(re1,re2,re3,re4):  RealExpr =
    FUN4(Any?,pre1to2b(NonNeg?),Any3?,pre1to4d(NonNeg?),
	 aeboundsp_add_safe,
	 aeboundsp_add_ia,
	 re1,re2,re3,re4)

end bbiasp_add
