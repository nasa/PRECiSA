bbiasp_ln: THEORY
BEGIN

  importing interval_arith@more_interval_props
  importing more_real_props
  importing interval_ulp_sp
  importing float_bounded_axiomatic@aerr_ulp__single
  importing interval_arith@interval_lnexp
  importing interval_arith@interval_props

  R,E: VAR Interval
  n  : VAR nat

  aeb_lgn_pre2(R1,E1:Interval): bool =
	   NonNeg?(E1) AND
	   Proper?(R1) AND
	   Proper?(E1) AND
           Pos?(Sub(R1,E1))

  aeb_lgn_pre2_is_enough_for_aeboundsp_ln_ia_tccs: LEMMA
    FORALL(R1:ProperInterval,E1:ProperInterval | NonNeg?(E1)):
      Pos?(Sub(R1,E1)) IMPLIES (Pos?(R1) AND Pos?(Sub([|1|],Div(E1,R1))))

  aeb_lgn_pre2_predondition_j: JUDGEMENT
    aeb_lgn_pre2 HAS_TYPE (Precondition2?)

  aeboundsp_ln_ia(n)(R,E): Interval =
    If aeb_lgn_pre2(R,E)
    THEN Add(Neg(Ln(n)(Sub([|1|],Div(E,R)))),
    	     Div(Ulp_sp(Max(Abs(Ln(n)(Sub(R,E))),Abs(Ln(n)(Add(R,E))))),[|2|]))
    ELSE EmptyInterval
    ENDIF

  re1,re2: VAR RealExpr

  x1,x2: VAR real

  aeboundsp_ln_safe(r,e: real): real =
    IF e >= 0 AND 0<r-e
    THEN aerr_ulp_ln(r,e)
    ELSE 1 ENDIF

  AEB_LN_inclusion_j: JUDGEMENT
    aeboundsp_ln_ia(n)
    HAS_TYPE (Inclusion2?(Any?,aeb_lgn_pre2,aeboundsp_ln_safe))

%|- AEB_LN_inclusion_j : PROOF
%|- (then
%|-  (install-rewrites :rewrites
%|-   ("aeb_lgn_pre2"
%|-    "one_minus_x_over_y_ge_0"
%|-    "ia_pos_x_minus_nneg_y_implies_pos_x"
%|-    "ia_pos_x_minus_nneg_y_implies_pos_1_minus_y_over_x"))
%|-  (branch (prove-inclusion-judgement)
%|-   ((then (assert) (assert) (grind)))))
%|- QED AEB_LN_inclusion_j

  AEB_LN_fundmental_j: JUDGEMENT
    aeboundsp_ln_ia(n)
    HAS_TYPE (Fundamental2?(Any?,aeb_lgn_pre2))

  AEB_LN(n)(re1,re2):  RealExpr =
    FUN2(Any?,
         aeb_lgn_pre2,
	 aeboundsp_ln_safe,
	 aeboundsp_ln_ia(n),
	 re1,re2)

END bbiasp_ln
