cd2d_double: THEORY
BEGIN
IMPORTING float@aerr754sp

% @fp-function
% @fp-range A in [-1000,1000], B in [-1000,1000]
max (A,B: double):double = IF (A>B) THEN A ELSE B ENDIF

% @fp-function
% @fp-range A in [-1000,1000], B in [-1000,1000]
min (A,B: double):double = IF (A<B) THEN A ELSE B ENDIF

% @fp-function
% @fp-range Sx in [1,10], Sy in [1,10], Vx in [1,10], Vy in [1,10], T in [0,20]
tau (Sx, Sy, Vx, Vy, T: double): double =
   min(max(0,-(Sx*Vx + Sy*Vy)),(T * (Vx*Vx + Vy*Vy)))

% @fp-function
% @fp-range Sx in [1,10], Sy in [1,10], Vx in [1,10], Vy in [1,10], D in [1,5], T in [0,20]
omega (Sx, Sy, Vx, Vy, D, T: double): double =
   IF Sx*Sx + Sy*Sy = D*D
   THEN Sx*Vx + Sy*Vy
   ELSE
      LET TauSV = tau(Sx, Sy, Vx, Vy, T) IN
      ((Vx*Vx + Vy*Vy) * (Sx*Sx + Sy*Sy) +
               2*TauSV +TauSV*TauSV)
               - (D*D* (Vx*Vx + Vy*Vy))
   ENDIF

% @fp-function
% @fp-range Sx in [1,10], Sy in [1,10]
los (Sx, Sy: double): double = sqrt((Sx * Sx) + (Sy * Sy))

% @fp-function
% @fp-range S0x in [1,10], S0y in [1,10], V0x in [1,10], V0y in [1,10], S1x in [1,10], S1y in [1,10], V1x in [1,10], V1y in [1,10], D in [1,5], T in [0,20]
cd2d (S0x, S0y, V0x, V0y, S1x, S1y, V1x, V1y, D, T: double): double =
   LET Sx = S0x - S1x IN
   LET Sy = S0y - S1y IN
   LET Vx = V0x - V1x IN
   LET Vy = V0y - V1y IN
   IF (los(Sx,Sy) < D)
   THEN 1
   ELSE IF (omega(Sx,Sy,Vx,Vy,D,T) < 0)
      THEN 1
      ELSE 0
      ENDIF
   ENDIF

END cd2d_double