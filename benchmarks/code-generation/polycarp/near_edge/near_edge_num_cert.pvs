% This file is automatically generated by PRECiSA 

% 2020-06-07 19:26:12.630967 UTC
% maxDepth: 7 , prec: 10^-14

near_edge_num_cert: THEORY
BEGIN
IMPORTING cert_near_edge, PRECiSA@bbiasp, PRECiSA@bbiadp, PRECiSA@strategies 

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

% Floating-Point Results: -1, 1
% Real Results: -1, 1
% Control Flow:  Stable
sign_fp_c_0 : LEMMA
FORALL(r_x: real, x: unb_double):
abs(DtoR(x) - r_x)<=ulp_dp(r_x)/2
AND ((NOT((r_x >= 0)) AND NOT((x >= ItoD(0)))) OR ((r_x >= 0) AND (x >= ItoD(0))))
AND r_x ## [|-10000,10000|]
IMPLIES
abs(sign_fp(x) - sign(r_x))<=0 / 1

%|- sign_fp_c_0 : PROOF
%|- (prove-concrete-lemma sign_fp_0 14 7)
%|- QED

sign_fp_err_0 : LEMMA
FORALL(r_x: real, x: unb_double):
abs(DtoR(x) - r_x)<=ulp_dp(r_x)/2
AND ((NOT((r_x >= 0)) AND NOT((x >= ItoD(0)))) OR ((r_x >= 0) AND (x >= ItoD(0))))
AND r_x ## [|-10000,10000|]
IMPLIES
max((0 / 1), (0 / 1))<=0 / 1

% Floating-Point Results: Dadd(Dadd(Dmul(Dmul(a, x), x), Dmul(b, x)), c)
% Real Results: ((((r_a * r_x) * r_x) + (r_b * r_x)) + r_c)
% Control Flow:  Stable
quadratic_fp_c_0 : LEMMA
FORALL(r_a, r_b, r_c, r_x: real, a: unb_double, b: unb_double, c: unb_double, x: unb_double):
abs(DtoR(a) - r_a)<=ulp_dp(r_a)/2 AND abs(DtoR(b) - r_b)<=ulp_dp(r_b)/2 AND abs(DtoR(c) - r_c)<=ulp_dp(r_c)/2 AND abs(DtoR(x) - r_x)<=ulp_dp(r_x)/2
AND ((TRUE AND TRUE))
AND r_a ## [|-10000,10000|] AND  r_b ## [|-10000,10000|] AND  r_c ## [|-10000,10000|] AND  r_x ## [|-10000,10000|]
IMPLIES
abs(DtoR(quadratic_fp(a, b, c, x)) - quadratic(r_a, r_b, r_c, r_x))<=2446431763824641 / 4611686018427387904

%|- quadratic_fp_c_0 : PROOF
%|- (prove-concrete-lemma quadratic_fp_0 14 7)
%|- QED

quadratic_fp_err_0 : LEMMA
FORALL(r_a, r_b, r_c, r_x: real, a: unb_double, b: unb_double, c: unb_double, x: unb_double):
abs(DtoR(a) - r_a)<=ulp_dp(r_a)/2 AND abs(DtoR(b) - r_b)<=ulp_dp(r_b)/2 AND abs(DtoR(c) - r_c)<=ulp_dp(r_c)/2 AND abs(DtoR(x) - r_x)<=ulp_dp(r_x)/2
AND ((TRUE AND TRUE))
AND r_a ## [|-10000,10000|] AND  r_b ## [|-10000,10000|] AND  r_c ## [|-10000,10000|] AND  r_x ## [|-10000,10000|]
IMPLIES
aebounddp_add((((r_a * r_x) * r_x) + (r_b * r_x)), aebounddp_add(((r_a * r_x) * r_x), aebounddp_mul((r_a * r_x), aebounddp_mul(r_a, ulp_dp(r_a)/2, r_x, ulp_dp(r_x)/2), r_x, ulp_dp(r_x)/2), (r_b * r_x), aebounddp_mul(r_b, ulp_dp(r_b)/2, r_x, ulp_dp(r_x)/2)), r_c, ulp_dp(r_c)/2)<=2446431763824641 / 4611686018427387904

% Floating-Point Results:
% Real Results:
% Control Flow:  Stable
quad_min_le_D_int_fp_c_0 : LEMMA
FORALL(r_ap, r_b, r_c, r_xl, r_xu, r_D: real, ap: unb_double, b: unb_double, c: unb_double, xl: unb_double, xu: unb_double, D: unb_double):
abs(DtoR(ap) - r_ap)<=ulp_dp(r_ap)/2 AND abs(DtoR(b) - r_b)<=ulp_dp(r_b)/2 AND abs(DtoR(c) - r_c)<=ulp_dp(r_c)/2 AND abs(DtoR(xl) - r_xl)<=ulp_dp(r_xl)/2 AND abs(DtoR(xu) - r_xu)<=ulp_dp(r_xu)/2 AND abs(DtoR(D) - r_D)<=ulp_dp(r_D)/2
AND ((TRUE AND TRUE))
AND r_ap ## [|-10000,10000|] AND  r_b ## [|-10000,10000|] AND  r_c ## [|-10000,10000|] AND  r_xl ## [|0,0|] AND  r_xu ## [|1,1|] AND  r_D ## [|0,0|]
IMPLIES
abs(quad_min_le_D_int_fp(ap, b, c, xl, xu, D) - quad_min_le_D_int(r_ap, r_b, r_c, r_xl, r_xu, r_D))<=0 / 1

%|- quad_min_le_D_int_fp_c_0 : PROOF
%|- (prove-concrete-lemma quad_min_le_D_int_fp_0 14 7)
%|- QED

quad_min_le_D_int_fp_err_0 : LEMMA
FORALL(r_ap, r_b, r_c, r_xl, r_xu, r_D: real, ap: unb_double, b: unb_double, c: unb_double, xl: unb_double, xu: unb_double, D: unb_double):
abs(DtoR(ap) - r_ap)<=ulp_dp(r_ap)/2 AND abs(DtoR(b) - r_b)<=ulp_dp(r_b)/2 AND abs(DtoR(c) - r_c)<=ulp_dp(r_c)/2 AND abs(DtoR(xl) - r_xl)<=ulp_dp(r_xl)/2 AND abs(DtoR(xu) - r_xu)<=ulp_dp(r_xu)/2 AND abs(DtoR(D) - r_D)<=ulp_dp(r_D)/2
AND ((TRUE AND TRUE))
AND r_ap ## [|-10000,10000|] AND  r_b ## [|-10000,10000|] AND  r_c ## [|-10000,10000|] AND  r_xl ## [|0,0|] AND  r_xu ## [|1,1|] AND  r_D ## [|0,0|]
IMPLIES
0<=0 / 1

% Floating-Point Results:
% Real Results:
% Control Flow:  Stable
near_edge_fp_c_0 : LEMMA
FORALL(r_segstart_x, r_segstart_y, r_segend_x, r_segend_y, r_s_x, r_s_y: real, segstart_x: unb_double, segstart_y: unb_double, segend_x: unb_double, segend_y: unb_double, s_x: unb_double, s_y: unb_double):
abs(DtoR(segstart_x) - r_segstart_x)<=ulp_dp(r_segstart_x)/2 AND abs(DtoR(segstart_y) - r_segstart_y)<=ulp_dp(r_segstart_y)/2 AND abs(DtoR(segend_x) - r_segend_x)<=ulp_dp(r_segend_x)/2 AND abs(DtoR(segend_y) - r_segend_y)<=ulp_dp(r_segend_y)/2 AND abs(DtoR(s_x) - r_s_x)<=ulp_dp(r_s_x)/2 AND abs(DtoR(s_y) - r_s_y)<=ulp_dp(r_s_y)/2
AND ((((((abs((r_s_y - r_segstart_y)) > 0) AND (abs((r_s_y - r_segend_y)) > 0)) AND (sign((r_s_y - r_segend_y)) = sign((r_s_y - r_segstart_y)))) AND NOT((((abs((r_s_x - r_segstart_x)) > 0) AND (abs((r_s_x - r_segend_x)) > 0)) AND (sign((r_s_x - r_segend_x)) = sign((r_s_x - r_segstart_x)))))) AND ((((Dabs(Dsub(s_y, segstart_y)) > ItoD(0)) AND (Dabs(Dsub(s_y, segend_y)) > ItoD(0))) AND (sign(Dsub(s_y, segend_y)) = sign(Dsub(s_y, segstart_y)))) AND NOT((((Dabs(Dsub(s_x, segstart_x)) > ItoD(0)) AND (Dabs(Dsub(s_x, segend_x)) > ItoD(0))) AND (sign(Dsub(s_x, segend_x)) = sign(Dsub(s_x, segstart_x))))))) OR ((((abs((r_s_x - r_segstart_x)) > 0) AND (abs((r_s_x - r_segend_x)) > 0)) AND (sign((r_s_x - r_segend_x)) = sign((r_s_x - r_segstart_x)))) AND (((Dabs(Dsub(s_x, segstart_x)) > ItoD(0)) AND (Dabs(Dsub(s_x, segend_x)) > ItoD(0))) AND (sign(Dsub(s_x, segend_x)) = sign(Dsub(s_x, segstart_x))))) OR ((NOT((((abs((r_s_y - r_segstart_y)) > 0) AND (abs((r_s_y - r_segend_y)) > 0)) AND (sign((r_s_y - r_segend_y)) = sign((r_s_y - r_segstart_y))))) AND NOT((((abs((r_s_x - r_segstart_x)) > 0) AND (abs((r_s_x - r_segend_x)) > 0)) AND (sign((r_s_x - r_segend_x)) = sign((r_s_x - r_segstart_x)))))) AND (NOT((((Dabs(Dsub(s_y, segstart_y)) > ItoD(0)) AND (Dabs(Dsub(s_y, segend_y)) > ItoD(0))) AND (sign(Dsub(s_y, segend_y)) = sign(Dsub(s_y, segstart_y))))) AND NOT((((Dabs(Dsub(s_x, segstart_x)) > ItoD(0)) AND (Dabs(Dsub(s_x, segend_x)) > ItoD(0))) AND (sign(Dsub(s_x, segend_x)) = sign(Dsub(s_x, segstart_x))))))))
AND r_segstart_x ## [|-10000,10000|] AND  r_segstart_y ## [|-10000,10000|] AND  r_segend_x ## [|-10000,10000|] AND  r_segend_y ## [|-10000,10000|] AND  r_s_x ## [|-10000,10000|] AND  r_s_y ## [|-10000,10000|]
IMPLIES
abs(near_edge_fp(segstart_x, segstart_y, segend_x, segend_y, s_x, s_y) - near_edge(r_segstart_x, r_segstart_y, r_segend_x, r_segend_y, r_s_x, r_s_y))<=0 / 1

%|- near_edge_fp_c_0 : PROOF
%|- (prove-concrete-lemma near_edge_fp_0 14 7)
%|- QED

near_edge_fp_err_0 : LEMMA
FORALL(r_segstart_x, r_segstart_y, r_segend_x, r_segend_y, r_s_x, r_s_y: real, segstart_x: unb_double, segstart_y: unb_double, segend_x: unb_double, segend_y: unb_double, s_x: unb_double, s_y: unb_double):
abs(DtoR(segstart_x) - r_segstart_x)<=ulp_dp(r_segstart_x)/2 AND abs(DtoR(segstart_y) - r_segstart_y)<=ulp_dp(r_segstart_y)/2 AND abs(DtoR(segend_x) - r_segend_x)<=ulp_dp(r_segend_x)/2 AND abs(DtoR(segend_y) - r_segend_y)<=ulp_dp(r_segend_y)/2 AND abs(DtoR(s_x) - r_s_x)<=ulp_dp(r_s_x)/2 AND abs(DtoR(s_y) - r_s_y)<=ulp_dp(r_s_y)/2
AND ((((((abs((r_s_y - r_segstart_y)) > 0) AND (abs((r_s_y - r_segend_y)) > 0)) AND (sign((r_s_y - r_segend_y)) = sign((r_s_y - r_segstart_y)))) AND NOT((((abs((r_s_x - r_segstart_x)) > 0) AND (abs((r_s_x - r_segend_x)) > 0)) AND (sign((r_s_x - r_segend_x)) = sign((r_s_x - r_segstart_x)))))) AND ((((Dabs(Dsub(s_y, segstart_y)) > ItoD(0)) AND (Dabs(Dsub(s_y, segend_y)) > ItoD(0))) AND (sign(Dsub(s_y, segend_y)) = sign(Dsub(s_y, segstart_y)))) AND NOT((((Dabs(Dsub(s_x, segstart_x)) > ItoD(0)) AND (Dabs(Dsub(s_x, segend_x)) > ItoD(0))) AND (sign(Dsub(s_x, segend_x)) = sign(Dsub(s_x, segstart_x))))))) OR ((((abs((r_s_x - r_segstart_x)) > 0) AND (abs((r_s_x - r_segend_x)) > 0)) AND (sign((r_s_x - r_segend_x)) = sign((r_s_x - r_segstart_x)))) AND (((Dabs(Dsub(s_x, segstart_x)) > ItoD(0)) AND (Dabs(Dsub(s_x, segend_x)) > ItoD(0))) AND (sign(Dsub(s_x, segend_x)) = sign(Dsub(s_x, segstart_x))))) OR ((NOT((((abs((r_s_y - r_segstart_y)) > 0) AND (abs((r_s_y - r_segend_y)) > 0)) AND (sign((r_s_y - r_segend_y)) = sign((r_s_y - r_segstart_y))))) AND NOT((((abs((r_s_x - r_segstart_x)) > 0) AND (abs((r_s_x - r_segend_x)) > 0)) AND (sign((r_s_x - r_segend_x)) = sign((r_s_x - r_segstart_x)))))) AND (NOT((((Dabs(Dsub(s_y, segstart_y)) > ItoD(0)) AND (Dabs(Dsub(s_y, segend_y)) > ItoD(0))) AND (sign(Dsub(s_y, segend_y)) = sign(Dsub(s_y, segstart_y))))) AND NOT((((Dabs(Dsub(s_x, segstart_x)) > ItoD(0)) AND (Dabs(Dsub(s_x, segend_x)) > ItoD(0))) AND (sign(Dsub(s_x, segend_x)) = sign(Dsub(s_x, segstart_x))))))))
AND r_segstart_x ## [|-10000,10000|] AND  r_segstart_y ## [|-10000,10000|] AND  r_segend_x ## [|-10000,10000|] AND  r_segend_y ## [|-10000,10000|] AND  r_s_x ## [|-10000,10000|] AND  r_s_y ## [|-10000,10000|]
IMPLIES
max(max(0, 0), 0)<=0 / 1

END near_edge_num_cert