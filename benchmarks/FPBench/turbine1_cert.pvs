% This file is automatically generated by PRECiSA 

turbine1_cert: THEORY
BEGIN
IMPORTING PRECiSA@strategies
IMPORTING axm_bnd@aerr_ulp__double
IMPORTING axm_bnd@aerr_ulp__single
IMPORTING turbine1
IMPORTING turbine1_real

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

turbine1_0 : LEMMA
FORALL(e_V, e_W, e_R: nonneg_real, r_V, r_W, r_R: real, V: double, W: double, R: double):
int_in_range?(1) AND int_in_range?(2) AND int_in_range?(3) AND finite?((1 / 8)) AND finite?((9 / 2)) AND finite?(R) AND finite?(V) AND finite?(W) AND finite?(Dadd(3, Ddiv(2, Dmul(R, R)))) AND finite?(Dsub(1, V)) AND finite?(Dsub(3, Dmul(2, V))) AND finite?(Dsub(Dadd(3, Ddiv(2, Dmul(R, R))), Ddiv(Dmul(Dmul((1 / 8), Dsub(3, Dmul(2, V))), Dmul(Dmul(Dmul(W, W), R), R)), Dsub(1, V)))) AND finite?(Dsub(Dsub(Dadd(3, Ddiv(2, Dmul(R, R))), Ddiv(Dmul(Dmul((1 / 8), Dsub(3, Dmul(2, V))), Dmul(Dmul(Dmul(W, W), R), R)), Dsub(1, V))), (9 / 2))) AND finite?(Dmul(2, V)) AND finite?(Dmul((1 / 8), Dsub(3, Dmul(2, V)))) AND finite?(Dmul(R, R)) AND finite?(Dmul(W, W)) AND finite?(Dmul(Dmul((1 / 8), Dsub(3, Dmul(2, V))), Dmul(Dmul(Dmul(W, W), R), R))) AND finite?(Dmul(Dmul(W, W), R)) AND finite?(Dmul(Dmul(Dmul(W, W), R), R)) AND finite?(Ddiv(2, Dmul(R, R))) AND finite?(Ddiv(Dmul(Dmul((1 / 8), Dsub(3, Dmul(2, V))), Dmul(Dmul(Dmul(W, W), R), R)), Dsub(1, V))) AND
abs(DtoR(V) - r_V)<=e_V AND abs(DtoR(W) - r_W)<=e_W AND abs(DtoR(R) - r_R)<=e_R
AND (((TRUE AND (((r_R * r_R) /= 0) AND ((1 < (ieee754dp_prec - Fexp(V))) AND ((1 - r_V) /= 0)))) AND (TRUE AND ((Dmul(R, R) /= ItoD(0)) AND (Dsub(1, V) /= ItoD(0))))))
IMPLIES
abs(DtoR(turbine1(V, W, R)) - turbine1_real(r_V, r_W, r_R)) <= aerr_ulp_dp_sub(((3 + div_safe(2, (r_R * r_R))) - div_safe((((1 / 8) * (3 - (2 * r_V))) * (((r_W * r_W) * r_R) * r_R)), (1 - r_V))), aerr_ulp_dp_sub((3 + div_safe(2, (r_R * r_R))), aerr_ulp_dp_add(3, (0 / 1), div_safe(2, (r_R * r_R)), aerr_ulp_dp_div(2, (0 / 1), (r_R * r_R), aerr_ulp_dp_mul(r_R, e_R, r_R, e_R))), div_safe((((1 / 8) * (3 - (2 * r_V))) * (((r_W * r_W) * r_R) * r_R)), (1 - r_V)), aerr_ulp_dp_div((((1 / 8) * (3 - (2 * r_V))) * (((r_W * r_W) * r_R) * r_R)), aerr_ulp_dp_mul(((1 / 8) * (3 - (2 * r_V))), aerr_ulp_dp_mul((1 / 8), (0 / 1), (3 - (2 * r_V)), aerr_ulp_dp_sub(3, (0 / 1), (2 * r_V), aerr_ulp_dp_mul_p2l(1, e_V))), (((r_W * r_W) * r_R) * r_R), aerr_ulp_dp_mul(((r_W * r_W) * r_R), aerr_ulp_dp_mul((r_W * r_W), aerr_ulp_dp_mul(r_W, e_W, r_W, e_W), r_R, e_R), r_R, e_R)), (1 - r_V), aerr_ulp_dp_sub(1, (0 / 1), r_V, e_V))), (9 / 2), (0 / 1))


%|- turbine1_0: PROOF
%|- (precisa)
%|- QED


END turbine1_cert