% This file is automatically generated by PRECiSA 

turbine2_cert: THEORY
BEGIN
IMPORTING PRECiSA@strategies
IMPORTING float_bounded_axiomatic@aerr_ulp__double
IMPORTING float_bounded_axiomatic@aerr_ulp__single
IMPORTING turbine2
IMPORTING turbine2_real

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

turbine2_0_error (e_V, e_W, e_R: nonneg_real, r_V, r_W, r_R: real): nonneg_real = aerr_ulp_dp_sub(((6 * r_V) - div_safe((((1 / 2) * r_V) * (((r_W * r_W) * r_R) * r_R)), (1 - r_V))), aerr_ulp_dp_sub((6 * r_V), aerr_ulp_dp_mul(6, (0 / 1), r_V, e_V), div_safe((((1 / 2) * r_V) * (((r_W * r_W) * r_R) * r_R)), (1 - r_V)), aerr_ulp_dp_div((((1 / 2) * r_V) * (((r_W * r_W) * r_R) * r_R)), aerr_ulp_dp_mul(((1 / 2) * r_V), aerr_ulp_dp_mul((1 / 2), (0 / 1), r_V, e_V), (((r_W * r_W) * r_R) * r_R), aerr_ulp_dp_mul(((r_W * r_W) * r_R), aerr_ulp_dp_mul((r_W * r_W), aerr_ulp_dp_mul(r_W, e_W, r_W, e_W), r_R, e_R), r_R, e_R)), (1 - r_V), aerr_ulp_dp_sub(1, (0 / 1), r_V, e_V))), (5 / 2), (0 / 1))


turbine2_0 : LEMMA
FORALL(e_V, e_W, e_R: nonneg_real, r_V, r_W, r_R: real, V: double, W: double, R: double):
int_in_range?_double(1) AND int_in_range?_double(6) AND finite?_double((1 / 2)) AND finite?_double((5 / 2)) AND finite?_double(R) AND finite?_double(V) AND finite?_double(W) AND finite?_double(Dsub(1, V)) AND finite?_double(Dsub(Dsub(Dmul(6, V), Ddiv(Dmul(Dmul((1 / 2), V), Dmul(Dmul(Dmul(W, W), R), R)), Dsub(1, V))), (5 / 2))) AND finite?_double(Dsub(Dmul(6, V), Ddiv(Dmul(Dmul((1 / 2), V), Dmul(Dmul(Dmul(W, W), R), R)), Dsub(1, V)))) AND finite?_double(Dmul(6, V)) AND finite?_double(Dmul((1 / 2), V)) AND finite?_double(Dmul(W, W)) AND finite?_double(Dmul(Dmul((1 / 2), V), Dmul(Dmul(Dmul(W, W), R), R))) AND finite?_double(Dmul(Dmul(W, W), R)) AND finite?_double(Dmul(Dmul(Dmul(W, W), R), R)) AND finite?_double(Ddiv(Dmul(Dmul((1 / 2), V), Dmul(Dmul(Dmul(W, W), R), R)), Dsub(1, V)))
AND
abs(DtoR(V) - r_V)<=e_V AND abs(DtoR(W) - r_W)<=e_W AND abs(DtoR(R) - r_R)<=e_R
AND (((TRUE AND ((1 - r_V) /= 0)) AND (TRUE AND (Dsub(1, V) /= ItoD(0)))))
IMPLIES
abs(DtoR(turbine2(V, W, R)) - turbine2_real(r_V, r_W, r_R)) <= turbine2_0_error(e_V, e_W, e_R, r_V, r_W, r_R)


%|- turbine2_0: PROOF
%|- (precisa)
%|- QED


turbine2_error(e_V, e_W, e_R: nonneg_real, r_V, r_W, r_R: real): nonneg_real = turbine2_0_error(e_V, e_W, e_R, r_V, r_W, r_R)

END turbine2_cert