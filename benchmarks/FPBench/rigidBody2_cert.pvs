% This file is automatically generated by PRECiSA 

rigidBody2_cert: THEORY
BEGIN
IMPORTING PRECiSA@strategies
IMPORTING axm_bnd@aerr_ulp__double
IMPORTING axm_bnd@aerr_ulp__single
IMPORTING rigidBody2
IMPORTING rigidBody2_real

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

rigidBody2_0 : LEMMA
FORALL(e_X1, e_X2, e_X3: nonneg_real, r_X1, r_X2, r_X3: real, X1: double, X2: double, X3: double):
int_in_range?(2) AND int_in_range?(3) AND finite?(X1) AND finite?(X2) AND finite?(X3) AND finite?(Dadd(Dmul(Dmul(Dmul(2, X1), X2), X3), Dmul(Dmul(3, X3), X3))) AND finite?(Dsub(Dadd(Dmul(Dmul(Dmul(2, X1), X2), X3), Dmul(Dmul(3, X3), X3)), Dmul(Dmul(Dmul(X2, X1), X2), X3))) AND finite?(Dsub(Dsub(Dadd(Dmul(Dmul(Dmul(2, X1), X2), X3), Dmul(Dmul(3, X3), X3)), Dmul(Dmul(Dmul(X2, X1), X2), X3)), Dmul(Dmul(3, X3), X3))) AND finite?(Dsub(Dsub(Dsub(Dadd(Dmul(Dmul(Dmul(2, X1), X2), X3), Dmul(Dmul(3, X3), X3)), Dmul(Dmul(Dmul(X2, X1), X2), X3)), Dmul(Dmul(3, X3), X3)), X2)) AND finite?(Dmul(2, X1)) AND finite?(Dmul(3, X3)) AND finite?(Dmul(X2, X1)) AND finite?(Dmul(Dmul(2, X1), X2)) AND finite?(Dmul(Dmul(3, X3), X3)) AND finite?(Dmul(Dmul(X2, X1), X2)) AND finite?(Dmul(Dmul(Dmul(2, X1), X2), X3)) AND finite?(Dmul(Dmul(Dmul(X2, X1), X2), X3)) AND
abs(DtoR(X1) - r_X1)<=e_X1 AND abs(DtoR(X2) - r_X2)<=e_X2 AND abs(DtoR(X3) - r_X3)<=e_X3
AND (((TRUE AND (1 < (ieee754dp_prec - Fexp(X1)))) AND (TRUE AND TRUE)))
IMPLIES
abs(DtoR(rigidBody2(X1, X2, X3)) - rigidBody2_real(r_X1, r_X2, r_X3)) <= aerr_ulp_dp_sub(((((((2 * r_X1) * r_X2) * r_X3) + ((3 * r_X3) * r_X3)) - (((r_X2 * r_X1) * r_X2) * r_X3)) - ((3 * r_X3) * r_X3)), aerr_ulp_dp_sub((((((2 * r_X1) * r_X2) * r_X3) + ((3 * r_X3) * r_X3)) - (((r_X2 * r_X1) * r_X2) * r_X3)), aerr_ulp_dp_sub(((((2 * r_X1) * r_X2) * r_X3) + ((3 * r_X3) * r_X3)), aerr_ulp_dp_add((((2 * r_X1) * r_X2) * r_X3), aerr_ulp_dp_mul(((2 * r_X1) * r_X2), aerr_ulp_dp_mul((2 * r_X1), aerr_ulp_dp_mul_p2l(1, e_X1), r_X2, e_X2), r_X3, e_X3), ((3 * r_X3) * r_X3), aerr_ulp_dp_mul((3 * r_X3), aerr_ulp_dp_mul(3, (0 / 1), r_X3, e_X3), r_X3, e_X3)), (((r_X2 * r_X1) * r_X2) * r_X3), aerr_ulp_dp_mul(((r_X2 * r_X1) * r_X2), aerr_ulp_dp_mul((r_X2 * r_X1), aerr_ulp_dp_mul(r_X2, e_X2, r_X1, e_X1), r_X2, e_X2), r_X3, e_X3)), ((3 * r_X3) * r_X3), aerr_ulp_dp_mul((3 * r_X3), aerr_ulp_dp_mul(3, (0 / 1), r_X3, e_X3), r_X3, e_X3)), r_X2, e_X2)


%|- rigidBody2_0: PROOF
%|- (precisa)
%|- QED


END rigidBody2_cert