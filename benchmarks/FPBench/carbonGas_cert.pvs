% This file is automatically generated by PRECiSA 

carbonGas_cert: THEORY
BEGIN
IMPORTING PRECiSA@strategies
IMPORTING float_bounded_axiomatic@aerr_ulp__double
IMPORTING float_bounded_axiomatic@aerr_ulp__single
IMPORTING carbonGas
IMPORTING carbonGas_real

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

carbonGas_0_error (e_V: nonneg_real, r_V: real): nonneg_real = LET K:real=(13806503 / 1000000000000000000000000000000),
Err_K:real=(158966299189426689359 / 158456325028528675187087900672000000000000000000000000000000)
IN LET T:real=300,
Err_T:real=(0 / 1)
IN LET A:real=(401 / 1000),
Err_A:real=(13 / 562949953421312000)
IN LET B:real=(427 / 10000000),
Err_B:real=(13123 / 11529215046068469760000000)
IN LET N:real=1000,
Err_N:real=(0 / 1)
IN LET P:real=35000000,
Err_P:real=(0 / 1)
IN aerr_ulp_dp_sub(((P + ((A * div_safe(N, r_V)) * div_safe(N, r_V))) * (r_V - (N * B))), aerr_ulp_dp_mul((P + ((A * div_safe(N, r_V)) * div_safe(N, r_V))), aerr_ulp_dp_add(P, Err_P, ((A * div_safe(N, r_V)) * div_safe(N, r_V)), aerr_ulp_dp_mul((A * div_safe(N, r_V)), aerr_ulp_dp_mul(A, Err_A, div_safe(N, r_V), aerr_ulp_dp_div(N, Err_N, r_V, e_V)), div_safe(N, r_V), aerr_ulp_dp_div(N, Err_N, r_V, e_V))), (r_V - (N * B)), aerr_ulp_dp_sub(r_V, e_V, (N * B), aerr_ulp_dp_mul(N, Err_N, B, Err_B))), (K * (N * T)), aerr_ulp_dp_mul(K, Err_K, (N * T), aerr_ulp_dp_mul(N, Err_N, T, Err_T)))


carbonGas_0 : LEMMA
FORALL(e_V: nonneg_real, r_V: real, V: double):
LET K=RtoD((13806503 / 1000000000000000000000000000000)),
T=300,
A=RtoD((401 / 1000)),
B=RtoD((427 / 10000000)),
N=1000,
P=35000000
IN (int_in_range?_double(300) AND int_in_range?_double(1000) AND int_in_range?_double(35000000) AND finite?_double(A) AND finite?_double(B) AND finite?_double(K) AND finite?_double(N) AND finite?_double(P) AND finite?_double(T) AND finite?_double(V) AND finite?_double(RtoD((13806503 / 1000000000000000000000000000000))) AND finite?_double(RtoD((427 / 10000000))) AND finite?_double(RtoD((401 / 1000))) AND finite?_double(Dadd(P, Dmul(Dmul(A, Ddiv(N, V)), Ddiv(N, V)))) AND finite?_double(Dsub(V, Dmul(N, B))) AND finite?_double(Dsub(Dmul(Dadd(P, Dmul(Dmul(A, Ddiv(N, V)), Ddiv(N, V))), Dsub(V, Dmul(N, B))), Dmul(K, Dmul(N, T)))) AND finite?_double(Dmul(A, Ddiv(N, V))) AND finite?_double(Dmul(K, Dmul(N, T))) AND finite?_double(Dmul(N, B)) AND finite?_double(Dmul(N, T)) AND finite?_double(Dmul(Dadd(P, Dmul(Dmul(A, Ddiv(N, V)), Ddiv(N, V))), Dsub(V, Dmul(N, B)))) AND finite?_double(Dmul(Dmul(A, Ddiv(N, V)), Ddiv(N, V))) AND finite?_double(Ddiv(N, V)) AND finite?_double(LET A:double=RtoD((401 / 1000))
IN LET B:double=RtoD((427 / 10000000))
IN LET N:double=1000
IN LET P:double=35000000
IN Dsub(Dmul(Dadd(P, Dmul(Dmul(A, Ddiv(N, V)), Ddiv(N, V))), Dsub(V, Dmul(N, B))), Dmul(K, Dmul(N, T)))) AND finite?_double(LET B:double=RtoD((427 / 10000000))
IN LET N:double=1000
IN LET P:double=35000000
IN Dsub(Dmul(Dadd(P, Dmul(Dmul(A, Ddiv(N, V)), Ddiv(N, V))), Dsub(V, Dmul(N, B))), Dmul(K, Dmul(N, T)))) AND finite?_double(LET K:double=RtoD((13806503 / 1000000000000000000000000000000))
IN LET T:double=300
IN LET A:double=RtoD((401 / 1000))
IN LET B:double=RtoD((427 / 10000000))
IN LET N:double=1000
IN LET P:double=35000000
IN Dsub(Dmul(Dadd(P, Dmul(Dmul(A, Ddiv(N, V)), Ddiv(N, V))), Dsub(V, Dmul(N, B))), Dmul(K, Dmul(N, T)))) AND finite?_double(LET N:double=1000
IN LET P:double=35000000
IN Dsub(Dmul(Dadd(P, Dmul(Dmul(A, Ddiv(N, V)), Ddiv(N, V))), Dsub(V, Dmul(N, B))), Dmul(K, Dmul(N, T)))) AND finite?_double(LET P:double=35000000
IN Dsub(Dmul(Dadd(P, Dmul(Dmul(A, Ddiv(N, V)), Ddiv(N, V))), Dsub(V, Dmul(N, B))), Dmul(K, Dmul(N, T)))) AND finite?_double(LET T:double=300
IN LET A:double=RtoD((401 / 1000))
IN LET B:double=RtoD((427 / 10000000))
IN LET N:double=1000
IN LET P:double=35000000
IN Dsub(Dmul(Dadd(P, Dmul(Dmul(A, Ddiv(N, V)), Ddiv(N, V))), Dsub(V, Dmul(N, B))), Dmul(K, Dmul(N, T)))))
AND
abs(DtoR(V) - r_V)<=e_V
AND (((TRUE AND ((r_V /= 0) AND (r_V /= 0))) AND (TRUE AND ((V /= ItoD(0)) AND (V /= ItoD(0))))))
IMPLIES
abs(DtoR(carbonGas(V)) - carbonGas_real(r_V)) <= carbonGas_0_error(e_V, r_V)


%|- carbonGas_0: PROOF
%|- (precisa)
%|- QED


carbonGas_error(e_V: nonneg_real, r_V: real): nonneg_real = carbonGas_0_error(e_V, r_V)

END carbonGas_cert