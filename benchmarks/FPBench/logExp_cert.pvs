% This file is automatically generated by PRECiSA 

logExp_cert: THEORY
BEGIN
IMPORTING PRECiSA@strategies
IMPORTING float_bounded_axiomatic@aerr_ulp__double
IMPORTING float_bounded_axiomatic@aerr_ulp__single
IMPORTING logExp
IMPORTING logExp_real

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

logExp_0_error (e_X: nonneg_real, r_X: real): nonneg_real = aerr_ulp_dp_ln((1 + exp(r_X)), aerr_ulp_dp_add(1, (0 / 1), exp(r_X), aerr_ulp_dp_exp(r_X, e_X)))


logExp_0 : LEMMA
FORALL(e_X: nonneg_real, r_X: real, X: double):
int_in_range?_double(1) AND finite?_double(X) AND finite?_double(Dadd(1, Dexp(X))) AND finite?_double(Dln(Dadd(1, Dexp(X)))) AND finite?_double(Dexp(X))
AND
abs(DtoR(X) - r_X)<=e_X
AND (((TRUE AND ((0 < ((1 + exp(r_X)) - aerr_ulp_dp_add(1, (0 / 1), exp(r_X), aerr_ulp_dp_exp(r_X, e_X)))) AND (StoD(Dadd(1, Dexp(X))) > 0))) AND (TRUE AND TRUE)))
IMPLIES
abs(DtoR(logExp(X)) - logExp_real(r_X)) <= logExp_0_error(e_X, r_X)


%|- logExp_0: PROOF
%|- (precisa)
%|- QED


logExp_error(e_X: nonneg_real, r_X: real): nonneg_real = logExp_0_error(e_X, r_X)

END logExp_cert