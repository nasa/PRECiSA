% This file is automatically generated by PRECiSA 

sqroot_cert: THEORY
BEGIN
IMPORTING PRECiSA@strategies
IMPORTING axm_bnd@aerr_ulp__double
IMPORTING axm_bnd@aerr_ulp__single
IMPORTING sqroot
IMPORTING sqroot_real

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

sqroot_0 : LEMMA
FORALL(e_Y: nonneg_real, r_Y: real, Y: double):
int_in_range?(1) AND finite?((5 / 128)) AND finite?((1 / 16)) AND finite?((1 / 8)) AND finite?((1 / 2)) AND finite?(Y) AND finite?(Dadd(1, Dmul((1 / 2), Y))) AND finite?(Dadd(Dsub(Dadd(1, Dmul((1 / 2), Y)), Dmul(Dmul((1 / 8), Y), Y)), Dmul(Dmul(Dmul((1 / 16), Y), Y), Y))) AND finite?(Dsub(Dadd(1, Dmul((1 / 2), Y)), Dmul(Dmul((1 / 8), Y), Y))) AND finite?(Dsub(Dadd(Dsub(Dadd(1, Dmul((1 / 2), Y)), Dmul(Dmul((1 / 8), Y), Y)), Dmul(Dmul(Dmul((1 / 16), Y), Y), Y)), Dmul(Dmul(Dmul(Dmul((5 / 128), Y), Y), Y), Y))) AND finite?(Dmul((5 / 128), Y)) AND finite?(Dmul((1 / 16), Y)) AND finite?(Dmul((1 / 8), Y)) AND finite?(Dmul((1 / 2), Y)) AND finite?(Dmul(Dmul((5 / 128), Y), Y)) AND finite?(Dmul(Dmul((1 / 16), Y), Y)) AND finite?(Dmul(Dmul((1 / 8), Y), Y)) AND finite?(Dmul(Dmul(Dmul((5 / 128), Y), Y), Y)) AND finite?(Dmul(Dmul(Dmul((1 / 16), Y), Y), Y)) AND finite?(Dmul(Dmul(Dmul(Dmul((5 / 128), Y), Y), Y), Y)) AND
abs(DtoR(Y) - r_Y)<=e_Y
IMPLIES
abs(DtoR(sqroot(Y)) - sqroot_real(r_Y)) <= aerr_ulp_dp_sub((((1 + ((1 / 2) * r_Y)) - (((1 / 8) * r_Y) * r_Y)) + ((((1 / 16) * r_Y) * r_Y) * r_Y)), aerr_ulp_dp_add(((1 + ((1 / 2) * r_Y)) - (((1 / 8) * r_Y) * r_Y)), aerr_ulp_dp_sub((1 + ((1 / 2) * r_Y)), aerr_ulp_dp_add(1, (0 / 1), ((1 / 2) * r_Y), aerr_ulp_dp_mul((1 / 2), (0 / 1), r_Y, e_Y)), (((1 / 8) * r_Y) * r_Y), aerr_ulp_dp_mul(((1 / 8) * r_Y), aerr_ulp_dp_mul((1 / 8), (0 / 1), r_Y, e_Y), r_Y, e_Y)), ((((1 / 16) * r_Y) * r_Y) * r_Y), aerr_ulp_dp_mul((((1 / 16) * r_Y) * r_Y), aerr_ulp_dp_mul(((1 / 16) * r_Y), aerr_ulp_dp_mul((1 / 16), (0 / 1), r_Y, e_Y), r_Y, e_Y), r_Y, e_Y)), (((((5 / 128) * r_Y) * r_Y) * r_Y) * r_Y), aerr_ulp_dp_mul(((((5 / 128) * r_Y) * r_Y) * r_Y), aerr_ulp_dp_mul((((5 / 128) * r_Y) * r_Y), aerr_ulp_dp_mul(((5 / 128) * r_Y), aerr_ulp_dp_mul((5 / 128), (0 / 1), r_Y, e_Y), r_Y, e_Y), r_Y, e_Y), r_Y, e_Y))


%|- sqroot_0: PROOF
%|- (precisa)
%|- QED


END sqroot_cert