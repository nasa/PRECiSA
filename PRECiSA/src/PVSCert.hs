-- Notices:
--
-- Copyright 2020 United States Government as represented by the Administrator of the National Aeronautics and Space Administration. All Rights Reserved.

-- Disclaimers
-- No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."

-- Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS AGREEMENT.


module PVSCert where

import AbsPVSLang
import AbsSpecLang
import AbstractSemantics
import AbstractDomain
import Common.DecisionPath
import Common.ControlFlow
import Common.TypesUtils (VarName,PredAbs(..))
import Data.Maybe (fromMaybe)
import Kodiak.Runner
import Numeric
import Prelude hiding ((<>))
import PPExt
import PVSTypes

genFpProgFile :: PVSType -> String -> Program -> Doc
genFpProgFile fp progFileName prog =
  text "% This file is automatically generated by PRECiSA \n"
  $$
  text (progFileName ++ ": THEORY")
  $$
  text "BEGIN" <> text "\n"
  $$
  importFPTheory fp <> text "\n"
  $$
  prettyDoc prog <> text "\n"
  $$
  text ("END " ++ progFileName)
    where
      importFPTheory FPSingle = text "IMPORTING float@extended_float_converter"
      importFPTheory FPDouble = text "IMPORTING float@extended_float_converter"
      importFPTheory _ = emptyDoc

genCertFile :: String -> String -> String -> Program -> Interpretation -> Doc
genCertFile inputFileName certFileName realFileName prog sem =
  text "% This file is automatically generated by PRECiSA \n"
  $$
  text (certFileName ++ ": THEORY")
  $$
  text "BEGIN"
  $$
  text ("IMPORTING PRECiSA@strategies")
  $$
  text ("IMPORTING float@aerr754dp")
  $$
  text ("IMPORTING float@aerr754sp")
  $$
  text ("IMPORTING " ++ inputFileName)
  $$
  text ("IMPORTING " ++ realFileName  ++ "\n")
  $$
  text "%|- *_TCC* : PROOF"
  $$
  text "%|- (precisa-gen-cert-tcc)"
  $$
  text "%|- QED\n"
  $$
  printCerts sem prog
  $$
  text ("END " ++ certFileName)

genRealProgFile :: PPExt a => String -> String -> a -> Doc
genRealProgFile inputFileName realProgFileName prog =
  text "% This file is automatically generated by PRECiSA \n"
  $$
  text (realProgFileName ++ ": THEORY")
  $$
  text "BEGIN"
  $$
  text ("IMPORTING " ++ inputFileName ++ "\n")
  $$
  prettyDoc prog
  $$
  text ("END " ++ realProgFileName)

genNumCertFile ::  String -> String -> [(String,PVSType,[Arg],[(Conditions,LDecisionPath,ControlFlow,KodiakResult,AExpr,[FAExpr],[AExpr])])] -> [Decl] -> Spec -> Int -> Int -> Bool -> Doc
genNumCertFile certFileName numCertFileName kodiakResult decls (Spec specBinds) maxBBDepth prec isTran =
  text "% This file is automatically generated by PRECiSA \n"
  $$
  text ("% maxDepth: " ++ show maxBBDepth ++ " , prec: 10^-" ++ show prec ++ "\n")
  $$
  text (numCertFileName ++ ": THEORY")
  $$
  text "BEGIN"
  $$
  text ("IMPORTING " ++ certFileName)
  $$
  text ("IMPORTING  PRECiSA@bbiasp")
  $$
  text ("IMPORTING PRECiSA@bbiadp")
  $$
  text ("IMPORTING PRECiSA@strategies \n")
  $$
  text "%|- *_TCC* : PROOF"
  $$
  text "%|- (precisa-gen-cert-tcc)"
  $$
  text "%|- QED\n"
  $$
  printNumCerts kodiakResult decls specBinds maxBBDepth prec isTran
  $$
  text ("END " ++ numCertFileName)

printCerts :: Interpretation -> Program -> Doc
printCerts [] _ = emptyDoc
printCerts ((f,(isTrans,fp, args, cset)):interp) decls
  = (case fp of
        Boolean -> emptyDoc
        _       -> printLemmasAndProofs fFP fReal args stm cset fp 0)
    $$
    printCerts interp decls
  where
    (_,_,Left  stm)  = fromMaybe (error $ "printCerts: function " ++ show f ++ " not found.") (findInDecls f decls)
    fFP   = if isTrans then f ++ "_fp" else f
    fReal = if isTrans then f else f ++ "_real"

printLemmasAndProofs :: String -> String -> [Arg] -> FAExpr -> ACebS -> PVSType -> Int -> Doc
printLemmasAndProofs _ _ _ _ [] _ _ = emptyDoc
printLemmasAndProofs f fReal args stm (aceb:acebs) fp n
  = prPvsLemma f fReal args aceb fp n (listFPGuards stm)
    $$
    prPvsProof f n
    $$
    printLemmasAndProofs f fReal args stm acebs fp (n+1)

prPvsProof :: String -> Int -> Doc
prPvsProof f n =
    text "%|- " <> text f <> text "_" <> int n <> text ": PROOF"
    $$ text "%|- (precisa)"
    $$ text "%|- QED"
    $$ text "\n"

prIsFinite :: FAExpr -> Doc
prIsFinite ae | getPVSType ae == FPSingle = text "finite_single?" <> parens (prettyDoc ae)
              | getPVSType ae == FPDouble = text "finite_double?" <> parens (prettyDoc ae)
              | otherwise = error $ "prIsFinite: " ++ show ae ++ " is not a floating-point expression."

prIsFiniteHp :: String -> PVSType -> [FAExpr] -> [FAExpr] -> Doc
prIsFiniteHp f fp args [] = prIsFinite (FEFun False f fp args)
prIsFiniteHp f fp args isFiniteCheckList = prIsFinite (FEFun False f fp args)
                                           <+> text "AND"
                                           <+> hsep (punctuate (text " AND") (map prIsFinite isFiniteCheckList))


prPvsLemma :: String -> String -> [Arg] -> ACeb -> PVSType -> Int -> [FAExpr] -> Doc
prPvsLemma f fReal args aceb fp n fpGuards =
  text "% Floating-Point Result:" <+> hsep (punctuate comma $ map prettyDoc fpes)
  $$ text "% Control Flow:"<+> prettyDoc cflow
  $$ text f <> text "_" <> int n <+> text ": LEMMA"
  $$ text "FORALL(" <>  hsep (punctuate comma $ map prErrorInt args)
                    <>  text ": nonneg_real" <> comma
                    <+> hsep (punctuate comma $ map prRealInt args)
                    <>  text ": real" <> comma
                    <+> hsep (punctuate comma $ map prettyDoc args)
                    <> text ")" <> text ":"
  $$ prPvsArgs' args
  -- $$ prIsFiniteHp f fp (map arg2var args) (map arg2var (filter isArgFP args) ++ fpGuards)
  $$ text "AND" <+> parens (prettyDoc c)
  $$ text "IMPLIES"
  $$ text "abs(" <> f2r fp (text f <> text "(" <>
     hsep (punctuate comma $ map (prettyDoc . arg2var) args) <> text ")" )
     <+> text "-"
     <+> text fReal <> text "("
     <> hsep (punctuate comma $ map (prettyDoc . realVar . arg2var) args) <> text ")"
     <> text ")"
     <> text "<=" <> prettyError err
  $$ text "\n"
  where
    prPvsArgs' arguments = hsep $ punctuate (text " AND") $ map prPVSVarId' arguments
    prPVSVarId' (Arg x t) = text "abs(" <> f2r t (text x)
                                   <+> text "-" <+> text "r_" <> text x <> text ")"
                                   <> text "<=" <> text "e_" <> text x
    prRealInt  (Arg x _) = text "r_" <> text x
    prErrorInt (Arg x _) = text "e_" <> text x
    ACeb {conds = c, fpExprs = fpes, eExpr = err, cFlow = cflow} = aceb

printNumCerts :: [(String,PVSType,[Arg],[(Conditions,LDecisionPath,ControlFlow,KodiakResult,AExpr,[FAExpr],[AExpr])])]
              -> [Decl]
              -> [SpecBind]
              -> Int
              -> Int
              -> Bool
              -> Doc
printNumCerts [] _ _ _ _ _ = emptyDoc
printNumCerts ((_,Boolean,_,_):_) _ _ _ _ _ = emptyDoc
printNumCerts ((f,fp,args,result):res') decls spec maxBBDepth prec isTran =
  printNumCertsFun fFP fReal args result ranges 0 fp prec maxBBDepth isTran fpGuardList
  $$
  printNumCerts res' decls spec maxBBDepth prec isTran
  where
    fpGuardList = case findInDecls f decls of
                     Just (_,_,(Left ae)) -> listFPGuards ae
                     Just (_,_,(Right _)) -> error $ "printNumCerts: function " ++ f ++ " is a predicate."
                     Nothing -> error $ "printNumCerts: function " ++ f ++ " not found."
    ranges = fromMaybe (error $ "printNumCerts: function " ++ show f ++ " not found.") (findInSpec f spec)
    fFP   = if isTran then f ++ "_fp" else f
    fReal = if isTran then f else f ++ "_real"

printNumCertsFun :: String
                 -> String
                 -> [Arg]
                 -> [(Conditions,LDecisionPath,ControlFlow,KodiakResult,AExpr,[FAExpr],[AExpr])]
                 -> [VarBind]
                 -> Int
                 -> PVSType
                 -> Int
                 -> Int
                 -> Bool
                 -> [FAExpr]
                 -> Doc
printNumCertsFun _ _ _ [] _ _ _ _ _ _ _ = emptyDoc
printNumCertsFun f fReal args ((cond, _, cflow, res, err, fpes, reales):result') ranges n fp prec maxBBDepth isTran fpGuardList =
  prInfoLemma cflow fpes reales
  $$
  prPvsNumLemma numLemma f fReal args cond roundOffError ranges fp Nothing fpGuardList
  $$
  prPvsNumProof numLemma symbLemma prec maxBBDepth
  $$
  (if isTran
     then prPvsNumLemma auxLemmaName f fReal args cond roundOffError ranges fp (Just err) fpGuardList
     else emptyDoc)
  $$
  printNumCertsFun f fReal args result' ranges (n+1) fp prec maxBBDepth isTran fpGuardList
  where
    auxLemmaName = text f <> text "_err_" <> int n
    numLemma = text f <> text "_c_" <> int n
    roundOffError = maximumUpperBound res
    symbLemma = text f <> text "_" <> int n

prInfoLemma :: ControlFlow -> [FAExpr] -> [AExpr] -> Doc
prInfoLemma cflow fpes reales = text "% Floating-Point Results:"<+> hsep (punctuate comma $ map prettyDoc fpes)
  $$
  text "% Real Results:"<+> hsep (punctuate comma $ map prettyDoc reales)
  $$
  text "% Control Flow: "<+> prettyDoc cflow

prPvsNumProof :: Doc -> Doc -> Int -> Int -> Doc
prPvsNumProof numLemma symbLemma prec maxBBDepth =
     text "%|-" <+> numLemma <+> text ": PROOF"
  $$ text "%|-" <+> parens (text "prove-concrete-lemma" <+> symbLemma <+> int prec <+> int maxBBDepth)
  $$ text "%|- QED\n"

prPvsNumLemma :: Doc
                -> String
                -> String
                -> [Arg]
                -> Conditions
                -> Double
                -> [VarBind]
                -> PVSType
                -> Maybe AExpr
                -> [FAExpr]
                -> Doc
prPvsNumLemma nameLemma f fReal args cond roundOffError ranges fp symbError fpGuards =
  nameLemma <+> text ": LEMMA"
  $$ text "FORALL(" <>  hsep (punctuate comma $ map (prettyDoc . realVar . arg2var) args)
                    <>  text ": real" <> comma
                    <+> hsep (punctuate comma $ map prettyDoc args) <> text ")" <> text ":"
  $$ prPvsArgs args
  $$ text "AND" <+> parens (prettyDoc cond)
  $$ text "AND" <+> hsep (punctuate (text " AND ") $ map printVarRange ranges)
  -- <+> text "AND"
  -- $$ prIsFiniteHp f fp (map arg2var args) (map arg2var (filter isArgFP args) ++ fpGuards)
  $$ text "IMPLIES"
  $$ lhs
  <> text "<="
  <> prettyRatNumError roundOffError <> text "\n"
  where
    divergence =  text "abs("
      <>  f2r fp (text f <> text "("
      <>  hsep (punctuate comma $ map (prettyDoc . arg2var) args) <> text ")")
      <+> text "-"
      <+> text fReal <> text "("
      <>  hsep (punctuate comma $ map (prettyDoc . realVar . arg2var) args) <> text ")"
      <>  text ")"
    lhs = maybe divergence prettyDoc symbError


prPvsArgs :: [Arg] -> Doc
prPvsArgs arguments = hsep $ punctuate (text " AND") $ map (uncurry prPVSVarId . (\a -> (argName a, argPrec a))) arguments

prPVSVarId :: String -> PVSType -> Doc
prPVSVarId x TInt = text "abs("<> text x <+> text "-" <+> text "r_" <> text x <> text ")" <> text "<= 0"
prPVSVarId x fpx  = text "abs(" <> f2r fpx (text x) <+> text "-" <+> text "r_" <> text x <> text ")"
                       <> text "<=" <> prettyDoc (HalfUlp (RealMark x) fpx)

printVarRange :: VarBind -> Doc
printVarRange (VarBind x _ lb ub) =
  text "r_" <> text x <+> text "##" <+> text "[|" <> prettyDoc lb <> comma <> prettyDoc ub <> text "|]"

prettyRatNumError :: RealFloat a => a -> Doc
prettyRatNumError roundOffError = text $ showRational (toRational roundOffError )

prettyNumError :: RealFloat a => a -> Doc
prettyNumError roundOffError = text $ showFFloat Nothing roundOffError "" -- (nextUp' roundOffError) ""

f2r :: PVSType -> Doc -> Doc
f2r fp doc = case fp of
  FPSingle -> text "StoR" <> parens doc
  FPDouble -> text "DtoR" <> parens doc
  TInt -> doc
  Boolean -> doc
  Array FPSingle _ -> text "StoR" <> parens doc
  Array FPDouble _ -> text "DtoR" <> parens doc
  t -> error $ "f2r: something went wrong, f2r not defined for " ++ show t

genExprCertFile :: String -> String -> String -> Doc -> Doc
genExprCertFile inputFileName fpFileName fileName printTranProgPairs =
  text "% This file is automatically generated by PRECiSA \n"
  $$
  text (fileName ++ ": THEORY")
  $$
  text "BEGIN"
  $$
  text "IMPORTING float@extended_float_converter, PRECiSA@strategies, PRECiSA@bbiasp, PRECiSA@bbiadp,"
  <+>
  text inputFileName
  <>
  comma
  <+>
  text fpFileName
  $$
  text "\n%|- *_TCC* : PROOF"
  $$
  text "%|- (precisa-gen-cert-tcc)"
  $$
  text "%|- QED\n"
  $$
  printTranProgPairs
  $$
  text ("\nEND " ++ fileName)

prIsFiniteHpExpr :: [FAExpr] -> Doc
prIsFiniteHpExpr [] = emptyDoc
prIsFiniteHpExpr aes = text "AND"
                       $$ hsep (punctuate (text " AND") (map prIsFinite aes))

printSymbExprCert :: PVSType -> String -> [FAExpr] -> [AExpr] -> [AExpr] -> FAExpr -> AExpr -> FBExpr -> EExpr -> Int -> Doc
printSymbExprCert fp f faeVarList errVarList realVarList fae ae be symbErr n =
  text f <> text "_expr_" <> int n <+> text ": LEMMA"
  $$ text "FORALL(" <>  hsep (punctuate comma $ map prettyVarWithType faeVarList)
                    <> comma
                    <+> hsep (punctuate comma $ map prettyDoc errVarList)
                    <>  text ": nonneg_real" <> comma
                    <+> hsep (punctuate comma $ map prettyDoc realVarList)
                    <>  text ": real"
                    <> text ")" <> text ":"
  $$ hsep (punctuate (text " AND") (map (printVarErrBound fp) faeVarList))
  $$ text "AND" <+> parens (prettyDoc be)
  -- $$ prIsFiniteHpExpr (fae:faeVarList)
  $$ text "IMPLIES"
  $$ text "abs(" <> f2r fp (prettyDoc fae)
     <+> text "-"
     <+> prettyDoc ae <> text ")"
     <+> text "<="
     <+> prettyError symbErr
  $$ text "\n%|- " <> text f <> text "_" <> int n <> text ": PROOF"
  $$ text "%|- (precisa)"
  $$ text "%|- QED"
  $$ text "\n"

printNumExprCert :: PVSType -> String -> [FAExpr] -> [AExpr] -> FAExpr -> AExpr -> FBExpr -> Double -> [VarBind] -> Int -> Int -> Int -> Doc
printNumExprCert fp f faeVarList realVarList fae ae be roundOffError ranges n prec maxBBDepth =
  text f <> text "_expr_num_" <> int n <+> text ": LEMMA"
  $$ text "FORALL(" <>  hsep (punctuate comma $ map prettyVarWithType faeVarList)
                    <>  comma
                    <+> hsep (punctuate comma $ map prettyDoc realVarList)
                    <>  text ": real"
                    <>  text ")" <> text ":"
  $$ hsep (punctuate (text " AND") $ map (uncurry prPVSVarId . (\a -> (nameFVar a, precFVar a))) faeVarList)
  $$ text "AND"
  <+> parens (prettyDoc be)
  $$ text "AND" <+> hsep (punctuate (text " AND ") $ map printVarRange ranges)
  $$ text "IMPLIES"
  $$ text "abs(" <> f2r fp (prettyDoc fae)
     <+> text "-"
     <+> prettyDoc ae <> text ")"
     <+> text "<="
  <> prettyRatNumError roundOffError  <> text "\n"
  $$ text "%|-" <+> text f <> text "_c_" <> int n <+> text ": PROOF"
  $$ text "%|-" <+> parens (text "prove-concrete-lemma" <+> text f <> text "_expr_" <> int n <+> int prec <+> int maxBBDepth)
  $$ text "%|- QED\n"

printVarErrBound :: PVSType -> FAExpr -> Doc
printVarErrBound fp var@(FVar _ _) = text "abs(" <> f2r fp (prettyDoc var)
                                                 <> text "-"
                                                 <> prettyDoc (realVar var)
                                                 <> text ")<=" <> prettyDoc (errVar var)
printVarErrBound _ ae = error $ "printVarErrBound: case " ++ show ae ++ " not expected."

printExprFunCert :: PVSType -> (Decl, [(VarName,FAExpr,AExpr,FBExpr,EExpr,Double,[FAExpr],[AExpr],[EExpr],[VarBind])]) -> Doc
printExprFunCert fp (Decl _ _ f _ _, exprList) = vcat $ zipWith (printExprCert' fp f) exprList [1, 2 ..]
printExprFunCert _ (Pred _ TauMinus _ _ _, _) = emptyDoc
printExprFunCert fp (Pred _ _ f _ _, exprList) = vcat $ zipWith (printExprCert' fp f) exprList [1, 2 ..]

printExprCert' :: PVSType -> String -> (VarName,FAExpr,AExpr,FBExpr,EExpr,Double,[FAExpr],[AExpr],[EExpr],[VarBind]) -> Int -> Doc
printExprCert' fp f (_,fae, ae, be, symbErr, numErr, faeVarList, realVarList, errVarList,varBinds) n =
  printSymbExprCert fp f faeVarList errVarList realVarList fae ae be symbErr n
  $$
  printNumExprCert fp f faeVarList realVarList fae ae be numErr varBindsRestricted n 14 7
  where
    varBindsRestricted = filter (isVarInList (map fvarName faeVarList)) varBinds
    isVarInList vars (VarBind x _ _ _) = x `elem` vars


