{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintRawPVSLang.
--   Generated by the BNF converter.

module PrintRawPVSLang where

import qualified AbsRawPVSLang
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsRawPVSLang.Id where
  prt _ (AbsRawPVSLang.Id i) = doc (showString i)
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsRawPVSLang.Id] where
  prt = prtList

instance Print AbsRawPVSLang.ElsIf where
  prt i e = case e of
    AbsRawPVSLang.ElsIf expr1 expr2 -> prPrec i 0 (concatD [doc (showString "ELSIF"), prt 0 expr1, doc (showString "THEN"), prt 0 expr2])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsRawPVSLang.ElsIf] where
  prt = prtList

instance Print AbsRawPVSLang.LetElem where
  prt i e = case e of
    AbsRawPVSLang.LetElem id expr -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 expr])
    AbsRawPVSLang.LetElemType id1 id2 expr -> prPrec i 0 (concatD [prt 0 id1, doc (showString ":"), prt 0 id2, doc (showString "="), prt 0 expr])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsRawPVSLang.LetElem] where
  prt = prtList

instance Print [AbsRawPVSLang.Expr] where
  prt = prtList

instance Print AbsRawPVSLang.Expr where
  prt i e = case e of
    AbsRawPVSLang.Let letelems expr -> prPrec i 0 (concatD [doc (showString "LET"), prt 0 letelems, doc (showString "IN"), prt 0 expr])
    AbsRawPVSLang.Or expr1 expr2 -> prPrec i 1 (concatD [prt 1 expr1, doc (showString "OR"), prt 2 expr2])
    AbsRawPVSLang.And expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString "AND"), prt 3 expr2])
    AbsRawPVSLang.Not expr -> prPrec i 3 (concatD [doc (showString "NOT"), prt 4 expr])
    AbsRawPVSLang.Eq expr1 expr2 -> prPrec i 4 (concatD [prt 5 expr1, doc (showString "="), prt 5 expr2])
    AbsRawPVSLang.Neq expr1 expr2 -> prPrec i 4 (concatD [prt 5 expr1, doc (showString "/="), prt 5 expr2])
    AbsRawPVSLang.Lt expr1 expr2 -> prPrec i 4 (concatD [prt 5 expr1, doc (showString "<"), prt 5 expr2])
    AbsRawPVSLang.LtE expr1 expr2 -> prPrec i 4 (concatD [prt 5 expr1, doc (showString "<="), prt 5 expr2])
    AbsRawPVSLang.Gt expr1 expr2 -> prPrec i 4 (concatD [prt 5 expr1, doc (showString ">"), prt 5 expr2])
    AbsRawPVSLang.GtE expr1 expr2 -> prPrec i 4 (concatD [prt 5 expr1, doc (showString ">="), prt 5 expr2])
    AbsRawPVSLang.ExprAdd expr1 expr2 -> prPrec i 5 (concatD [prt 5 expr1, doc (showString "+"), prt 6 expr2])
    AbsRawPVSLang.ExprSub expr1 expr2 -> prPrec i 5 (concatD [prt 5 expr1, doc (showString "-"), prt 6 expr2])
    AbsRawPVSLang.ExprMul expr1 expr2 -> prPrec i 6 (concatD [prt 6 expr1, doc (showString "*"), prt 7 expr2])
    AbsRawPVSLang.ExprDiv expr1 expr2 -> prPrec i 6 (concatD [prt 6 expr1, doc (showString "/"), prt 7 expr2])
    AbsRawPVSLang.ExprNeg expr -> prPrec i 7 (concatD [doc (showString "-"), prt 8 expr])
    AbsRawPVSLang.ExprPow expr1 expr2 -> prPrec i 8 (concatD [prt 9 expr1, doc (showString "^"), prt 8 expr2])
    AbsRawPVSLang.If expr1 expr2 expr3 -> prPrec i 9 (concatD [doc (showString "IF"), prt 0 expr1, doc (showString "THEN"), prt 0 expr2, doc (showString "ELSE"), prt 0 expr3, doc (showString "ENDIF")])
    AbsRawPVSLang.ListIf expr1 expr2 elsifs expr3 -> prPrec i 9 (concatD [doc (showString "IF"), prt 0 expr1, doc (showString "THEN"), prt 0 expr2, prt 0 elsifs, doc (showString "ELSE"), prt 0 expr3, doc (showString "ENDIF")])
    AbsRawPVSLang.For n1 n2 expr id -> prPrec i 9 (concatD [doc (showString "for"), doc (showString "("), prt 0 n1, doc (showString ","), prt 0 n2, doc (showString ","), prt 0 expr, doc (showString ","), prt 0 id, doc (showString ")")])
    AbsRawPVSLang.Call id exprs -> prPrec i 10 (concatD [prt 0 id, doc (showString "("), prt 0 exprs, doc (showString ")")])
    AbsRawPVSLang.ExprId id -> prPrec i 10 (concatD [prt 0 id])
    AbsRawPVSLang.Int n -> prPrec i 10 (concatD [prt 0 n])
    AbsRawPVSLang.Rat d -> prPrec i 10 (concatD [prt 0 d])
    AbsRawPVSLang.BTrue -> prPrec i 10 (concatD [doc (showString "TRUE")])
    AbsRawPVSLang.BFalse -> prPrec i 10 (concatD [doc (showString "FALSE")])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsRawPVSLang.Subrange where
  prt i e = case e of
    AbsRawPVSLang.SubrageType n1 n2 -> prPrec i 0 (concatD [doc (showString "subrange"), doc (showString "("), prt 0 n1, doc (showString ","), prt 0 n2, doc (showString ")")])

instance Print [AbsRawPVSLang.Arg] where
  prt = prtList

instance Print AbsRawPVSLang.Arg where
  prt i e = case e of
    AbsRawPVSLang.FArg ids id -> prPrec i 0 (concatD [prt 0 ids, doc (showString ":"), prt 0 id])
    AbsRawPVSLang.FArgSubrange ids subrange -> prPrec i 0 (concatD [prt 0 ids, doc (showString ":"), prt 0 subrange])
    AbsRawPVSLang.FArgGuard ids id expr -> prPrec i 0 (concatD [prt 0 ids, doc (showString ":"), prt 0 id, doc (showString "|"), prt 0 expr])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsRawPVSLang.Args where
  prt i e = case e of
    AbsRawPVSLang.FArgs args -> prPrec i 0 (concatD [prt 0 args])
    AbsRawPVSLang.FArgsNoType ids -> prPrec i 0 (concatD [prt 0 ids])

instance Print [AbsRawPVSLang.Decl] where
  prt = prtList

instance Print AbsRawPVSLang.Decl where
  prt i e = case e of
    AbsRawPVSLang.DeclN id1 args id2 expr -> prPrec i 0 (concatD [prt 0 id1, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString ":"), prt 0 id2, doc (showString "="), prt 0 expr])
    AbsRawPVSLang.Decl0 id1 id2 expr -> prPrec i 0 (concatD [prt 0 id1, doc (showString ":"), prt 0 id2, doc (showString "="), prt 0 expr])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsRawPVSLang.Imp where
  prt i e = case e of
    AbsRawPVSLang.LibImp ids -> prPrec i 0 (concatD [doc (showString "IMPORTING"), prt 0 ids])

instance Print AbsRawPVSLang.VarDecl where
  prt i e = case e of
    AbsRawPVSLang.VarDeclaration id1 id2 -> prPrec i 0 (concatD [prt 0 id1, doc (showString ":"), doc (showString "VAR"), prt 0 id2])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsRawPVSLang.VarDecl] where
  prt = prtList

instance Print AbsRawPVSLang.Program where
  prt i e = case e of
    AbsRawPVSLang.ProgImp id1 imp vardecls decls id2 -> prPrec i 0 (concatD [prt 0 id1, doc (showString ":"), doc (showString "THEORY"), doc (showString "BEGIN"), prt 0 imp, prt 0 vardecls, prt 0 decls, doc (showString "END"), prt 0 id2])
    AbsRawPVSLang.Prog id1 vardecls decls id2 -> prPrec i 0 (concatD [prt 0 id1, doc (showString ":"), doc (showString "THEORY"), doc (showString "BEGIN"), prt 0 vardecls, prt 0 decls, doc (showString "END"), prt 0 id2])

