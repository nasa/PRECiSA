entrypoints Program;

comment "%" ;

token Id       ( (letter) (letter | digit | '_' | '?' | '@')* ) ;

{- Program Expressions -}

separator nonempty Id "," ;

ElsIf.      ElsIf ::= "ELSIF" Expr "THEN" Expr ;
separator nonempty ElsIf "" ;

LetElem.      LetElem ::= Id "=" Expr;
LetElemType.  LetElem ::= Id ":" Type "=" Expr ;
separator nonempty LetElem "," ;

separator nonempty Expr "," ;
coercions   Expr 11 ;


Let.        Expr ::= "LET" [LetElem] "IN" Expr ;

Or.         Expr1 ::= Expr1 "OR" Expr2 ;

And.        Expr2 ::= Expr2 "AND" Expr3 ;

Not.        Expr3 ::= "NOT" Expr4 ;

Eq.         Expr4 ::= Expr5 "="  Expr5 ;
Neq.        Expr4 ::= Expr5 "/=" Expr5 ;
Lt.         Expr4 ::= Expr5 "<"  Expr5 ;
LtE.        Expr4 ::= Expr5 "<=" Expr5 ;
Gt.         Expr4 ::= Expr5 ">"  Expr5 ;
GtE.        Expr4 ::= Expr5 ">=" Expr5 ;

ExprAdd.      Expr5 ::= Expr5 "+" Expr6 ;
ExprSub.      Expr5 ::= Expr5 "-" Expr6 ;

ExprMul.      Expr6 ::= Expr6 "*" Expr7 ;
ExprDiv.      Expr6 ::= Expr6 "/" Expr7 ;

ExprNeg.      Expr7 ::= "-" Expr8 ;

ExprPow.      Expr8 ::= Expr9 "^" Expr8 ;

If.          Expr9 ::= "IF" Expr "THEN" Expr "ELSE" Expr "ENDIF" ;
ListIf.      Expr9 ::= "IF" Expr "THEN" Expr [ElsIf] "ELSE" Expr "ENDIF" ;
For.         Expr9 ::= "for" "(" Integer "," Integer "," Expr "," Id ")";

Call.        Expr10 ::= Id "(" [Expr] ")" ;
ExprId.      Expr10 ::= Id ;
Int.         Expr10 ::= Integer ;
Rat.         Expr10 ::= Double ;
BTrue.       Expr10 ::= "TRUE" ;
BFalse.      Expr10 ::= "FALSE" ;


{- PVS Program -}

FieldDecls. FieldDecls ::= Id ":" Type ;

separator nonempty Type "," ;
separator nonempty FieldDecls "," ;

TypeSimple. Type ::= Id ;
TypeBelow.  Type ::= "below" "(" AExpr ")" ;
TypeRecord. Type ::= "[#" [FieldDecls] "#]" ;
TypeTuple.  Type ::= "[" [Type] "]" ;
TypeArray.  Type ::= "ARRAY" "[" [Type] "->" Type "]" ;
TypeFun.    Type ::= "FUNCTION" "[" [Type] "->" Type "]" ;
TypeFun2.   Type ::= "[" [Type] "->" Type "]" ;
TypeList.   Type ::= "list" "[" Type "]" ;

SubrageType.   Subrange ::= "subrange" "(" Integer "," Integer ")" ;

separator nonempty Id "," ;

separator nonempty Arg "," ;

FArg.         Arg ::= [Id] ":" Type ;
FArgSubrange. Arg ::= [Id] ":" Subrange ;
FArgGuard.    Arg ::= [Id] ":" Type "|" BExpr  ;

FArgs.         Args ::= [Arg] ;
FArgsNoType.   Args ::= [Id] ;

separator nonempty Decl "" ;

Decl0.    Decl ::= Id ":" Type "=" AExpr  ;
DeclN.    Decl ::= Id "(" Args ")" ":" Type "=" AExpr ;
DeclRec.  Decl ::= Id "(" Args ")" ":" "RECURSIVE" Type "=" AExpr ;


LibImp.   Imp ::= "IMPORTING" [Id] ;


VarDeclaration. VarDecl ::= Id ":" "VAR" Type ;
separator VarDecl "" ;

Prog.    Program ::= Id ":" "THEORY" "BEGIN" Imp [VarDecl] [Decl] "END" Id ;
ProgImp. Program ::= Id ":" "THEORY" "BEGIN" [VarDecl] [Decl] "END" Id;


