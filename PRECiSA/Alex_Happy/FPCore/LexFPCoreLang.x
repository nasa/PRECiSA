-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Lexer definition for use with Alex 3
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}

{-# LANGUAGE PatternSynonyms #-}

module LexFPCoreLang where

import Prelude

import qualified Data.Bits
import Data.Char     (ord)
import Data.Function (on)
import Data.Word     (Word8)
}

-- Predefined character classes

$c = [A-Z\192-\221] # [\215]  -- capital isolatin1 letter (215 = \times) FIXME
$s = [a-z\222-\255] # [\247]  -- small   isolatin1 letter (247 = \div  ) FIXME
$l = [$c $s]         -- letter
$d = [0-9]           -- digit
$i = [$l $d _ ']     -- identifier character
$u = [. \n]          -- universal: any character

-- Symbols and non-identifier-like reserved words

@rsyms = \( | \) | \: | \! | "let" \* | "while" \* | "for" \* | "tensor" \* | \[ | \] | \+ | \+ \. "f64" | \- | \- \. "f64" | \* | \* \. "f64" | \/ | \/ \. "f64" | "fabs" \. "f64" | "fma" \. "f64" | "exp" \. "f64" | "exp2" \. "f64" | "expm1" \. "f64" | "log" \. "f64" | "log10" \. "f64" | "log2" \. "f64" | "log1p" \. "f64" | "pow" \. "f64" | "sqrt" \. "f64" | "cbrt" \. "f64" | "hypot" \. "f64" | "sin" \. "f64" | "cos" \. "f64" | "tan" \. "f64" | "asin" \. "f64" | "acos" \. "f64" | "atan" \. "f64" | "atan2" \. "f64" | "sinh" \. "f64" | "cosh" \. "f64" | "tanh" \. "f64" | "asinh" \. "f64" | "acosh" \. "f64" | "atanh" \. "f64" | "erf" \. "f64" | "erfc" \. "f64" | "tgamma" \. "f64" | "lgamma" \. "f64" | "ceil" \. "f64" | "floor" \. "f64" | "fmod" \. "f64" | "remainder" \. "f64" | "fmax" \. "64" | "fmin" \. "f64" | "fdim" \. "f64" | "copysign" \. "f64" | "trunc" \. "f64" | "round" \. "f64" | \< | \> | \< \= | \> \= | \= \= | \! \=

:-

-- Line comment ";"
";" [.]* ;

-- Whitespace (skipped)
$white+ ;

-- Symbols
@rsyms
    { tok (eitherResIdent TV) }

-- token Rational
[\+ \-]? $d + \/ $d * [1 2 3 4 5 6 7 8 9]$d *
    { tok (eitherResIdent T_Rational) }

-- token DecNum
[\+ \-]? ($d + (\. $d +)? | \. $d +)(e [\+ \-]? $d +)?
    { tok (eitherResIdent T_DecNum) }

-- token HexNum
[\+ \-]? 0 x (([a b c d e f]| $d)+ (\. ([a b c d e f]| $d)+)? | \. ([a b c d e f]| $d)+)(p [\+ \-]? $d +)?
    { tok (eitherResIdent T_HexNum) }

-- token Symbol
([\! \$ \% \& \* \+ \- \. \/ \< \= \> \? \@ \\ \^ \_ \~]| $l)([\! \$ \% \& \* \+ \- \. \/ \: \< \= \> \? \@ \\ \^ \_ \~]| ($d | $l)) *
    { tok (eitherResIdent T_Symbol) }

-- Keywords and Ident
$l $i*
    { tok (eitherResIdent TV) }

-- String
\" ([$u # [\" \\ \n]] | (\\ (\" | \\ | \' | n | t | r | f)))* \"
    { tok (TL . unescapeInitTail) }

{
-- | Create a token with position.
tok :: (String -> Tok) -> (Posn -> String -> Token)
tok f p = PT p . f

-- | Token without position.
data Tok
  = TK {-# UNPACK #-} !TokSymbol  -- ^ Reserved word or symbol.
  | TL !String                    -- ^ String literal.
  | TI !String                    -- ^ Integer literal.
  | TV !String                    -- ^ Identifier.
  | TD !String                    -- ^ Float literal.
  | TC !String                    -- ^ Character literal.
  | T_Rational !String
  | T_DecNum !String
  | T_HexNum !String
  | T_Symbol !String
  deriving (Eq, Show, Ord)

-- | Smart constructor for 'Tok' for the sake of backwards compatibility.
pattern TS :: String -> Int -> Tok
pattern TS t i = TK (TokSymbol t i)

-- | Keyword or symbol tokens have a unique ID.
data TokSymbol = TokSymbol
  { tsText :: String
      -- ^ Keyword or symbol text.
  , tsID   :: !Int
      -- ^ Unique ID.
  } deriving (Show)

-- | Keyword/symbol equality is determined by the unique ID.
instance Eq  TokSymbol where (==)    = (==)    `on` tsID

-- | Keyword/symbol ordering is determined by the unique ID.
instance Ord TokSymbol where compare = compare `on` tsID

-- | Token with position.
data Token
  = PT  Posn Tok
  | Err Posn
  deriving (Eq, Show, Ord)

-- | Pretty print a position.
printPosn :: Posn -> String
printPosn (Pn _ l c) = "line " ++ show l ++ ", column " ++ show c

-- | Pretty print the position of the first token in the list.
tokenPos :: [Token] -> String
tokenPos (t:_) = printPosn (tokenPosn t)
tokenPos []    = "end of file"

-- | Get the position of a token.
tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p)  = p

-- | Get line and column of a token.
tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

-- | Get line and column of a position.
posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

-- | Convert a token into "position token" form.
mkPosToken :: Token -> ((Int, Int), String)
mkPosToken t = (tokenLineCol t, tokenText t)

-- | Convert a token to its text.
tokenText :: Token -> String
tokenText t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> show s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  Err _         -> "#error"
  PT _ (T_Rational s) -> s
  PT _ (T_DecNum s) -> s
  PT _ (T_HexNum s) -> s
  PT _ (T_Symbol s) -> s

-- | Convert a token to a string.
prToken :: Token -> String
prToken t = tokenText t

-- | Finite map from text to token organized as binary search tree.
data BTree
  = N -- ^ Nil (leaf).
  | B String Tok BTree BTree
      -- ^ Binary node.
  deriving (Show)

-- | Convert potential keyword into token or use fallback conversion.
eitherResIdent :: (String -> Tok) -> String -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) =
    case compare s a of
      LT -> treeFind left
      GT -> treeFind right
      EQ -> t

-- | The keywords and symbols of the language organized as binary search tree.
resWords :: BTree
resWords =
  b "exp" 72
    (b "TRUE" 36
       (b ">=" 18
          (b "-" 9
             (b "*" 5
                (b "(" 3 (b "!=" 2 (b "!" 1 N N) N) (b ")" 4 N N))
                (b "+" 7 (b "*.f64" 6 N N) (b "+.f64" 8 N N)))
             (b "<" 14
                (b "/.f64" 12 (b "/" 11 (b "-.f64" 10 N N) N) (b ":" 13 N N))
                (b "==" 16 (b "<=" 15 N N) (b ">" 17 N N))))
          (b "M_1_PI" 27
             (b "LN10" 23
                (b "FPCore" 21
                   (b "FALSE" 20 (b "E" 19 N N) N) (b "INFINITY" 22 N N))
                (b "LOG10E" 25 (b "LN2" 24 N N) (b "LOG2E" 26 N N)))
             (b "PI_2" 32
                (b "NAN" 30
                   (b "M_2_SQRTPI" 29 (b "M_2_PI" 28 N N) N) (b "PI" 31 N N))
                (b "SQRT1_2" 34 (b "PI_4" 33 N N) (b "SQRT2" 35 N N)))))
       (b "atanh.f64" 54
          (b "asin" 45
             (b "acosh" 41
                (b "acos" 39 (b "]" 38 (b "[" 37 N N) N) (b "acos.f64" 40 N N))
                (b "and" 43 (b "acosh.f64" 42 N N) (b "array" 44 N N)))
             (b "atan.f64" 50
                (b "asinh.f64" 48
                   (b "asinh" 47 (b "asin.f64" 46 N N) N) (b "atan" 49 N N))
                (b "atan2.f64" 52 (b "atan2" 51 N N) (b "atanh" 53 N N))))
          (b "cos.f64" 63
             (b "ceil.f64" 59
                (b "cbrt.f64" 57
                   (b "cbrt" 56 (b "cast" 55 N N) N) (b "ceil" 58 N N))
                (b "copysign.f64" 61 (b "copysign" 60 N N) (b "cos" 62 N N)))
             (b "erf" 68
                (b "digits" 66
                   (b "cosh.f64" 65 (b "cosh" 64 N N) N) (b "dim" 67 N N))
                (b "erfc" 70 (b "erf.f64" 69 N N) (b "erfc.f64" 71 N N))))))
    (b "log10.f64" 108
       (b "fmod" 90
          (b "fdim.f64" 81
             (b "expm1.f64" 77
                (b "exp2.f64" 75
                   (b "exp2" 74 (b "exp.f64" 73 N N) N) (b "expm1" 76 N N))
                (b "fabs.f64" 79 (b "fabs" 78 N N) (b "fdim" 80 N N)))
             (b "fmax" 86
                (b "fma" 84
                   (b "floor.f64" 83 (b "floor" 82 N N) N) (b "fma.f64" 85 N N))
                (b "fmin" 88 (b "fmax.64" 87 N N) (b "fmin.f64" 89 N N))))
          (b "isnan" 99
             (b "hypot.f64" 95
                (b "for*" 93
                   (b "for" 92 (b "fmod.f64" 91 N N) N) (b "hypot" 94 N N))
                (b "isfinite" 97 (b "if" 96 N N) (b "isinf" 98 N N)))
             (b "lgamma.f64" 104
                (b "let*" 102
                   (b "let" 101 (b "isnormal" 100 N N) N) (b "lgamma" 103 N N))
                (b "log.f64" 106 (b "log" 105 N N) (b "log10" 107 N N)))))
       (b "sinh" 126
          (b "pow.f64" 117
             (b "nearbyint" 113
                (b "log2" 111
                   (b "log1p.f64" 110 (b "log1p" 109 N N) N) (b "log2.f64" 112 N N))
                (b "or" 115 (b "not" 114 N N) (b "pow" 116 N N)))
             (b "round.f64" 122
                (b "remainder.f64" 120
                   (b "remainder" 119 (b "ref" 118 N N) N) (b "round" 121 N N))
                (b "sin" 124 (b "signbit" 123 N N) (b "sin.f64" 125 N N))))
          (b "tensor" 135
             (b "tan" 131
                (b "sqrt" 129
                   (b "size" 128 (b "sinh.f64" 127 N N) N) (b "sqrt.f64" 130 N N))
                (b "tanh" 133 (b "tan.f64" 132 N N) (b "tanh.f64" 134 N N)))
             (b "trunc" 139
                (b "tgamma" 137 (b "tensor*" 136 N N) (b "tgamma.f64" 138 N N))
                (b "while" 141 (b "trunc.f64" 140 N N) (b "while*" 142 N N))))))
  where
  b s n = B bs (TS bs n)
    where
    bs = s

-- | Unquote string literal.
unescapeInitTail :: String -> String
unescapeInitTail = id . unesc . tail . id
  where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '\\':'r':cs  -> '\r' : unesc cs
    '\\':'f':cs  -> '\f' : unesc cs
    '"':[]       -> []
    c:cs         -> c : unesc cs
    _            -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
  deriving (Eq, Show, Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  String)   -- current input string

tokens :: String -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case s of
    []  -> Nothing
    (c:s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
  where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
